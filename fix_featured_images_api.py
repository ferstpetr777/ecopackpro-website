#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import base64
import json
from datetime import datetime
from bs4 import BeautifulSoup
import re

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WordPress API
WORDPRESS_URL = "https://ecopackpro.ru"
APPLICATION_PASSWORD = "7EKI VWpH 96dg VI3H ovlI hI4E"
USERNAME = "rtep1976@me.com"

class FeaturedImageFixer:
    def __init__(self, url, username, app_password):
        self.url = url.rstrip('/')
        self.username = username
        self.app_password = app_password
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        credentials = f"{username}:{app_password}"
        encoded_credentials = base64.b64encode(credentials.encode()).decode()
        
        self.headers = {
            'Authorization': f'Basic {encoded_credentials}',
            'Content-Type': 'application/json',
            'User-Agent': 'WordPress-API-Client/1.0'
        }
    
    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WordPress API"""
        try:
            response = requests.get(
                f"{self.url}/wp-json/wp/v2/users/me",
                headers=self.headers,
                timeout=30
            )
            
            if response.status_code == 200:
                user_data = response.json()
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data.get('name', 'Unknown')}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def get_post_data(self, post_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞ –≤–∫–ª—é—á–∞—è –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ —Å –≥–ª–∞–≤–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            response = requests.get(
                f"{self.url}/wp-json/wp/v2/posts/{post_id}",
                headers=self.headers,
                params={'_embed': 'wp:featuredmedia'},
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞ {post_id}: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞ {post_id}: {e}")
            return None
    
    def get_featured_image_info(self, post_data):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–ª–∞–≤–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        featured_media = post_data.get('_embedded', {}).get('wp:featuredmedia', [])
        
        if featured_media:
            media_info = featured_media[0]
            return {
                'id': media_info.get('id'),
                'url': media_info.get('source_url'),
                'alt': media_info.get('alt_text', ''),
                'title': media_info.get('title', {}).get('rendered', ''),
                'caption': media_info.get('caption', {}).get('rendered', '')
            }
        return None
    
    def extract_images_from_content(self, content):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            soup = BeautifulSoup(content, 'html.parser')
            images = []
            
            for img_tag in soup.find_all('img'):
                img_info = {
                    'tag': img_tag,
                    'src': img_tag.get('src', ''),
                    'alt': img_tag.get('alt', ''),
                    'class': img_tag.get('class', []),
                    'title': img_tag.get('title', ''),
                    'parent_tag': img_tag.parent.name if img_tag.parent else 'unknown'
                }
                images.append(img_info)
            
            return images
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            return []
    
    def find_placeholder_images(self, images):
        """–ü–æ–∏—Å–∫ placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        placeholder_indicators = ['Tvist-PRO', 'placeholder', 'default']
        placeholders = []
        
        for img_info in images:
            src = img_info['src'].lower()
            if any(indicator.lower() in src for indicator in placeholder_indicators):
                placeholders.append(img_info)
        
        return placeholders
    
    def find_wrong_images(self, images, featured_image_url):
        """–ü–æ–∏—Å–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≥–ª–∞–≤–Ω–æ–º—É)"""
        if not featured_image_url:
            return []
        
        featured_filename = featured_image_url.split('/')[-1]
        wrong_images = []
        
        for img_info in images:
            img_filename = img_info['src'].split('/')[-1]
            if img_filename != featured_filename:
                wrong_images.append(img_info)
        
        return wrong_images
    
    def create_correct_image_html(self, featured_img, post_title):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ HTML –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not featured_img:
            return None
        
        # –°–æ–∑–¥–∞–µ–º alt —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç–∞—Ç—å–∏
        alt_text = post_title
        
        # –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ç–∏–ª–µ WordPress
        img_html = f'''<figure class="wp-block-image size-large" style="text-align: center; margin: 20px auto; max-width: 80%;">
<img alt="{alt_text}" class="wp-image-{featured_img['id']}" decoding="async" height="1024" loading="lazy" sizes="auto, (max-width: 1536px) 100vw, 1536px" src="{featured_img['url']}" srcset="{featured_img['url']} 1536w, {featured_img['url']} 300w, {featured_img['url']} 1024w, {featured_img['url']} 600w, {featured_img['url']} 64w" style="border-radius: 12px; box-shadow: 0 8px 25px rgba(0,0,0,0.15); transition: transform 0.3s ease, box-shadow 0.3s ease; max-width: 100%; height: auto;" width="1536"/>
</figure>'''
        
        return img_html
    
    def fix_post_images(self, post_id, preview_mode=True):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–æ—Å—Ç–µ"""
        print(f"\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å—Ç–∞—Ç—å–µ ID {post_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
        post_data = self.get_post_data(post_id)
        if not post_data:
            return False
        
        post_title = post_data.get('title', {}).get('rendered', '')
        post_content = post_data.get('content', {}).get('rendered', '')
        
        print(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {post_title}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–ª–∞–≤–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        featured_img = self.get_featured_image_info(post_data)
        if not featured_img:
            print("‚ùå –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        print(f"üñºÔ∏è  –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {featured_img['url'].split('/')[-1]}")
        print(f"üìù Alt —Ç–µ–∫—Å—Ç: {featured_img['alt']}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        images = self.extract_images_from_content(post_content)
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ: {len(images)}")
        
        # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        placeholder_images = self.find_placeholder_images(images)
        wrong_images = self.find_wrong_images(images, featured_img['url'])
        
        print(f"üö® –ù–∞–π–¥–µ–Ω–æ placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(placeholder_images)}")
        print(f"üö® –ù–∞–π–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(wrong_images)}")
        
        if not placeholder_images and not wrong_images:
            print("‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return True
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π HTML –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        correct_img_html = self.create_correct_image_html(featured_img, post_title)
        if not correct_img_html:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π HTML –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        new_content = post_content
        
        # –ó–∞–º–µ–Ω—è–µ–º placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for placeholder in placeholder_images:
            placeholder_html = str(placeholder['tag'])
            print(f"üîÑ –ó–∞–º–µ–Ω–∞ placeholder: {placeholder['src'].split('/')[-1]}")
            new_content = new_content.replace(placeholder_html, correct_img_html)
        
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for wrong_img in wrong_images:
            wrong_html = str(wrong_img['tag'])
            print(f"üîÑ –ó–∞–º–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {wrong_img['src'].split('/')[-1]}")
            new_content = new_content.replace(wrong_html, correct_img_html)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if new_content == post_content:
            print("‚ÑπÔ∏è  –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return True
        
        if preview_mode:
            print("\nüìã –ü–†–ï–í–¨–Æ –†–ï–ñ–ò–ú - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            print("=" * 60)
            print("–ë—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
            for placeholder in placeholder_images:
                print(f"  - Placeholder: {placeholder['src'].split('/')[-1]}")
            for wrong_img in wrong_images:
                print(f"  - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ: {wrong_img['src'].split('/')[-1]}")
            print(f"\n–ë—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞: {featured_img['url'].split('/')[-1]}")
            print("=" * 60)
            return True
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        try:
            update_data = {
                'content': new_content
            }
            
            response = requests.post(
                f"{self.url}/wp-json/wp/v2/posts/{post_id}",
                headers=self.headers,
                json=update_data,
                timeout=30
            )
            
            if response.status_code == 200:
                print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def verify_fix(self, post_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç—å–∏ ID {post_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
        post_data = self.get_post_data(post_id)
        if not post_data:
            return False
        
        post_title = post_data.get('title', {}).get('rendered', '')
        post_content = post_data.get('content', {}).get('rendered', '')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–ª–∞–≤–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        featured_img = self.get_featured_image_info(post_data)
        if not featured_img:
            print("‚ùå –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        images = self.extract_images_from_content(post_content)
        
        # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        placeholder_images = self.find_placeholder_images(images)
        wrong_images = self.find_wrong_images(images, featured_img['url'])
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        print(f"  - –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ: {len(images)}")
        print(f"  - Placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(placeholder_images)}")
        print(f"  - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(wrong_images)}")
        
        if not placeholder_images and not wrong_images:
            print("‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
            return True
        else:
            print("‚ùå –û—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ì–õ–ê–í–ù–´–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –ß–ï–†–ï–ó WORDPRESS API")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    fixer = FeaturedImageFixer(WORDPRESS_URL, USERNAME, APPLICATION_PASSWORD)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WordPress API...")
    if not fixer.test_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WordPress API")
        return
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å—Ç–∞—Ç—å–µ 7954
    test_post_id = 7954
    print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê –°–¢–ê–¢–¨–ï ID {test_post_id}")
    print("=" * 50)
    
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–µ–≤—å—é
    print("\nüìã –†–ï–ñ–ò–ú –ü–†–ï–í–¨–Æ:")
    preview_success = fixer.fix_post_images(test_post_id, preview_mode=True)
    
    if not preview_success:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–µ–≤—å—é")
        return
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print(f"\n‚ùì –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ —Å—Ç–∞—Ç—å–µ ID {test_post_id}? (y/n): ", end="")
    confirm = input().lower().strip()
    
    if confirm == 'y':
        print("\nüíæ –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–ô:")
        fix_success = fixer.fix_post_images(test_post_id, preview_mode=False)
        
        if fix_success:
            print("\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê:")
            verify_success = fixer.verify_fix(test_post_id)
            
            if verify_success:
                print(f"\n‚úÖ –°—Ç–∞—Ç—å—è ID {test_post_id} —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
                print(f"üîó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {WORDPRESS_URL}/?p={test_post_id}&preview=true")
            else:
                print(f"\n‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è —Å—Ç–∞—Ç—å–∏ ID {test_post_id}")
        else:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫ —Å—Ç–∞—Ç—å–µ ID {test_post_id}")
    else:
        print("\n‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã")

if __name__ == "__main__":
    main()
