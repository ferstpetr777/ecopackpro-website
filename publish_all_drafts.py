#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
from requests.auth import HTTPBasicAuth
import json
import time
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WordPress API
WP_API_URL = "https://ecopackpro.ru/wp-json/wp/v2"
WP_USERNAME = "rtep1976@me.com"
WP_APP_PASSWORD = "7EKI VWpH 96dg VI3H ovlI hI4E"

class DraftPublisher:
    def __init__(self):
        self.auth = HTTPBasicAuth(WP_USERNAME, WP_APP_PASSWORD)
        self.headers = {'Content-Type': 'application/json'}
        self.results = []
        self.start_time = datetime.now()
    
    def publish_article(self, post_id, article_title):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏"""
        url = f"{WP_API_URL}/posts/{post_id}"
        
        data = {
            'status': 'publish'
        }
        
        try:
            response = requests.post(url, auth=self.auth, headers=self.headers, json=data, timeout=30)
            
            if response.status_code == 200:
                post = response.json()
                return {
                    'id': post_id,
                    'title': article_title,
                    'status': 'success',
                    'url': post['link'],
                    'slug': post['slug']
                }
            else:
                return {
                    'id': post_id,
                    'title': article_title,
                    'status': 'failed',
                    'error': f"HTTP {response.status_code}: {response.text[:100]}"
                }
                
        except Exception as e:
            return {
                'id': post_id,
                'title': article_title,
                'status': 'error',
                'error': str(e)[:100]
            }
    
    def publish_all_drafts(self):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π-—á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤"""
        print("=" * 80)
        print("üì∞ –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –í–°–ï–• –°–¢–ê–¢–ï–ô-–ß–ï–†–ù–û–í–ò–ö–û–í")
        print("=" * 80)
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∏—Å–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç–∞—Ç—å—é 7152)
        articles = [
            (7907, "–ö—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã: –ø–æ–ª–Ω—ã–π –≥–∏–¥ –ø–æ –≤—ã–±–æ—Ä—É –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é"),
            (7908, "–ü–æ—á—Ç–æ–≤—ã–µ –∫–æ—Ä–æ–±–∫–∏: —Ä–∞–∑–º–µ—Ä—ã, –≤–∏–¥—ã, —Ü–µ–Ω—ã –∏ –≥–¥–µ –∫—É–ø–∏—Ç—å"),
            (7909, "–ó–∏–ø –ø–∞–∫–µ—Ç—ã"),
            (7910, "Zip lock –ø–∞–∫–µ—Ç—ã —Å –±–µ–≥—É–Ω–∫–æ–º: —É–¥–æ–±–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"),
            (7911, "–ö–æ–Ω–≤–µ—Ä—Ç—ã —Å –≤–æ–∑–¥—É—à–Ω–æ–π –ø–æ–¥—É—à–∫–æ–π –¥–ª—è —Ö—Ä—É–ø–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤"),
            (7912, "–ö–æ–Ω–≤–µ—Ä—Ç—ã —Å –≤–æ–∑–¥—É—à–Ω–æ–π –ø—Ä–æ—Å–ª–æ–π–∫–æ–π –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"),
            (7913, "–ö—Ä–∞—Ñ—Ç–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã —Å –≤–æ–∑–¥—É—à–Ω–æ–π –ø–æ–¥—É—à–∫–æ–π –¥–ª—è –±–∏–∑–Ω–µ—Å–∞: –∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª"),
            (7914, "–ö—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ"),
            (7915, "–ö—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã –Ω–æ–º–µ—Ä–Ω—ã–µ"),
            (7916, "–ö—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã —á–µ—Ä–Ω–æ-–±–µ–ª—ã–µ"),
            (7917, "–ö—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã —Å –∫–∞—Ä–º–∞–Ω–æ–º"),
            (7918, "Zip lock –ø–∞–∫–µ—Ç—ã –º–∞—Ç–æ–≤—ã–µ"),
            (7919, "Zip lock –ø–∞–∫–µ—Ç—ã –æ–ø—Ç–æ–º"),
            (7920, "–ö—Ä–∞—Ñ—Ç–æ–≤—ã–µ –∫–æ–Ω–≤–µ—Ä—Ç—ã"),
            (7921, "–ü—É–∑—ã—Ä—á–∞—Ç—ã–µ –ø–∞–∫–µ—Ç—ã –í–ü–ü"),
            (7922, "–ö–æ—Ä–æ–±–∫–∏ –¥–ª—è –ø–æ—á—Ç—ã"),
            (7923, "–ö–æ—Ä–æ–±–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"),
            (7924, "–°–∞–º–æ–∫–ª–µ—è—â–∏–µ—Å—è –∫–∞—Ä–º–∞–Ω—ã"),
            (7925, "–ê–Ω—Ç–∏–º–∞–≥–Ω–∏—Ç–Ω–∞—è –ø–ª–æ–º–±–∞"),
            (7926, "–ù–∞–∫–ª–µ–π–∫–∞ –ø–ª–æ–º–±–∞ –∞–Ω—Ç–∏–º–∞–≥–Ω–∏—Ç"),
            (7927, "–ü–ª–æ–º–±–∏—Ä–∞—Ç–æ—Ä –¥–ª—è –±–æ—á–µ–∫"),
            (7928, "–ù–æ–º–µ—Ä–Ω—ã–µ –ø–ª–æ–º–±—ã –Ω–∞–∫–ª–µ–π–∫–∏"),
            (7929, "Zip lock –ø–∞–∫–µ—Ç—ã —Å –±–µ–ª–æ–π –ø–æ–ª–æ—Å–æ–π"),
            (7930, "–ë–µ–ª—ã–µ –∫—Ä–∞—Ñ—Ç –ø–∞–∫–µ—Ç—ã —Å –ø—É–∑—ã—Ä—á–∞—Ç–æ–π –ø–ª—ë–Ω–∫–æ–π"),
            (7931, "–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ zip lock –ø–∞–∫–µ—Ç—ã"),
            (7932, "–ö—É–ø–∏—Ç—å –∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã —Å –Ω–æ–º–µ—Ä–Ω—ã–º —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–º"),
            (7933, "–ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã –æ–ø—Ç–æ–º"),
            (7934, "–ö—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã —á–µ—Ä–Ω–æ-–±–µ–ª—ã–µ —Å –∫–∞—Ä–º–∞–Ω–æ–º —Ü–µ–Ω–∞"),
            (7935, "–ú–∞—Ç–æ–≤—ã–µ zip lock –ø–∞–∫–µ—Ç—ã —Å –±–µ–≥—É–Ω–∫–æ–º 10√ó15"),
            (7936, "–ö—É–ø–∏—Ç—å –æ–ø—Ç–æ–º zip lock –ø–∞–∫–µ—Ç—ã –º–∞—Ç–æ–≤—ã–µ 30 –º–∫–º"),
            (7937, "–ö—Ä–∞—Ñ—Ç –∫–æ–Ω–≤–µ—Ä—Ç—ã —Å –≤–æ–∑–¥—É—à–Ω–æ–π –ø–æ–¥—É—à–∫–æ–π F/3"),
            (7938, "–ü–æ—á—Ç–æ–≤—ã–µ –∫–æ—Ä–æ–±–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ S 260√ó170√ó80"),
            (7939, "–ü–æ—á—Ç–æ–≤—ã–µ –∫–æ—Ä–æ–±–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ XL 530√ó360√ó220"),
            (7940, "–ö—É–ø–∏—Ç—å —Å–∞–º–æ–∫–ª–µ—è—â–∏–µ—Å—è –∫–∞—Ä–º–∞–Ω—ã SD –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"),
            (7941, "–ê–Ω—Ç–∏–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –Ω–∞–∫–ª–µ–π–∫–∏ –¥–ª—è –≤–æ–¥—è–Ω—ã—Ö —Å—á—ë—Ç—á–∏–∫–æ–≤"),
            (7942, "–ê–Ω—Ç–∏–º–∞–≥–Ω–∏—Ç–Ω–∞—è –ø–ª–æ–º–±–∞ —Ü–µ–Ω–∞ –∑–∞ 100 —à—Ç—É–∫"),
            (7943, "–ü–ª–æ–º–±–∏—Ä–∞—Ç–æ—Ä –¥–ª—è –µ–≤—Ä–æ–±–æ—á–µ–∫ 2 –¥—é–π–º–∞"),
            (7944, "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ–ø–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—á–µ–∫ ¬æ –¥—é–π–º–∞"),
            (7945, "–ö—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã —á–µ—Ä–Ω–æ-–±–µ–ª—ã–µ –±–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–∞ –ê4"),
            (7946, "–ö—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –¥–ª—è –æ–¥–µ–∂–¥—ã"),
            (7947, "–ö—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ Ozon"),
            (7948, "–ü–æ—á—Ç–æ–≤—ã–µ –∫–æ—Ä–æ–±–∫–∏ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –Ω–∞ –∑–∞–∫–∞–∑"),
            (7949, "–ó–∏–ø –ø–∞–∫–µ—Ç—ã —Å –±–µ–≥—É–Ω–∫–æ–º –∫—É–ø–∏—Ç—å –ú–æ—Å–∫–≤–∞"),
            (7950, "–ú–∞—Ç–æ–≤—ã–µ zip lock –ø–∞–∫–µ—Ç—ã –¥–ª—è —á–∞—è"),
            (7951, "Zip lock –ø–∞–∫–µ—Ç—ã —Å –ø–æ–¥–≤–µ—Å–æ–º"),
            (7952, "–ë–µ–ª—ã–µ –∫—Ä–∞—Ñ—Ç-–ø–∞–∫–µ—Ç—ã —Å –ø—É–∑—ã—Ä—á–∞—Ç–æ–π –ø–ª—ë–Ω–∫–æ–π –æ–ø—Ç–æ–º"),
            (7953, "–ü–ª–æ—Å–∫–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç—ã —Å –≤–æ–∑–¥—É—à–Ω–æ–π –ø–æ–¥—É—à–∫–æ–π –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"),
            (7954, "–ü–∞–∫–µ—Ç—ã –∏–∑ –≤–æ–∑–¥—É—à–Ω–æ-–ø—É–∑—ã—Ä—å–∫–æ–≤–æ–π –ø–ª—ë–Ω–∫–∏ –æ–ø—Ç–æ–º"),
            (7955, "–ê–Ω—Ç–∏–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –ø–ª–æ–º–±—ã –¥–ª—è –≥–∞–∑–æ–≤—ã—Ö —Å—á—ë—Ç—á–∏–∫–æ–≤"),
            (7956, "–°–∞–º–æ–∫–ª–µ—è—â–∏–µ—Å—è –∫–∞—Ä–º–∞–Ω—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö")
        ]
        
        success_count = 0
        failed_count = 0
        
        for i, (post_id, title) in enumerate(articles, 1):
            print(f"[{i:2d}/50] –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ ID {post_id}")
            print(f"    üìù {title}")
            
            result = self.publish_article(post_id, title)
            self.results.append(result)
            
            if result['status'] == 'success':
                print(f"    ‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: {result['url']}")
                success_count += 1
            else:
                print(f"    ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                failed_count += 1
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(1)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        self.generate_report(success_count, failed_count)
        
        return success_count, failed_count
    
    def generate_report(self, success_count, failed_count):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        end_time = datetime.now()
        duration = end_time - self.start_time
        
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–£–ë–õ–ò–ö–ê–¶–ò–ò")
        print("=" * 80)
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {success_count}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {failed_count}")
        print(f"üìù –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {len(self.results)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        report_filename = f"publish_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(report_filename, 'w', encoding='utf-8') as f:
            json.dump({
                'timestamp': datetime.now().isoformat(),
                'duration': str(duration),
                'summary': {
                    'total': len(self.results),
                    'success': success_count,
                    'failed': failed_count
                },
                'results': self.results
            }, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_filename}")
        
        # –í—ã–≤–æ–¥–∏–º —É—Å–ø–µ—à–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
        if success_count > 0:
            print(f"\n‚úÖ –û–ü–£–ë–õ–ò–ö–û–í–ê–ù–ù–´–ï –°–¢–ê–¢–¨–ò ({success_count}):")
            print("=" * 80)
            for result in self.results:
                if result['status'] == 'success':
                    print(f"{result['id']:4d}. {result['title']}")
                    print(f"     üîó {result['url']}")
                    print()
        
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
        if failed_count > 0:
            print(f"\n‚ùå –°–¢–ê–¢–¨–ò –° –û–®–ò–ë–ö–ê–ú–ò ({failed_count}):")
            for result in self.results:
                if result['status'] != 'success':
                    print(f"   ID {result['id']}: {result['title']} - {result['error']}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    publisher = DraftPublisher()
    success, failed = publisher.publish_all_drafts()
    
    if success > 0:
        print(f"\nüéâ –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê! –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {success} —Å—Ç–∞—Ç–µ–π")
    else:
        print("\n‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –û–ü–£–ë–õ–ò–ö–û–í–ê–¢–¨ –ù–ò –û–î–ù–£ –°–¢–ê–¢–¨–Æ")

if __name__ == "__main__":
    main()
