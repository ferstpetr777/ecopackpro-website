#!/usr/bin/env python3
"""
E2E —Ç–µ—Å—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ / WebView - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–æ—Ä–∑–∏–Ω—ã
–ê–≤—Ç–æ—Ä: EcopackPro Dev Team
–î–∞—Ç–∞: 2025-10-30
"""

import sys
import os
import subprocess
import json
import time
import requests
from datetime import datetime

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    RESET = '\033[0m'
    BOLD = '\033[1m'

class MobileWebViewE2ETest:
    def __init__(self):
        self.site_path = '/var/www/fastuser/data/www/ecopackpro.ru'
        self.site_url = 'https://ecopackpro.ru'
        self.api_base = f'{self.site_url}/wp-json/ecopackpro/v1'
        self.results = []
        self.start_time = None
        
    def log(self, message, color=Colors.RESET):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–º"""
        print(f"{color}{message}{Colors.RESET}")
    
    def test_functions_php_exists(self):
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è functions.php"""
        self.log("\nüìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ functions.php", Colors.BLUE + Colors.BOLD)
        
        functions_path = f'{self.site_path}/wp-content/themes/Impreza-child/functions.php'
        
        if not os.path.exists(functions_path):
            self.results.append({
                'test': 'functions.php exists',
                'status': 'FAIL',
                'message': '–§–∞–π–ª functions.php –Ω–µ –Ω–∞–π–¥–µ–Ω'
            })
            self.log("‚ùå FAIL: functions.php –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.RED)
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        result = subprocess.run(
            ['php', '-l', functions_path],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            self.results.append({
                'test': 'functions.php valid',
                'status': 'PASS',
                'message': 'functions.php —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω'
            })
            self.log("‚úÖ PASS: functions.php –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω", Colors.GREEN)
            return True
        else:
            self.results.append({
                'test': 'functions.php syntax',
                'status': 'FAIL',
                'message': f'–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {result.stderr}'
            })
            self.log(f"‚ùå FAIL: {result.stderr}", Colors.RED)
            return False
    
    def test_bridge_script_exists(self):
        """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è mobile-webview-cart-bridge.js"""
        self.log("\nüìã –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ mobile-webview-cart-bridge.js", Colors.BLUE + Colors.BOLD)
        
        bridge_path = f'{self.site_path}/wp-content/themes/Impreza-child/mobile-webview-cart-bridge.js'
        
        if not os.path.exists(bridge_path):
            self.results.append({
                'test': 'Bridge script exists',
                'status': 'FAIL',
                'message': '–°–∫—Ä–∏–ø—Ç bridge –Ω–µ –Ω–∞–π–¥–µ–Ω'
            })
            self.log("‚ùå FAIL: Bridge —Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.RED)
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        size = os.path.getsize(bridge_path)
        size_kb = size / 1024
        
        if size_kb > 10:  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å > 10 KB
            self.results.append({
                'test': 'Bridge script valid',
                'status': 'PASS',
                'message': f'Bridge —Å–∫—Ä–∏–ø—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ({size_kb:.2f} KB)'
            })
            self.log(f"‚úÖ PASS: Bridge —Å–∫—Ä–∏–ø—Ç –Ω–∞–π–¥–µ–Ω ({size_kb:.2f} KB)", Colors.GREEN)
            return True
        else:
            self.results.append({
                'test': 'Bridge script size',
                'status': 'WARN',
                'message': f'–°–∫—Ä–∏–ø—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π ({size_kb:.2f} KB)'
            })
            self.log(f"‚ö†Ô∏è  WARN: –†–∞–∑–º–µ—Ä –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª ({size_kb:.2f} KB)", Colors.YELLOW)
            return True
    
    def test_api_endpoint_cart_count(self):
        """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ REST API endpoint /cart/count"""
        self.log("\nüìã –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ API /cart/count", Colors.BLUE + Colors.BOLD)
        
        try:
            url = f'{self.api_base}/cart/count'
            response = requests.get(url, timeout=10, verify=False)
            
            if response.status_code == 200:
                data = response.json()
                
                if 'count' in data:
                    self.results.append({
                        'test': 'API cart/count',
                        'status': 'PASS',
                        'message': f'API —Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data["count"]}'
                    })
                    self.log(f"‚úÖ PASS: API –≤–µ—Ä–Ω—É–ª count={data['count']}", Colors.GREEN)
                    self.log(f"   Response: {json.dumps(data, ensure_ascii=False)}", Colors.CYAN)
                    return True
                else:
                    self.results.append({
                        'test': 'API cart/count format',
                        'status': 'FAIL',
                        'message': 'API –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–æ–ª–µ count'
                    })
                    self.log("‚ùå FAIL: –ù–µ—Ç –ø–æ–ª—è count –≤ –æ—Ç–≤–µ—Ç–µ", Colors.RED)
                    return False
            else:
                self.results.append({
                    'test': 'API cart/count status',
                    'status': 'FAIL',
                    'message': f'HTTP {response.status_code}'
                })
                self.log(f"‚ùå FAIL: HTTP {response.status_code}", Colors.RED)
                return False
        except Exception as e:
            self.results.append({
                'test': 'API cart/count',
                'status': 'FAIL',
                'message': f'–û—à–∏–±–∫–∞: {str(e)}'
            })
            self.log(f"‚ùå FAIL: {str(e)}", Colors.RED)
            return False
    
    def test_api_endpoint_cart_details(self):
        """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ REST API endpoint /cart/details"""
        self.log("\nüìã –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ API /cart/details", Colors.BLUE + Colors.BOLD)
        
        try:
            url = f'{self.api_base}/cart/details'
            response = requests.get(url, timeout=10, verify=False)
            
            if response.status_code == 200:
                data = response.json()
                
                if 'count' in data and 'items' in data:
                    self.results.append({
                        'test': 'API cart/details',
                        'status': 'PASS',
                        'message': f'API —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–æ–≤–∞—Ä–æ–≤: {data["count"]}, items: {len(data["items"])}'
                    })
                    self.log(f"‚úÖ PASS: API –≤–µ—Ä–Ω—É–ª –¥–µ—Ç–∞–ª–∏ –∫–æ—Ä–∑–∏–Ω—ã", Colors.GREEN)
                    self.log(f"   Count: {data['count']}, Items: {len(data['items'])}", Colors.CYAN)
                    return True
                else:
                    self.results.append({
                        'test': 'API cart/details format',
                        'status': 'FAIL',
                        'message': 'API –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è'
                    })
                    self.log("‚ùå FAIL: –ù–µ—Ç –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –æ—Ç–≤–µ—Ç–µ", Colors.RED)
                    return False
            else:
                self.results.append({
                    'test': 'API cart/details status',
                    'status': 'FAIL',
                    'message': f'HTTP {response.status_code}'
                })
                self.log(f"‚ùå FAIL: HTTP {response.status_code}", Colors.RED)
                return False
        except Exception as e:
            self.results.append({
                'test': 'API cart/details',
                'status': 'FAIL',
                'message': f'–û—à–∏–±–∫–∞: {str(e)}'
            })
            self.log(f"‚ùå FAIL: {str(e)}", Colors.RED)
            return False
    
    def test_bridge_script_loaded(self):
        """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        self.log("\nüìã –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ bridge –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ", Colors.BLUE + Colors.BOLD)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            response = requests.get(self.site_url, timeout=10, verify=False)
            html = response.text
            
            if 'mobile-webview-cart-bridge.js' in html:
                self.results.append({
                    'test': 'Bridge script loaded',
                    'status': 'PASS',
                    'message': '–°–∫—Ä–∏–ø—Ç bridge –ø–æ–¥–∫–ª—é—á–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ'
                })
                self.log("‚úÖ PASS: Bridge —Å–∫—Ä–∏–ø—Ç –Ω–∞–π–¥–µ–Ω –≤ HTML", Colors.GREEN)
                return True
            else:
                self.results.append({
                    'test': 'Bridge script loaded',
                    'status': 'FAIL',
                    'message': '–°–∫—Ä–∏–ø—Ç bridge –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HTML'
                })
                self.log("‚ùå FAIL: Bridge —Å–∫—Ä–∏–ø—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", Colors.RED)
                return False
        except Exception as e:
            self.results.append({
                'test': 'Bridge script loaded',
                'status': 'FAIL',
                'message': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}'
            })
            self.log(f"‚ùå FAIL: {str(e)}", Colors.RED)
            return False
    
    def test_data_attributes(self):
        """–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤ –≤ HTML"""
        self.log("\nüìã –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ data-cart-count –∞—Ç—Ä–∏–±—É—Ç–æ–≤", Colors.BLUE + Colors.BOLD)
        
        try:
            response = requests.get(self.site_url, timeout=10, verify=False)
            html = response.text
            
            has_data_attr = 'data-cart-count' in html
            has_init_script = 'initialCartCount' in html
            
            if has_data_attr and has_init_script:
                self.results.append({
                    'test': 'Data attributes',
                    'status': 'PASS',
                    'message': 'data-cart-count –∏ initialCartCount –Ω–∞–π–¥–µ–Ω—ã'
                })
                self.log("‚úÖ PASS: –í—Å–µ data-–∞—Ç—Ä–∏–±—É—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ", Colors.GREEN)
                return True
            elif has_data_attr or has_init_script:
                self.results.append({
                    'test': 'Data attributes',
                    'status': 'WARN',
                    'message': f'–ß–∞—Å—Ç–∏—á–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è (data-attr: {has_data_attr}, init: {has_init_script})'
                })
                self.log(f"‚ö†Ô∏è  WARN: –ù–µ –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã –Ω–∞–π–¥–µ–Ω—ã", Colors.YELLOW)
                return True
            else:
                self.results.append({
                    'test': 'Data attributes',
                    'status': 'FAIL',
                    'message': 'data-–∞—Ç—Ä–∏–±—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
                })
                self.log("‚ùå FAIL: data-–∞—Ç—Ä–∏–±—É—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", Colors.RED)
                return False
        except Exception as e:
            self.results.append({
                'test': 'Data attributes',
                'status': 'FAIL',
                'message': f'–û—à–∏–±–∫–∞: {str(e)}'
            })
            self.log(f"‚ùå FAIL: {str(e)}", Colors.RED)
            return False
    
    def test_cors_headers(self):
        """–¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS headers –¥–ª—è API"""
        self.log("\nüìã –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS headers", Colors.BLUE + Colors.BOLD)
        
        try:
            url = f'{self.api_base}/cart/count'
            response = requests.options(url, timeout=10, verify=False)
            
            has_cors = 'Access-Control-Allow-Origin' in response.headers
            
            if has_cors:
                self.results.append({
                    'test': 'CORS headers',
                    'status': 'PASS',
                    'message': 'CORS headers —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'
                })
                self.log(f"‚úÖ PASS: CORS headers –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç", Colors.GREEN)
                self.log(f"   Allow-Origin: {response.headers.get('Access-Control-Allow-Origin')}", Colors.CYAN)
                return True
            else:
                self.results.append({
                    'test': 'CORS headers',
                    'status': 'WARN',
                    'message': 'CORS headers –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–º–æ–≥—É—Ç –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è)'
                })
                self.log("‚ö†Ô∏è  WARN: CORS headers –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", Colors.YELLOW)
                return True
        except Exception as e:
            self.results.append({
                'test': 'CORS headers',
                'status': 'WARN',
                'message': f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å: {str(e)}'
            })
            self.log(f"‚ö†Ô∏è  WARN: {str(e)}", Colors.YELLOW)
            return True
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        self.log("\n" + "="*80, Colors.BOLD)
        self.log("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ E2E –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø (MOBILE WEBVIEW)", Colors.BOLD + Colors.BLUE)
        self.log("="*80, Colors.BOLD)
        
        total = len(self.results)
        passed = sum(1 for r in self.results if r['status'] == 'PASS')
        failed = sum(1 for r in self.results if r['status'] == 'FAIL')
        warned = sum(1 for r in self.results if r['status'] == 'WARN')
        
        self.log(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        self.log(f"–£—Å–ø–µ—à–Ω–æ: {passed}", Colors.GREEN)
        if warned > 0:
            self.log(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warned}", Colors.YELLOW)
        if failed > 0:
            self.log(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}", Colors.RED)
        
        self.log("\n–î–µ—Ç–∞–ª–∏:", Colors.BOLD)
        for result in self.results:
            status_color = Colors.GREEN if result['status'] == 'PASS' else \
                          Colors.YELLOW if result['status'] == 'WARN' else Colors.RED
            
            self.log(f"\n  [{result['status']}] {result['test']}", status_color)
            self.log(f"    ‚îî‚îÄ {result['message']}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
        report_file = f'{self.site_path}/mobile_webview_e2e_test_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump({
                'timestamp': datetime.now().isoformat(),
                'duration_seconds': time.time() - self.start_time,
                'total_tests': total,
                'passed': passed,
                'failed': failed,
                'warned': warned,
                'results': self.results
            }, f, indent=2, ensure_ascii=False)
        
        self.log(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}", Colors.BLUE)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        if failed == 0:
            self.log("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!", Colors.GREEN + Colors.BOLD)
            return 0
        else:
            self.log(f"\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´: {failed} —Ç–µ—Å—Ç(–æ–≤) –ø—Ä–æ–≤–∞–ª–µ–Ω–æ", Colors.RED + Colors.BOLD)
            return 1
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.start_time = time.time()
        
        self.log("="*80, Colors.BOLD)
        self.log("üöÄ –ó–ê–ü–£–°–ö E2E –¢–ï–°–¢–û–í –î–õ–Ø MOBILE WEBVIEW", Colors.BOLD + Colors.BLUE)
        self.log("="*80, Colors.BOLD)
        self.log(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.log(f"–°–∞–π—Ç: {self.site_url}")
        self.log(f"API: {self.api_base}")
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        self.test_functions_php_exists()
        self.test_bridge_script_exists()
        self.test_api_endpoint_cart_count()
        self.test_api_endpoint_cart_details()
        self.test_bridge_script_loaded()
        self.test_data_attributes()
        self.test_cors_headers()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        return self.generate_report()

if __name__ == '__main__':
    # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
    import urllib3
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    
    runner = MobileWebViewE2ETest()
    exit_code = runner.run_all_tests()
    sys.exit(exit_code)

