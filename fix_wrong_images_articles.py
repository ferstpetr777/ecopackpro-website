#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import base64
import json
import re
import time
from datetime import datetime
from bs4 import BeautifulSoup

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WordPress API
WORDPRESS_URL = "https://ecopackpro.ru"
APPLICATION_PASSWORD = "7EKI VWpH 96dg VI3H ovlI hI4E"
USERNAME = "rtep1976@me.com"

# –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
WRONG_IMAGES_ARTICLES = [
    7915, 7917, 7932, 7934, 7938, 7939, 7945, 7946, 7947, 7948, 7949, 7956
]

class WrongImagesFixer:
    def __init__(self, url, username, app_password):
        self.url = url.rstrip('/')
        self.username = username
        self.app_password = app_password
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        credentials = f"{username}:{app_password}"
        encoded_credentials = base64.b64encode(credentials.encode()).decode()
        
        self.headers = {
            'Authorization': f'Basic {encoded_credentials}',
            'Content-Type': 'application/json',
            'User-Agent': 'WordPress-API-Client/1.0'
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total': 0,
            'success': 0,
            'failed': 0,
            'skipped': 0,
            'errors': []
        }
    
    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WordPress API"""
        try:
            response = requests.get(
                f"{self.url}/wp-json/wp/v2/users/me",
                headers=self.headers,
                timeout=30
            )
            
            if response.status_code == 200:
                user_data = response.json()
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data.get('name', 'Unknown')}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def get_post_data(self, post_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞ –≤–∫–ª—é—á–∞—è –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        try:
            response = requests.get(
                f"{self.url}/wp-json/wp/v2/posts/{post_id}",
                headers=self.headers,
                params={'_embed': 'wp:featuredmedia'},
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞ {post_id}: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞ {post_id}: {e}")
            return None
    
    def get_featured_image_info(self, post_data):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–ª–∞–≤–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        featured_media = post_data.get('_embedded', {}).get('wp:featuredmedia', [])
        
        if featured_media:
            media_info = featured_media[0]
            return {
                'id': media_info.get('id'),
                'url': media_info.get('source_url'),
                'alt': media_info.get('alt_text', ''),
                'title': media_info.get('title', {}).get('rendered', ''),
            }
        return None
    
    def find_wrong_images_in_content(self, content, featured_img_url):
        """–ü–æ–∏—Å–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ"""
        try:
            soup = BeautifulSoup(content, 'html.parser')
            wrong_images = []
            
            featured_filename = featured_img_url.split('/')[-1] if featured_img_url else ''
            
            for img_tag in soup.find_all('img'):
                src = img_tag.get('src', '')
                img_filename = src.split('/')[-1] if src else ''
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
                if img_filename and img_filename != featured_filename:
                    # –ò—Å–∫–ª—é—á–∞–µ–º placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ–Ω–∏ —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã)
                    if 'Tvist-PRO' not in img_filename:
                        wrong_images.append({
                            'tag': img_tag,
                            'src': src,
                            'filename': img_filename
                        })
            
            return wrong_images
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            return []
    
    def replace_wrong_images_with_correct(self, content, featured_img, post_title):
        """–ó–∞–º–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π HTML –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            correct_img_html = f'''<figure class="wp-block-image size-large" style="text-align: center; margin: 20px auto; max-width: 80%;">
<img alt="{post_title}" class="wp-image-{featured_img['id']}" decoding="async" height="1024" loading="lazy" sizes="auto, (max-width: 1536px) 100vw, 1536px" src="{featured_img['url']}" srcset="{featured_img['url']} 1536w, {featured_img['url']} 300w, {featured_img['url']} 1024w, {featured_img['url']} 600w, {featured_img['url']} 64w" style="border-radius: 12px; box-shadow: 0 8px 25px rgba(0,0,0,0.15); transition: transform 0.3s ease, box-shadow 0.3s ease; max-width: 100%; height: auto;" width="1536"/>
</figure>'''
            
            # –ò—â–µ–º –≤—Å–µ figure –±–ª–æ–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (–∫—Ä–æ–º–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ)
            featured_filename = featured_img['url'].split('/')[-1]
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ figure –±–ª–æ–∫–æ–≤ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            figure_pattern = r'<figure[^>]*>.*?<img[^>]*src="[^"]*"[^>]*>.*?</figure>'
            
            def replace_figure(match):
                figure_html = match.group(0)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —ç—Ç–æ—Ç figure –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if featured_filename in figure_html:
                    return figure_html  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                else:
                    return correct_img_html  # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ
            
            # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ figure –±–ª–æ–∫–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            new_content = re.sub(figure_pattern, replace_figure, content, flags=re.DOTALL)
            
            # –¢–∞–∫–∂–µ –∑–∞–º–µ–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ img —Ç–µ–≥–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            img_pattern = r'<img[^>]*src="[^"]*"[^>]*>'
            
            def replace_img(match):
                img_html = match.group(0)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                if featured_filename in img_html:
                    return img_html  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                else:
                    # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ figure
                    return f'<img alt="{post_title}" class="wp-image-{featured_img["id"]}" decoding="async" height="1024" loading="lazy" sizes="auto, (max-width: 1536px) 100vw, 1536px" src="{featured_img["url"]}" srcset="{featured_img["url"]} 1536w, {featured_img["url"]} 300w, {featured_img["url"]} 1024w, {featured_img["url"]} 600w, {featured_img["url"]} 64w" style="border-radius: 12px; box-shadow: 0 8px 25px rgba(0,0,0,0.15); transition: transform 0.3s ease, box-shadow 0.3s ease; max-width: 100%; height: auto;" width="1536"/>'
            
            new_content = re.sub(img_pattern, replace_img, new_content)
            
            return new_content
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            return content
    
    def fix_single_article(self, post_id):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏"""
        print(f"\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ ID {post_id}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
            post_data = self.get_post_data(post_id)
            if not post_data:
                self.stats['failed'] += 1
                self.stats['errors'].append(f"ID {post_id}: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
                return False
            
            post_title = post_data.get('title', {}).get('rendered', '')
            post_content = post_data.get('content', {}).get('rendered', '')
            
            print(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {post_title}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–ª–∞–≤–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            featured_img = self.get_featured_image_info(post_data)
            if not featured_img:
                print("‚ùå –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                self.stats['failed'] += 1
                self.stats['errors'].append(f"ID {post_id}: –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            print(f"üñºÔ∏è  –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {featured_img['url'].split('/')[-1]}")
            
            # –ò—â–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
            wrong_images = self.find_wrong_images_in_content(post_content, featured_img['url'])
            print(f"üö® –ù–∞–π–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(wrong_images)}")
            
            if not wrong_images:
                print("‚úÖ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                self.stats['skipped'] += 1
                return True
            
            # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            for img in wrong_images:
                print(f"   - {img['filename']}")
            
            # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
            new_content = self.replace_wrong_images_with_correct(post_content, featured_img, post_title)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if new_content == post_content:
                print("‚ÑπÔ∏è  –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                self.stats['skipped'] += 1
                return True
            
            print(f"üîÑ –ó–∞–º–µ–Ω–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(wrong_images)}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            update_data = {
                'content': new_content
            }
            
            response = requests.post(
                f"{self.url}/wp-json/wp/v2/posts/{post_id}",
                headers=self.headers,
                json=update_data,
                timeout=30
            )
            
            if response.status_code == 200:
                print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
                self.stats['success'] += 1
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {response.status_code} - {response.text}")
                self.stats['failed'] += 1
                self.stats['errors'].append(f"ID {post_id}: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—å–∏ {post_id}: {e}")
            self.stats['failed'] += 1
            self.stats['errors'].append(f"ID {post_id}: {str(e)}")
            return False
    
    def fix_all_articles(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
        print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ï–ô –° –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò")
        print("=" * 60)
        
        self.stats['total'] = len(WRONG_IMAGES_ARTICLES)
        
        for i, post_id in enumerate(WRONG_IMAGES_ARTICLES, 1):
            print(f"\nüìã {i}/{len(WRONG_IMAGES_ARTICLES)}")
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é
            self.fix_single_article(post_id)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if i < len(WRONG_IMAGES_ARTICLES):
                time.sleep(1)
        
        return self.stats
    
    def print_final_report(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("=" * 60)
        
        print(f"üìö –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {self.stats['total']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.stats['success']}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {self.stats['failed']}")
        print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {self.stats['skipped']}")
        
        if self.stats['total'] > 0:
            success_rate = (self.stats['success'] / (self.stats['total'] - self.stats['skipped'])) * 100 if (self.stats['total'] - self.stats['skipped']) > 0 else 0
            print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%")
        
        if self.stats['errors']:
            print(f"\nüö® –û–®–ò–ë–ö–ò:")
            for error in self.stats['errors']:
                print(f"  - {error}")
        
        print(f"\nüîó –°—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏:")
        for post_id in WRONG_IMAGES_ARTICLES:
            print(f"  https://ecopackpro.ru/?p={post_id}&preview=true")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ï–ô –° –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    fixer = WrongImagesFixer(WORDPRESS_URL, USERNAME, APPLICATION_PASSWORD)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WordPress API...")
    if not fixer.test_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WordPress API")
        return
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π
    print(f"\nüéØ –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {len(WRONG_IMAGES_ARTICLES)} —Å—Ç–∞—Ç–µ–π —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...")
    stats = fixer.fix_all_articles()
    
    # –í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞
    fixer.print_final_report()
    
    print(f"\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
