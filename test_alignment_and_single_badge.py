#!/usr/bin/env python3
"""
–¢–µ—Å—Ç: –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã + —Ç–æ–ª—å–∫–æ –û–î–ò–ù –ó–ï–õ–Å–ù–´–ô badge
"""

import sys
import requests
from datetime import datetime

class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    RESET = '\033[0m'
    BOLD = '\033[1m'

class AlignmentBadgeTest:
    def __init__(self):
        self.site_url = 'https://ecopackpro.ru'
        self.results = []
        
    def log(self, message, color=Colors.RESET):
        print(f"{color}{message}{Colors.RESET}")
    
    def test_vertical_align_css(self):
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ vertical-align –≤ CSS"""
        self.log("\nüìã –¢–µ—Å—Ç 1: –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã", Colors.BLUE + Colors.BOLD)
        
        try:
            css_url = f'{self.site_url}/wp-content/mu-plugins/fix-all-cart-issues.css'
            response = requests.get(css_url, timeout=10, verify=False)
            
            if response.status_code == 200:
                css = response.text
                
                has_vertical_align = 'vertical-align: middle' in css
                has_align_items = 'align-items: center' in css
                has_flex = 'display: flex' in css
                
                self.log(f"  {'‚úÖ' if has_vertical_align else '‚ùå'} vertical-align: middle", 
                        Colors.GREEN if has_vertical_align else Colors.RED)
                self.log(f"  {'‚úÖ' if has_align_items else '‚ùå'} align-items: center", 
                        Colors.GREEN if has_align_items else Colors.RED)
                self.log(f"  {'‚úÖ' if has_flex else '‚ùå'} display: flex (–¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)", 
                        Colors.GREEN if has_flex else Colors.RED)
                
                if has_vertical_align and has_align_items:
                    self.results.append({
                        'test': 'vertical align css',
                        'status': 'PASS',
                        'message': '–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ'
                    })
                    self.log("\n‚úÖ PASS: –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –≤ CSS", Colors.GREEN)
                    return True
                else:
                    self.results.append({
                        'test': 'vertical align css',
                        'status': 'FAIL',
                        'message': '–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –Ω–µ–ø–æ–ª–Ω–æ–µ'
                    })
                    self.log("\n‚ùå FAIL: –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ", Colors.RED)
                    return False
        except Exception as e:
            self.results.append({
                'test': 'vertical align css',
                'status': 'FAIL',
                'message': str(e)
            })
            self.log(f"‚ùå FAIL: {str(e)}", Colors.RED)
            return False
    
    def test_red_badge_hidden(self):
        """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä—ã—Ç–∏—è –∫—Ä–∞—Å–Ω–æ–≥–æ badge"""
        self.log("\nüìã –¢–µ—Å—Ç 2: –°–∫—Ä—ã—Ç–∏–µ –ö–†–ê–°–ù–û–ì–û badge", Colors.BLUE + Colors.BOLD)
        
        try:
            css_url = f'{self.site_url}/wp-content/mu-plugins/fix-all-cart-issues.css'
            response = requests.get(css_url, timeout=10, verify=False)
            
            if response.status_code == 200:
                css = response.text
                
                # –ò—â–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Å–∫—Ä—ã—Ç–∏—è .w-cart-quantity –≤ mobile footer
                has_hide_rule = '.l-subheader.at_bottom .w-cart-quantity' in css
                has_display_none = 'display: none' in css
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                has_comment = '–£–ë–ò–†–ê–ï–ú –ö–†–ê–°–ù–´–ô' in css or '–°–∫—Ä—ã–≤–∞–µ–º –ö–†–ê–°–ù–´–ô badge' in css
                
                self.log(f"  {'‚úÖ' if has_hide_rule else '‚ùå'} –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è .w-cart-quantity", 
                        Colors.GREEN if has_hide_rule else Colors.RED)
                self.log(f"  {'‚úÖ' if has_display_none else '‚ùå'} display: none –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç", 
                        Colors.GREEN if has_display_none else Colors.RED)
                self.log(f"  {'‚úÖ' if has_comment else '‚ùå'} –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–æ –∫—Ä–∞—Å–Ω—ã–π badge", 
                        Colors.GREEN if has_comment else Colors.RED)
                
                if has_hide_rule:
                    self.results.append({
                        'test': 'red badge hidden',
                        'status': 'PASS',
                        'message': '–ö—Ä–∞—Å–Ω—ã–π badge —Å–∫—Ä—ã—Ç –≤ CSS'
                    })
                    self.log("\n‚úÖ PASS: –ö—Ä–∞—Å–Ω—ã–π badge —Å–∫—Ä—ã—Ç", Colors.GREEN)
                    return True
                else:
                    self.results.append({
                        'test': 'red badge hidden',
                        'status': 'FAIL',
                        'message': '–ü—Ä–∞–≤–∏–ª–æ —Å–∫—Ä—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                    })
                    self.log("\n‚ùå FAIL: –ü—Ä–∞–≤–∏–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", Colors.RED)
                    return False
        except Exception as e:
            self.results.append({
                'test': 'red badge hidden',
                'status': 'FAIL',
                'message': str(e)
            })
            self.log(f"‚ùå FAIL: {str(e)}", Colors.RED)
            return False
    
    def test_green_badge_visible(self):
        """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∑–µ–ª—ë–Ω—ã–π badge –ù–ï —Å–∫—Ä—ã—Ç"""
        self.log("\nüìã –¢–µ—Å—Ç 3: –ó–ï–õ–Å–ù–´–ô badge –æ—Å—Ç–∞—ë—Ç—Å—è –≤–∏–¥–∏–º—ã–º", Colors.BLUE + Colors.BOLD)
        
        try:
            css_url = f'{self.site_url}/wp-content/mu-plugins/fix-all-cart-issues.css'
            response = requests.get(css_url, timeout=10, verify=False)
            
            if response.status_code == 200:
                css = response.text
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ .mobile-cart-badge –ù–ï —Å–∫—Ä—ã—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ
                lines = css.split('\n')
                mobile_badge_hidden = False
                
                for i, line in enumerate(lines):
                    if '.mobile-cart-badge' in line and 'display: none' in line:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ù–ï –¥–ª—è wishlist
                        if 'wishlist' not in line.lower():
                            mobile_badge_hidden = True
                            break
                
                has_green_color = '#00796B' in css
                
                self.log(f"  {'‚úÖ' if not mobile_badge_hidden else '‚ùå'} mobile-cart-badge –ù–ï —Å–∫—Ä—ã—Ç", 
                        Colors.GREEN if not mobile_badge_hidden else Colors.RED)
                self.log(f"  {'‚úÖ' if has_green_color else '‚ùå'} –ó–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç #00796B", 
                        Colors.GREEN if has_green_color else Colors.RED)
                
                if not mobile_badge_hidden and has_green_color:
                    self.results.append({
                        'test': 'green badge visible',
                        'status': 'PASS',
                        'message': '–ó–µ–ª—ë–Ω—ã–π badge –≤–∏–¥–∏–º—ã–π'
                    })
                    self.log("\n‚úÖ PASS: –ó–µ–ª—ë–Ω—ã–π badge –∞–∫—Ç–∏–≤–µ–Ω", Colors.GREEN)
                    return True
                else:
                    self.results.append({
                        'test': 'green badge visible',
                        'status': 'FAIL',
                        'message': '–ó–µ–ª—ë–Ω—ã–π badge –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫—Ä—ã—Ç'
                    })
                    self.log("\n‚ùå FAIL: –ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–µ–ª—ë–Ω—ã–º badge", Colors.RED)
                    return False
        except Exception as e:
            self.results.append({
                'test': 'green badge visible',
                'status': 'FAIL',
                'message': str(e)
            })
            self.log(f"‚ùå FAIL: {str(e)}", Colors.RED)
            return False
    
    def test_flexbox_alignment(self):
        """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ flexbox –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        self.log("\nüìã –¢–µ—Å—Ç 4: Flexbox –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", Colors.BLUE + Colors.BOLD)
        
        try:
            css_url = f'{self.site_url}/wp-content/mu-plugins/fix-all-cart-issues.css'
            response = requests.get(css_url, timeout=10, verify=False)
            
            if response.status_code == 200:
                css = response.text
                
                has_flex = 'display: flex' in css and '.l-subheader.at_bottom' in css
                has_align_items = 'align-items: center' in css
                has_justify = 'justify-content: space-around' in css
                
                self.log(f"  {'‚úÖ' if has_flex else '‚ùå'} display: flex –¥–ª—è –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏", 
                        Colors.GREEN if has_flex else Colors.RED)
                self.log(f"  {'‚úÖ' if has_align_items else '‚ùå'} align-items: center", 
                        Colors.GREEN if has_align_items else Colors.RED)
                self.log(f"  {'‚úÖ' if has_justify else '‚ùå'} justify-content: space-around", 
                        Colors.GREEN if has_justify else Colors.RED)
                
                if has_flex and has_align_items:
                    self.results.append({
                        'test': 'flexbox alignment',
                        'status': 'PASS',
                        'message': 'Flexbox –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
                    })
                    self.log("\n‚úÖ PASS: Flexbox –∞–∫—Ç–∏–≤–µ–Ω", Colors.GREEN)
                    return True
                else:
                    self.results.append({
                        'test': 'flexbox alignment',
                        'status': 'FAIL',
                        'message': 'Flexbox –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
                    })
                    self.log("\n‚ùå FAIL: Flexbox –ø—Ä–æ–±–ª–µ–º–∞", Colors.RED)
                    return False
        except Exception as e:
            self.results.append({
                'test': 'flexbox alignment',
                'status': 'FAIL',
                'message': str(e)
            })
            self.log(f"‚ùå FAIL: {str(e)}", Colors.RED)
            return False
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        self.log("\n" + "="*80, Colors.BOLD)
        self.log("üìä –û–¢–ß–Å–¢: –í–´–†–ê–í–ù–ò–í–ê–ù–ò–ï + –û–î–ò–ù BADGE", Colors.BOLD + Colors.BLUE)
        self.log("="*80, Colors.BOLD)
        
        total = len(self.results)
        passed = sum(1 for r in self.results if r['status'] == 'PASS')
        failed = sum(1 for r in self.results if r['status'] == 'FAIL')
        
        self.log(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        self.log(f"–£—Å–ø–µ—à–Ω–æ: {passed}", Colors.GREEN)
        if failed > 0:
            self.log(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}", Colors.RED)
        
        self.log("\n–î–µ—Ç–∞–ª–∏:", Colors.BOLD)
        for result in self.results:
            status_color = Colors.GREEN if result['status'] == 'PASS' else Colors.RED
            self.log(f"\n  [{result['status']}] {result['test']}", status_color)
            self.log(f"    ‚îî‚îÄ {result['message']}")
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        self.log("\n" + "="*80, Colors.BOLD)
        self.log("üì± –ü–†–û–í–ï–†–ö–ê –ù–ê –ú–û–ë–ò–õ–¨–ù–û–ú", Colors.CYAN + Colors.BOLD)
        self.log("="*80, Colors.BOLD)
        
        self.log("\n1. –û—Ç–∫—Ä–æ–π—Ç–µ https://ecopackpro.ru/cart (–∫–æ—Ä–∑–∏–Ω–∞)", Colors.CYAN)
        self.log("2. –°–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –ù–ò–ñ–ù–Æ–Æ –ü–ê–ù–ï–õ–¨", Colors.CYAN)
        self.log("\n‚úÖ –ü–†–û–í–ï–†–¨–¢–ï:", Colors.GREEN + Colors.BOLD)
        self.log("   ‚Ä¢ –ò–∫–æ–Ω–∫–∞ '–ö–æ—Ä–∑–∏–Ω–∞' –ù–ê –û–î–ù–û–ô –õ–ò–ù–ò–ò —Å –¥—Ä—É–≥–∏–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏")
        self.log("   ‚Ä¢ –í–∏–¥–µ–Ω –¢–û–õ–¨–ö–û –û–î–ò–ù badge (–ó–ï–õ–Å–ù–´–ô)")
        self.log("   ‚Ä¢ –ö—Ä–∞—Å–Ω–æ–≥–æ badge –ù–ï–¢")
        self.log("\n‚ùå –ù–ï –î–û–õ–ñ–ù–û –ë–´–¢–¨:", Colors.RED + Colors.BOLD)
        self.log("   ‚Ä¢ –ò–∫–æ–Ω–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –≤—ã–ø—Ä—ã–≥–Ω—É–ª–∞ –≤–≤–µ—Ä—Ö")
        self.log("   ‚Ä¢ –î–≤–∞ badge (–∑–µ–ª—ë–Ω—ã–π + –∫—Ä–∞—Å–Ω—ã–π)")
        
        self.log("\n" + "="*80, Colors.BOLD)
        self.log("üéØ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢", Colors.YELLOW + Colors.BOLD)
        self.log("="*80, Colors.BOLD)
        
        self.log("\n–ù–ò–ñ–ù–Ø–Ø –ü–ê–ù–ï–õ–¨:")
        self.log("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
        self.log("‚îÇ –ì–ª–∞–≤–Ω–∞—è‚îÇ –ö–∞—Ç–∞–ª–æ–≥‚îÇ–ò–∑–±—Ä–∞–Ω–Ω–æ–µ ‚îÇ –ö–∞–±–∏–Ω–µ—Ç‚îÇ –ö–æ—Ä–∑–∏–Ω–∞‚îÇ")
        self.log("‚îÇ   üè†   ‚îÇ   üè™   ‚îÇ    ‚ô•Ô∏è‚ì™   ‚îÇ   üë§   ‚îÇ  üõí‚ìµ  ‚îÇ  ‚Üê –í–°–ï –ù–ê –û–î–ù–û–ô –õ–ò–ù–ò–ò!")
        self.log("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
        self.log("                                          ‚Üë")
        self.log("                             –¢–æ–ª—å–∫–æ –ó–ï–õ–Å–ù–´–ô badge (15)")
        self.log("                             –ö—Ä–∞—Å–Ω–æ–≥–æ –ù–ï–¢!")
        
        if failed == 0:
            self.log("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!", Colors.GREEN + Colors.BOLD)
            return 0
        else:
            self.log(f"\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–´: {failed} —Ç–µ—Å—Ç(–æ–≤)", Colors.RED + Colors.BOLD)
            return 1
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.log("="*80, Colors.BOLD)
        self.log("üöÄ –¢–ï–°–¢: –í–´–†–ê–í–ù–ò–í–ê–ù–ò–ï + –û–î–ò–ù BADGE", Colors.BOLD + Colors.BLUE)
        self.log("="*80, Colors.BOLD)
        self.log(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.log(f"–°–∞–π—Ç: {self.site_url}")
        
        self.test_vertical_align_css()
        self.test_red_badge_hidden()
        self.test_green_badge_visible()
        self.test_flexbox_alignment()
        
        return self.generate_report()

if __name__ == '__main__':
    import urllib3
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    
    runner = AlignmentBadgeTest()
    exit_code = runner.run_all_tests()
    sys.exit(exit_code)

