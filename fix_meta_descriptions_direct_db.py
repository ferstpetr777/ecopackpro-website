#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import mysql.connector
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö WordPress
DB_CONFIG = {
    'host': 'localhost',
    'user': 'm1shqamai2_worp6',
    'password': '9nUQkM*Q2cnvy379',
    'database': 'm1shqamai2_worp6'
}

# 28 —Å—Ç–∞—Ç–µ–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–π
ARTICLES_TO_FIX = [
    7911, 7913, 7914, 7915, 7916, 7918, 7919, 7921, 7926, 7928, 7929, 7930,
    7932, 7933, 7934, 7935, 7936, 7937, 7938, 7939, 7940, 7941, 7943, 7944,
    7945, 7946, 7947, 7949
]

class DirectDBMetaDescriptionFixer:
    def __init__(self):
        self.db_config = DB_CONFIG
        self.fix_stats = {
            'total': 0,
            'success': 0,
            'failed': 0,
            'errors': []
        }
    
    def connect_to_database(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL"""
        try:
            connection = mysql.connector.connect(**self.db_config)
            return connection
        except mysql.connector.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def get_article_meta(self, post_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–Ω–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏—è"""
        connection = self.connect_to_database()
        if not connection:
            return None, None
        
        try:
            cursor = connection.cursor(dictionary=True)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ–∫—É—Å–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ
            cursor.execute("""
                SELECT meta_key, meta_value
                FROM wp_postmeta
                WHERE post_id = %s
                AND meta_key IN ('_yoast_wpseo_focuskw', '_yoast_wpseo_metadesc')
            """, (post_id,))
            
            meta_data = cursor.fetchall()
            meta_dict = {row['meta_key']: row['meta_value'] for row in meta_data}
            
            focus_keyword = meta_dict.get('_yoast_wpseo_focuskw', '')
            current_meta_description = meta_dict.get('_yoast_wpseo_metadesc', '')
            
            return focus_keyword, current_meta_description
            
        except mysql.connector.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ID {post_id}: {e}")
            return None, None
        finally:
            connection.close()
    
    def update_meta_description_in_db(self, post_id, focus_keyword, new_meta_description):
        """–ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        connection = self.connect_to_database()
        if not connection:
            return False
        
        try:
            cursor = connection.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–µ—Ç–∞ –∑–∞–ø–∏—Å—å
            cursor.execute("""
                SELECT meta_id
                FROM wp_postmeta
                WHERE post_id = %s AND meta_key = '_yoast_wpseo_metadesc'
            """, (post_id,))
            
            existing = cursor.fetchone()
            
            if existing:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                cursor.execute("""
                    UPDATE wp_postmeta
                    SET meta_value = %s
                    WHERE post_id = %s AND meta_key = '_yoast_wpseo_metadesc'
                """, (new_meta_description, post_id))
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                cursor.execute("""
                    INSERT INTO wp_postmeta (post_id, meta_key, meta_value)
                    VALUES (%s, '_yoast_wpseo_metadesc', %s)
                """, (post_id, new_meta_description))
            
            connection.commit()
            return True
            
        except mysql.connector.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è ID {post_id}: {e}")
            connection.rollback()
            return False
        finally:
            connection.close()
    
    def fix_single_article_meta(self, post_id):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏—è –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏"""
        print(f"\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ï–¢–ê-–û–ü–ò–°–ê–ù–ò–Ø ID {post_id}")
        print("-" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ–∫—É—Å–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏ —Ç–µ–∫—É—â–µ–µ –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ
        focus_keyword, current_meta_description = self.get_article_meta(post_id)
        
        if not focus_keyword:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ–∫—É—Å–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ")
            return False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ–∫—É—Å–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ"
        
        print(f"üéØ –§–æ–∫—É—Å–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: '{focus_keyword}'")
        print(f"üìù –¢–µ–∫—É—â–µ–µ –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ: '{current_meta_description[:80]}...'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ —Å –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        if current_meta_description.strip().lower().startswith(focus_keyword.lower()):
            print(f"‚úÖ –ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ!")
            return True, "–£–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ"
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ
        new_meta_description = f"{focus_keyword} - {current_meta_description}"
        print(f"‚ú® –ù–æ–≤–æ–µ –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ: '{new_meta_description[:80]}...'")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if self.update_meta_description_in_db(post_id, focus_keyword, new_meta_description):
            print(f"‚úÖ –ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î!")
            return True, "–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–î")
            return False, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–î"
    
    def fix_all_meta_descriptions(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö 28 –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–π"""
        print("üîß –ú–ê–°–°–û–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ï–¢–ê-–û–ü–ò–°–ê–ù–ò–ô –ù–ê–ü–†–Ø–ú–£–Æ –í –ë–î")
        print("=" * 80)
        print("–ú–µ—Ç–æ–¥: –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ MySQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print("–ö—Ä–∏—Ç–µ—Ä–∏–π: –ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ñ–æ–∫—É—Å–Ω–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞")
        print("=" * 80)
        
        self.fix_stats['total'] = len(ARTICLES_TO_FIX)
        
        for i, post_id in enumerate(ARTICLES_TO_FIX, 1):
            print(f"\nüìã {i}/{len(ARTICLES_TO_FIX)}")
            
            success, message = self.fix_single_article_meta(post_id)
            
            if success:
                self.fix_stats['success'] += 1
            else:
                self.fix_stats['failed'] += 1
                self.fix_stats['errors'].append(f"ID {post_id}: {message}")
        
        return self.fix_stats
    
    def print_fix_report(self):
        """–í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"""
        print("\n" + "=" * 80)
        print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ú–ï–¢–ê-–û–ü–ò–°–ê–ù–ò–ô")
        print("=" * 80)
        
        print(f"üìö –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {self.fix_stats['total']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.fix_stats['success']}")
        print(f"‚ùå –û—à–∏–±–∫–∏: {self.fix_stats['failed']}")
        
        if self.fix_stats['total'] > 0:
            success_rate = (self.fix_stats['success'] / self.fix_stats['total']) * 100
            print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%")
        
        if self.fix_stats['errors']:
            print(f"\nüö® –û–®–ò–ë–ö–ò:")
            for error in self.fix_stats['errors']:
                print(f"  - {error}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        report_filename = f"–û–¢–ß–ï–¢_–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø_–ú–ï–¢–ê_–û–ü–ò–°–ê–ù–ò–ô_–ë–î_{timestamp}.md"
        
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write("# üîß –û–¢–ß–ï–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ú–ï–¢–ê-–û–ü–ò–°–ê–ù–ò–ô (–ü–†–Ø–ú–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–î)\n\n")
            f.write(f"**–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n")
            f.write(f"## üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n")
            f.write(f"- **–í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π:** {self.fix_stats['total']}\n")
            f.write(f"- **‚úÖ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:** {self.fix_stats['success']} ({success_rate:.1f}%)\n")
            f.write(f"- **‚ùå –û—à–∏–±–∫–∏:** {self.fix_stats['failed']}\n\n")
            
            if self.fix_stats['errors']:
                f.write(f"## üö® –û–®–ò–ë–ö–ò\n\n")
                for error in self.fix_stats['errors']:
                    f.write(f"- {error}\n")
        
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_filename}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ï–¢–ê-–û–ü–ò–°–ê–ù–ò–ô –ù–ê–ü–†–Ø–ú–£–Æ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("=" * 80)
    
    fixer = DirectDBMetaDescriptionFixer()
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏—è
    stats = fixer.fix_all_meta_descriptions()
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
    fixer.print_fix_report()
    
    if stats['success'] == stats['total']:
        print(f"\nüéâ –í–°–ï –ú–ï–¢–ê-–û–ü–ò–°–ê–ù–ò–Ø –£–°–ü–ï–®–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–´!")
    else:
        print(f"\n‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ {stats['failed']} —Å—Ç–∞—Ç–µ–π")
    
    print(f"\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")

if __name__ == "__main__":
    main()
