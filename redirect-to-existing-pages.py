#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üîÑ –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ò–¢–´–• –°–°–´–õ–û–ö –ù–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –°–¢–ê–¢–¨–ò
–°–∞–π—Ç: ecopackpro.ru
–¶–µ–ª—å: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
"""

import mysql.connector
import requests
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/www/fastuser/data/www/ecopackpro.ru/redirect_to_existing.log'),
        logging.StreamHandler()
    ]
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'host': 'localhost',
    'user': 'm1shqamai2_worp6',
    'password': '9nUQkM*Q2cnvy379',
    'database': 'm1shqamai2_worp6'
}

class RedirectToExistingPages:
    def __init__(self):
        self.db_config = DB_CONFIG
        
        # –ú–∞–ø–ø–∏–Ω–≥ –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞—Ç—å–∏
        self.redirect_mapping = {
            'contacts': '/contact-us/',  # –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            'catalog': '/shop/',        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞–≥–∞–∑–∏–Ω
            'delivery': '/oplata-i-dostavka/',  # –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
            'box-selection': '/korobki-dlya-otpravki/',  # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è –æ –∫–æ—Ä–æ–±–∫–∞—Ö
            'custom-boxes': '/upakovka-s-logotipom/'  # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è –æ–± —É–ø–∞–∫–æ–≤–∫–µ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'redirects_updated': 0,
            'existing_pages_found': 0
        }
    
    def connect_to_database(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            connection = mysql.connector.connect(**self.db_config)
            return connection
        except mysql.connector.Error as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return None
    
    def get_existing_pages(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"""
        connection = self.connect_to_database()
        if not connection:
            return []
        
        cursor = connection.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Å—Ç–∞—Ç—å–∏
        cursor.execute("""
            SELECT ID, post_title, post_name, post_type 
            FROM wp_posts 
            WHERE post_status = 'publish' 
            AND post_type IN ('page', 'post')
            ORDER BY post_type, post_title
        """)
        
        pages = cursor.fetchall()
        connection.close()
        
        logging.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏ —Å—Ç–∞—Ç–µ–π: {len(pages)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        logging.info("üìã –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –°–¢–†–ê–ù–ò–¶–´ –ò –°–¢–ê–¢–¨–ò:")
        for page_id, title, slug, post_type in pages:
            logging.info(f"   {post_type}: {title} (/{slug}/)")
        
        return pages
    
    def update_htaccess_redirects(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ –≤ .htaccess"""
        logging.info("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã –≤ .htaccess...")
        
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π .htaccess
            with open('/var/www/fastuser/data/www/ecopackpro.ru/.htaccess', 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã –¥–ª—è —ç—Ç–∏—Ö —Å—Å—ã–ª–æ–∫
            old_redirects = [
                'Redirect 301 /contacts/',
                'Redirect 301 /catalog/',
                'Redirect 301 /delivery/',
                'Redirect 301 /box-selection/',
                'Redirect 301 /custom-boxes/'
            ]
            
            for old_redirect in old_redirects:
                # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —ç—Ç–∏–º–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º–∏
                lines = content.split('\n')
                content = '\n'.join([line for line in lines if old_redirect not in line])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
            new_redirects = []
            for broken_link, target_page in self.redirect_mapping.items():
                redirect_rule = f"Redirect 301 /{broken_link}/ https://ecopackpro.ru{target_page}"
                new_redirects.append(redirect_rule)
                logging.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω —Ä–µ–¥–∏—Ä–µ–∫—Ç: /{broken_link}/ ‚Üí {target_page}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            if new_redirects:
                content += "\n# Redirects for broken footer links\n"
                content += "\n".join(new_redirects)
                content += "\n"
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .htaccess
            with open('/var/www/fastuser/data/www/ecopackpro.ru/.htaccess', 'w', encoding='utf-8') as f:
                f.write(content)
            
            self.stats['redirects_updated'] = len(self.redirect_mapping)
            logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(self.redirect_mapping)} —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ –≤ .htaccess")
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è .htaccess: {e}")
            return False
    
    def test_redirects(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤"""
        logging.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã...")
        
        session = requests.Session()
        session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
        
        for broken_link, target_page in self.redirect_mapping.items():
            test_url = f"https://ecopackpro.ru/{broken_link}/"
            
            try:
                response = session.get(test_url, timeout=10, allow_redirects=True)
                
                if response.status_code == 200:
                    if target_page.replace('/', '') in response.url:
                        logging.info(f"‚úÖ –†–µ–¥–∏—Ä–µ–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: {broken_link} ‚Üí {response.url}")
                    else:
                        logging.warning(f"‚ö†Ô∏è –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {broken_link} ‚Üí {response.url}")
                else:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ {broken_link}: {response.status_code}")
                    
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {broken_link}: {e}")
    
    def run_redirect_setup(self):
        """–ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤"""
        logging.info("üîÑ –ù–ê–°–¢–†–û–ô–ö–ê –†–ï–î–ò–†–ï–ö–¢–û–í –ù–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –°–¢–†–ê–ù–ò–¶–´")
        logging.info("=" * 60)
        
        start_time = datetime.now()
        
        # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        existing_pages = self.get_existing_pages()
        self.stats['existing_pages_found'] = len(existing_pages)
        
        # 2. –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã –≤ .htaccess
        if self.update_htaccess_redirects():
            logging.info("‚úÖ –†–µ–¥–∏—Ä–µ–∫—Ç—ã –≤ .htaccess –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        else:
            logging.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤")
            return False
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
        self.test_redirects()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        end_time = datetime.now()
        duration = end_time - start_time
        
        logging.info("=" * 60)
        logging.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        logging.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
        logging.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: {self.stats['existing_pages_found']}")
        logging.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤: {self.stats['redirects_updated']}")
        logging.info("=" * 60)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
        logging.info("üéØ –ù–ê–°–¢–†–û–ï–ù–ù–´–ï –†–ï–î–ò–†–ï–ö–¢–´:")
        for broken_link, target_page in self.redirect_mapping.items():
            logging.info(f"   /{broken_link}/ ‚Üí {target_page}")
        
        logging.info("üéâ –ù–ê–°–¢–†–û–ô–ö–ê –†–ï–î–ò–†–ï–ö–¢–û–í –ó–ê–í–ï–†–®–ï–ù–ê!")
        
        return True

if __name__ == "__main__":
    redirector = RedirectToExistingPages()
    redirector.run_redirect_setup()



