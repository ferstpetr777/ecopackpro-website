#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
WordPress API Publisher Script
–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WordPress API –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ç–µ–π
"""

import requests
import json
import base64
from datetime import datetime
import sys
import os

class WordPressAPI:
    def __init__(self, site_url, username, app_password):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WordPress API
        
        Args:
            site_url (str): URL —Å–∞–π—Ç–∞ WordPress
            username (str): –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            app_password (str): Application Password
        """
        self.site_url = site_url.rstrip('/')
        self.api_url = f"{self.site_url}/wp-json/wp/v2"
        self.username = username
        self.app_password = app_password
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        credentials = f"{username}:{app_password}"
        token = base64.b64encode(credentials.encode()).decode('utf-8')
        
        self.headers = {
            'Authorization': f'Basic {token}',
            'Content-Type': 'application/json',
            'User-Agent': 'WordPress-API-Publisher/1.0'
        }
        
        print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WordPress API: {self.api_url}")
    
    def test_connection(self):
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WordPress API
        """
        try:
            print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            response = requests.get(f"{self.api_url}/", headers=self.headers, timeout=10)
            
            if response.status_code == 200:
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WordPress API —É—Å–ø–µ—à–Ω–æ!")
                api_info = response.json()
                print(f"üìä –í–µ—Ä—Å–∏—è WordPress API: {api_info.get('version', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"üè† –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞: {api_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}")
                print(f"üìù –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
                return False
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
            return False
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
    
    def get_user_info(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        """
        try:
            print("üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...")
            
            response = requests.get(f"{self.api_url}/users/me", headers=self.headers, timeout=10)
            
            if response.status_code == 200:
                user_info = response.json()
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"üìß Email: {user_info.get('email', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"üîë –†–æ–ª–∏: {', '.join(user_info.get('roles', []))}")
                return user_info
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None
    
    def get_categories(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        """
        try:
            print("üìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
            
            response = requests.get(f"{self.api_url}/categories", headers=self.headers, timeout=10)
            
            if response.status_code == 200:
                categories = response.json()
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
                for cat in categories:
                    print(f"   - {cat['name']} (ID: {cat['id']})")
                return categories
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {response.status_code}")
                return []
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return []
    
    def create_category(self, name, slug=None, description=""):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        """
        try:
            print(f"üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {name}")
            
            data = {
                'name': name,
                'slug': slug or name.lower().replace(' ', '-'),
                'description': description
            }
            
            response = requests.post(f"{self.api_url}/categories", 
                                   headers=self.headers, 
                                   json=data, 
                                   timeout=10)
            
            if response.status_code == 201:
                category = response.json()
                print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: {category['name']} (ID: {category['id']})")
                return category
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {response.status_code}")
                print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None

    def publish_post(self, title, content, slug=None, status='publish', categories=None, tags=None, meta=None):
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ WordPress
        
        Args:
            title (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞
            content (str): –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞ (HTML)
            slug (str): URL slug
            status (str): –°—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞ (draft, publish, private)
            categories (list): –°–ø–∏—Å–æ–∫ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            tags (list): –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
            meta (dict): –ú–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ
        """
        try:
            print(f"üìù –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞: {title}")
            
            post_data = {
                'title': title,
                'content': content,
                'status': status,
                'format': 'standard'
            }
            
            if slug:
                post_data['slug'] = slug
            
            if categories:
                post_data['categories'] = categories
            
            if tags:
                post_data['tags'] = tags
            
            if meta:
                post_data['meta'] = meta
            
            response = requests.post(f"{self.api_url}/posts", 
                                   headers=self.headers, 
                                   json=post_data, 
                                   timeout=30)
            
            if response.status_code == 201:
                post = response.json()
                print(f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
                print(f"üîó ID: {post['id']}")
                print(f"üåê URL: {post['link']}")
                print(f"üìÖ –î–∞—Ç–∞: {post['date']}")
                return post
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {response.status_code}")
                print(f"üìù –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None
    
    def load_article_from_file(self, file_path):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—å–∏ –∏–∑ HTML —Ñ–∞–π–ª–∞
        """
        try:
            print(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—å–∏ –∏–∑ —Ñ–∞–π–ª–∞: {file_path}")
            
            if not os.path.exists(file_path):
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return None
            
            with open(file_path, 'r', encoding='utf-8') as file:
                content = file.read()
            
            print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            return content
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return None
    
    def extract_article_data(self, html_content):
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—å–∏ –∏–∑ HTML
        """
        try:
            print("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—å–∏...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ <title>
            import re
            
            title_match = re.search(r'<title>(.*?)</title>', html_content, re.IGNORECASE | re.DOTALL)
            title = title_match.group(1).strip() if title_match else "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º H1 –∑–∞–≥–æ–ª–æ–≤–æ–∫
            h1_match = re.search(r'<h1[^>]*>(.*?)</h1>', html_content, re.IGNORECASE | re.DOTALL)
            h1_title = h1_match.group(1).strip() if h1_match else title
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º slug –∏–∑ canonical URL
            slug_match = re.search(r'<link rel="canonical" href="[^"]*/([^/]+)/?"', html_content, re.IGNORECASE)
            slug = slug_match.group(1) if slug_match else None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º meta description
            desc_match = re.search(r'<meta name="description" content="([^"]*)"', html_content, re.IGNORECASE)
            meta_description = desc_match.group(1) if desc_match else ""
            
            # –û—á–∏—â–∞–µ–º HTML –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö —Ç–µ–≥–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content = html_content
            
            # –£–¥–∞–ª—è–µ–º head —Å–µ–∫—Ü–∏—é
            content = re.sub(r'<head>.*?</head>', '', content, flags=re.IGNORECASE | re.DOTALL)
            
            # –£–¥–∞–ª—è–µ–º script —Ç–µ–≥–∏
            content = re.sub(r'<script[^>]*>.*?</script>', '', content, flags=re.IGNORECASE | re.DOTALL)
            
            # –£–¥–∞–ª—è–µ–º style —Ç–µ–≥–∏
            content = re.sub(r'<style[^>]*>.*?</style>', '', content, flags=re.IGNORECASE | re.DOTALL)
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã:")
            print(f"   üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {h1_title[:50]}...")
            print(f"   üîó Slug: {slug}")
            print(f"   üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {meta_description[:50]}...")
            
            return {
                'title': h1_title,
                'content': content,
                'slug': slug,
                'meta_description': meta_description
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

def publish_tender_guarantee_article():
    """
    –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ –æ —Ç–µ–Ω–¥–µ—Ä–Ω–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏
    """
    print("üöÄ WordPress API Publisher - –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏")
    print("=" * 60)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    SITE_URL = "https://bizfin-pro.ru"
    USERNAME = "bizfin_pro_r"
    APP_PASSWORD = "U3Ep gU2T clRu FcwN QU6l Dsda"
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API
    wp_api = WordPressAPI(SITE_URL, USERNAME, APP_PASSWORD)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not wp_api.test_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WordPress API")
        return False
    
    print("\n" + "=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å—é –∏–∑ —Ñ–∞–π–ª–∞
    article_file = "tender-guarantee-article.html"
    html_content = wp_api.load_article_from_file(article_file)
    
    if not html_content:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å—é")
        return False
    
    print("\n" + "=" * 60)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
    article_data = wp_api.extract_article_data(html_content)
    
    if not article_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏")
        return False
    
    print("\n" + "=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    categories = wp_api.get_categories()
    category_id = None
    
    # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏" –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –µ—ë
    for cat in categories:
        if "–±–∞–Ω–∫–æ–≤—Å–∫" in cat['name'].lower() or "–≥–∞—Ä–∞–Ω—Ç" in cat['name'].lower():
            category_id = cat['id']
            break
    
    if not category_id:
        print("üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏'...")
        new_category = wp_api.create_category(
            name="–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏",
            slug="bankovskie-garantii",
            description="–°—Ç–∞—Ç—å–∏ –æ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –≥–∞—Ä–∞–Ω—Ç–∏—è—Ö –∏ —Ç–µ–Ω–¥–µ—Ä–∞—Ö"
        )
        if new_category:
            category_id = new_category['id']
    
    print("\n" + "=" * 60)
    
    # –ü—É–±–ª–∏–∫—É–µ–º —Å—Ç–∞—Ç—å—é
    post_data = {
        'title': article_data['title'],
        'content': article_data['content'],
        'slug': article_data['slug'],
        'status': 'publish',
        'categories': [category_id] if category_id else [],
        'meta': {
            '_yoast_wpseo_title': article_data['title'],
            '_yoast_wpseo_metadesc': article_data['meta_description'],
            '_yoast_wpseo_focuskw': '—Ç–µ–Ω–¥–µ—Ä–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è'
        }
    }
    
    published_post = wp_api.publish_post(**post_data)
    
    if published_post:
        print("\n" + "=" * 60)
        print("üéâ –°–¢–ê–¢–¨–Ø –£–°–ü–ï–®–ù–û –û–ü–£–ë–õ–ò–ö–û–í–ê–ù–ê!")
        print(f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è: {published_post['link']}")
        print(f"üìù ID –ø–æ—Å—Ç–∞: {published_post['id']}")
        print(f"üìÖ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {published_post['date']}")
        return True
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é")
        return False

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    """
    print("üöÄ WordPress API Publisher - –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    print("=" * 50)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    SITE_URL = "https://bizfin-pro.ru"
    USERNAME = "bizfin_pro_r"
    APP_PASSWORD = "U3Ep gU2T clRu FcwN QU6l Dsda"
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API
    wp_api = WordPressAPI(SITE_URL, USERNAME, APP_PASSWORD)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if wp_api.test_connection():
        print("\n" + "=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = wp_api.get_user_info()
        
        if user_info:
            print("\n" + "=" * 50)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = wp_api.get_categories()
            
            print("\n" + "=" * 50)
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WordPress API –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            print("üìã –ì–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π")
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WordPress API")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
        print(f"   - URL: {SITE_URL}")
        print(f"   - Username: {USERNAME}")
        print(f"   - App Password: {APP_PASSWORD[:10]}...")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å—Ç–∞—Ç—å–∏
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏ –æ —Ç–µ–Ω–¥–µ—Ä–Ω–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏...")
    print("=" * 60)
    
    success = publish_tender_guarantee_article()
    
    if success:
        print("\nüéâ –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    else:
        print("\n‚ùå –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –ù–ï –£–î–ê–õ–ê–°–¨!")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã")
