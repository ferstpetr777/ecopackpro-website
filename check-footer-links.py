#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üîç –ü–†–û–í–ï–†–ö–ê –°–°–´–õ–û–ö –í –ü–û–î–í–ê–õ–ï –°–ê–ô–¢–ê
–°–∞–π—Ç: ecopackpro.ru
–¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫–∏ –≤ —Ñ—É—Ç–µ—Ä–µ —Å–∞–π—Ç–∞
"""

import requests
import re
from datetime import datetime
import logging
from urllib.parse import urlparse
import concurrent.futures
from threading import Lock

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/www/fastuser/data/www/ecopackpro.ru/footer_links_check.log'),
        logging.StreamHandler()
    ]
)

class FooterLinksChecker:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.stats = {
            'total_links': 0,
            'working_links': 0,
            'broken_links': 0,
            'redirects': 0,
            'timeouts': 0,
            'errors': 0
        }
        
        self.lock = Lock()
        self.results = []
    
    def get_page_content(self, url):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            response = self.session.get(url, timeout=10)
            return response.text
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {url}: {e}")
            return None
    
    def extract_footer_links(self, url):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –∏–∑ –ø–æ–¥–≤–∞–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        logging.info(f"üîç –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ –ø–æ–¥–≤–∞–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {url}")
        
        content = self.get_page_content(url)
        if not content:
            return []
        
        # –ò—â–µ–º –ø–æ–¥–≤–∞–ª —Å–∞–π—Ç–∞ (footer)
        footer_patterns = [
            r'<footer[^>]*>(.*?)</footer>',
            r'<div[^>]*class="[^"]*footer[^"]*"[^>]*>(.*?)</div>',
            r'<div[^>]*id="[^"]*footer[^"]*"[^>]*>(.*?)</div>',
            r'<!-- footer -->(.*?)<!-- /footer -->',
            r'<!-- –ü–æ–¥–≤–∞–ª -->(.*?)<!-- /–ü–æ–¥–≤–∞–ª -->'
        ]
        
        footer_content = ""
        for pattern in footer_patterns:
            match = re.search(pattern, content, re.DOTALL | re.IGNORECASE)
            if match:
                footer_content = match.group(1)
                logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥–≤–∞–ª –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: {pattern}")
                break
        
        if not footer_content:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ footer, –∏—â–µ–º –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            logging.warning("‚ö†Ô∏è –ü–æ–¥–≤–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º —Å—Å—ã–ª–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            footer_content = content[-2000:]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∏–∑ –ø–æ–¥–≤–∞–ª–∞
        link_pattern = r'href="([^"]+)"'
        links = re.findall(link_pattern, footer_content)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏
        internal_links = []
        for link in links:
            if link.startswith('/') or 'ecopackpro.ru' in link:
                if not link.startswith('http'):
                    link = 'https://ecopackpro.ru' + link
                internal_links.append(link)
        
        logging.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –≤ –ø–æ–¥–≤–∞–ª–µ: {len(internal_links)}")
        return internal_links
    
    def check_single_link(self, link):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
        try:
            response = self.session.get(link, timeout=10, allow_redirects=True)
            
            result = {
                'url': link,
                'status_code': response.status_code,
                'final_url': response.url,
                'redirect_count': len(response.history),
                'response_time': response.elapsed.total_seconds(),
                'error': None
            }
            
            with self.lock:
                if response.status_code == 200:
                    self.stats['working_links'] += 1
                    logging.info(f"‚úÖ {link} - {response.status_code} ({result['response_time']:.2f}s)")
                elif 300 <= response.status_code < 400:
                    self.stats['redirects'] += 1
                    logging.warning(f"üîÑ {link} - {response.status_code} (—Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ {response.url})")
                else:
                    self.stats['broken_links'] += 1
                    logging.error(f"‚ùå {link} - {response.status_code}")
            
            return result
            
        except requests.exceptions.Timeout:
            with self.lock:
                self.stats['timeouts'] += 1
            logging.error(f"‚è∞ {link} - Timeout")
            return {
                'url': link,
                'status_code': 'Timeout',
                'error': 'Timeout'
            }
            
        except requests.exceptions.RequestException as e:
            with self.lock:
                self.stats['errors'] += 1
            logging.error(f"üí• {link} - Error: {str(e)}")
            return {
                'url': link,
                'status_code': 'Error',
                'error': str(e)
            }
    
    def check_links_concurrent(self, links, max_workers=10):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
        logging.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É {len(links)} —Å—Å—ã–ª–æ–∫ –∏–∑ –ø–æ–¥–≤–∞–ª–∞...")
        
        with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
            future_to_link = {
                executor.submit(self.check_single_link, link): link 
                for link in links
            }
            
            for future in concurrent.futures.as_completed(future_to_link):
                try:
                    result = future.result()
                    self.results.append(result)
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Å—ã–ª–∫–∏: {e}")
    
    def generate_footer_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Å—ã–ª–æ–∫ –≤ –ø–æ–¥–≤–∞–ª–µ"""
        logging.info("üìã –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Å—ã–ª–æ–∫ –≤ –ø–æ–¥–≤–∞–ª–µ...")
        
        working_links = [r for r in self.results if r['status_code'] == 200]
        broken_links = [r for r in self.results if r['status_code'] != 200 and r['status_code'] != 'Timeout' and r['status_code'] != 'Error']
        redirect_links = [r for r in self.results if isinstance(r['status_code'], int) and 300 <= r['status_code'] < 400]
        error_links = [r for r in self.results if r['status_code'] in ['Timeout', 'Error']]
        
        report = f"""
# üîç –û–¢–ß–ï–¢ –û –ü–†–û–í–ï–†–ö–ï –°–°–´–õ–û–ö –í –ü–û–î–í–ê–õ–ï –°–ê–ô–¢–ê
**–°–∞–π—Ç:** ecopackpro.ru  
**–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê

- **–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –≤ –ø–æ–¥–≤–∞–ª–µ:** {self.stats['total_links']}
- **‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏—Ö —Å—Å—ã–ª–æ–∫ (200):** {self.stats['working_links']} ({self.stats['working_links']/self.stats['total_links']*100:.1f}%)
- **‚ùå –ù–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å—Å—ã–ª–æ–∫:** {self.stats['broken_links']} ({self.stats['broken_links']/self.stats['total_links']*100:.1f}%)
- **üîÑ –†–µ–¥–∏—Ä–µ–∫—Ç–æ–≤:** {self.stats['redirects']} ({self.stats['redirects']/self.stats['total_links']*100:.1f}%)
- **‚è∞ –¢–∞–π–º–∞—É—Ç–æ–≤:** {self.stats['timeouts']}
- **üí• –û—à–∏–±–æ–∫:** {self.stats['errors']}

## ‚úÖ –†–ê–ë–û–¢–ê–Æ–©–ò–ï –°–°–´–õ–ö–ò –í –ü–û–î–í–ê–õ–ï ({len(working_links)})

"""
        
        for link in working_links:
            report += f"- ‚úÖ [{link['url']}]({link['url']}) - {link['response_time']:.2f}s\n"
        
        report += f"""
## ‚ùå –ë–ò–¢–´–ï –°–°–´–õ–ö–ò –í –ü–û–î–í–ê–õ–ï ({len(broken_links)})

"""
        
        for link in broken_links:
            report += f"- ‚ùå [{link['url']}]({link['url']}) - –∫–æ–¥ {link['status_code']}\n"
        
        if redirect_links:
            report += f"""
## üîÑ –†–ï–î–ò–†–ï–ö–¢–´ –í –ü–û–î–í–ê–õ–ï ({len(redirect_links)})

"""
            for link in redirect_links:
                report += f"- üîÑ [{link['url']}]({link['url']}) ‚Üí [{link['final_url']}]({link['final_url']}) - –∫–æ–¥ {link['status_code']}\n"
        
        if error_links:
            report += f"""
## üí• –û–®–ò–ë–ö–ò –ò –¢–ê–ô–ú–ê–£–¢–´ –í –ü–û–î–í–ê–õ–ï ({len(error_links)})

"""
            for link in error_links:
                report += f"- üí• [{link['url']}]({link['url']}) - {link['error']}\n"
        
        report += f"""
## üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò

"""
        
        if self.stats['broken_links'] > 0:
            report += f"1. **–ò—Å–ø—Ä–∞–≤–∏—Ç—å {self.stats['broken_links']} –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫ –≤ –ø–æ–¥–≤–∞–ª–µ** - —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è SEO –∏ UX\n"
        
        if self.stats['redirects'] > 0:
            report += f"2. **–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å {self.stats['redirects']} —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ –≤ –ø–æ–¥–≤–∞–ª–µ** - –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏\n"
        
        if self.stats['timeouts'] > 0:
            report += f"3. **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å {self.stats['timeouts']} —Å—Å—ã–ª–æ–∫ —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –≤ –ø–æ–¥–≤–∞–ª–µ** - –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º\n"
        
        success_rate = self.stats['working_links'] / self.stats['total_links'] * 100 if self.stats['total_links'] > 0 else 0
        report += f"4. **–û–±—â–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–æ–∫ –≤ –ø–æ–¥–≤–∞–ª–µ: {success_rate:.1f}%** - {'–æ—Ç–ª–∏—á–Ω–æ' if success_rate > 95 else '—Ö–æ—Ä–æ—à–æ' if success_rate > 80 else '—Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è'}\n"
        
        report += f"""
---
*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫ –≤ –ø–æ–¥–≤–∞–ª–µ*
"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_filename = f"/var/www/fastuser/data/www/ecopackpro.ru/footer_links_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write(report)
        
        logging.info(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_filename}")
        return report_filename
    
    def check_footer_links(self, url):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫ –≤ –ø–æ–¥–≤–∞–ª–µ"""
        logging.info("üîç –ó–ê–ü–£–°–ö –ü–†–û–í–ï–†–ö–ò –°–°–´–õ–û–ö –í –ü–û–î–í–ê–õ–ï –°–ê–ô–¢–ê")
        logging.info("=" * 50)
        
        start_time = datetime.now()
        
        # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ –ø–æ–¥–≤–∞–ª–∞
        links = self.extract_footer_links(url)
        if not links:
            logging.error("‚ùå –°—Å—ã–ª–∫–∏ –≤ –ø–æ–¥–≤–∞–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return False
        
        self.stats['total_links'] = len(links)
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫–∏
        self.check_links_concurrent(links, max_workers=10)
        
        # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_file = self.generate_footer_report()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        end_time = datetime.now()
        duration = end_time - start_time
        
        logging.info("=" * 50)
        logging.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–í–ï–†–ö–ò –ü–û–î–í–ê–õ–ê")
        logging.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
        logging.info(f"üîó –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫ –≤ –ø–æ–¥–≤–∞–ª–µ: {self.stats['total_links']}")
        logging.info(f"‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏—Ö: {self.stats['working_links']} ({self.stats['working_links']/self.stats['total_links']*100:.1f}%)")
        logging.info(f"‚ùå –ù–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö: {self.stats['broken_links']} ({self.stats['broken_links']/self.stats['total_links']*100:.1f}%)")
        logging.info(f"üìÑ –û—Ç—á–µ—Ç: {report_file}")
        logging.info("=" * 50)
        
        return True

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –ø–æ–¥–≤–∞–ª–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    url = "https://ecopackpro.ru/korobki-dlya-otpravki/"
    checker = FooterLinksChecker()
    checker.check_footer_links(url)



