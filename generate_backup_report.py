#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –≤—Å–µ—Ö –±—ç–∫–∞–ø–∞—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
"""

import os
import glob
from datetime import datetime
import subprocess

SITE_DIR = '/var/www/fastuser/data/www/ecopackpro.ru'

def get_file_info(filepath):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"""
    stat = os.stat(filepath)
    size = stat.st_size
    mtime = datetime.fromtimestamp(stat.st_mtime)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä
    if size < 1024:
        size_str = f"{size} B"
    elif size < 1024**2:
        size_str = f"{size/1024:.1f} KB"
    elif size < 1024**3:
        size_str = f"{size/1024**2:.1f} MB"
    else:
        size_str = f"{size/1024**3:.2f} GB"
    
    return {
        'path': filepath,
        'name': os.path.basename(filepath),
        'size': size,
        'size_str': size_str,
        'mtime': mtime,
        'mtime_str': mtime.strftime('%Y-%m-%d %H:%M:%S')
    }

def find_all_backups():
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –±—ç–∫–∞–ø–æ–≤"""
    os.chdir(SITE_DIR)
    
    patterns = [
        'backup_*.sql',
        '*.tar.gz',
        'FULL_BACKUP_*.tar.gz',
        'ecopackpro_full_backup_*.tar.gz'
    ]
    
    all_backups = []
    seen = set()
    
    for pattern in patterns:
        for filepath in glob.glob(pattern):
            full_path = os.path.join(SITE_DIR, filepath)
            if full_path not in seen:
                seen.add(full_path)
                all_backups.append(get_file_info(full_path))
    
    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –±—ç–∫–∞–ø–∞–º–∏
    for item in os.listdir(SITE_DIR):
        if item.startswith('backup_') and os.path.isdir(os.path.join(SITE_DIR, item)):
            dir_path = os.path.join(SITE_DIR, item)
            all_backups.append({
                'path': dir_path,
                'name': item,
                'size': get_dir_size(dir_path),
                'size_str': format_size(get_dir_size(dir_path)),
                'mtime': datetime.fromtimestamp(os.path.getmtime(dir_path)),
                'mtime_str': datetime.fromtimestamp(os.path.getmtime(dir_path)).strftime('%Y-%m-%d %H:%M:%S')
            })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    all_backups.sort(key=lambda x: x['mtime'], reverse=True)
    
    return all_backups

def get_dir_size(path):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    total = 0
    for dirpath, dirnames, filenames in os.walk(path):
        for f in filenames:
            fp = os.path.join(dirpath, f)
            if os.path.exists(fp):
                total += os.path.getsize(fp)
    return total

def format_size(size):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä"""
    if size < 1024:
        return f"{size} B"
    elif size < 1024**2:
        return f"{size/1024:.1f} KB"
    elif size < 1024**3:
        return f"{size/1024**2:.1f} MB"
    else:
        return f"{size/1024**3:.2f} GB"

def categorize_backups(backups):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –±—ç–∫–∞–ø—ã"""
    categories = {
        'full': [],
        'database': [],
        'files': [],
        'drafts': [],
        'published': [],
        'other': []
    }
    
    for backup in backups:
        name = backup['name'].lower()
        
        if 'full_backup' in name or 'complete' in name:
            categories['full'].append(backup)
        elif 'database' in name or (name.endswith('.sql') and 'draft' not in name and 'publish' not in name):
            categories['database'].append(backup)
        elif 'files' in name or name.endswith('.tar.gz'):
            categories['files'].append(backup)
        elif 'draft' in name:
            categories['drafts'].append(backup)
        elif 'publish' in name:
            categories['published'].append(backup)
        else:
            categories['other'].append(backup)
    
    return categories

def main():
    print("\n" + "="*120)
    print("üìä –û–¢–ß–ï–¢ –û –í–°–ï–• –ë–≠–ö–ê–ü–ê–• –ù–ê –°–ï–†–í–ï–†–ï".center(120))
    print("="*120 + "\n")
    
    print(f"üìÖ –î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {SITE_DIR}\n")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –±—ç–∫–∞–ø—ã
    print("üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –±—ç–∫–∞–ø–æ–≤...")
    backups = find_all_backups()
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –±—ç–∫–∞–ø–æ–≤: {len(backups)}\n")
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º
    categories = categorize_backups(backups)
    
    # –í—ã–≤–æ–¥–∏–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    print("="*120)
    print("üì¶ –ü–û–õ–ù–´–ï –ë–≠–ö–ê–ü–´ (–ë–î + –§–ê–ô–õ–´)".center(120))
    print("="*120)
    
    if categories['full']:
        print(f"\n{'‚Ññ':<4} {'–ù–ê–ó–í–ê–ù–ò–ï':<60} {'–†–ê–ó–ú–ï–†':<12} {'–î–ê–¢–ê –°–û–ó–î–ê–ù–ò–Ø':<20}")
        print("-"*120)
        for idx, backup in enumerate(categories['full'], 1):
            print(f"{idx:<4} {backup['name']:<60} {backup['size_str']:<12} {backup['mtime_str']:<20}")
        print(f"\n–í—Å–µ–≥–æ –ø–æ–ª–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤: {len(categories['full'])}")
    else:
        print("\n–ü–æ–ª–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    print("\n" + "="*120)
    print("üíæ –ë–≠–ö–ê–ü–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•".center(120))
    print("="*120)
    
    if categories['database']:
        print(f"\n{'‚Ññ':<4} {'–ù–ê–ó–í–ê–ù–ò–ï':<60} {'–†–ê–ó–ú–ï–†':<12} {'–î–ê–¢–ê –°–û–ó–î–ê–ù–ò–Ø':<20}")
        print("-"*120)
        for idx, backup in enumerate(categories['database'], 1):
            print(f"{idx:<4} {backup['name']:<60} {backup['size_str']:<12} {backup['mtime_str']:<20}")
        print(f"\n–í—Å–µ–≥–æ –±—ç–∫–∞–ø–æ–≤ –ë–î: {len(categories['database'])}")
    else:
        print("\n–ë—ç–∫–∞–ø–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    print("\n" + "="*120)
    print("üìù –ë–≠–ö–ê–ü–´ –ß–ï–†–ù–û–í–ò–ö–û–í".center(120))
    print("="*120)
    
    if categories['drafts']:
        print(f"\n{'‚Ññ':<4} {'–ù–ê–ó–í–ê–ù–ò–ï':<60} {'–†–ê–ó–ú–ï–†':<12} {'–î–ê–¢–ê –°–û–ó–î–ê–ù–ò–Ø':<20}")
        print("-"*120)
        for idx, backup in enumerate(categories['drafts'], 1):
            print(f"{idx:<4} {backup['name']:<60} {backup['size_str']:<12} {backup['mtime_str']:<20}")
        print(f"\n–í—Å–µ–≥–æ –±—ç–∫–∞–ø–æ–≤ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: {len(categories['drafts'])}")
    else:
        print("\n–ë—ç–∫–∞–ø–æ–≤ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    print("\n" + "="*120)
    print("üì∞ –ë–≠–ö–ê–ü–´ –û–ü–£–ë–õ–ò–ö–û–í–ê–ù–ù–´–• –°–¢–ê–¢–ï–ô".center(120))
    print("="*120)
    
    if categories['published']:
        print(f"\n{'‚Ññ':<4} {'–ù–ê–ó–í–ê–ù–ò–ï':<60} {'–†–ê–ó–ú–ï–†':<12} {'–î–ê–¢–ê –°–û–ó–î–ê–ù–ò–Ø':<20}")
        print("-"*120)
        for idx, backup in enumerate(categories['published'], 1):
            print(f"{idx:<4} {backup['name']:<60} {backup['size_str']:<12} {backup['mtime_str']:<20}")
        print(f"\n–í—Å–µ–≥–æ –±—ç–∫–∞–ø–æ–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö: {len(categories['published'])}")
    else:
        print("\n–ë—ç–∫–∞–ø–æ–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_size = sum(b['size'] for b in backups)
    
    print("\n" + "="*120)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê".center(120))
    print("="*120)
    print(f"üìù –í—Å–µ–≥–æ –±—ç–∫–∞–ø–æ–≤: {len(backups)}")
    print(f"üì¶ –ü–æ–ª–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤: {len(categories['full'])}")
    print(f"üíæ –ë—ç–∫–∞–ø–æ–≤ –ë–î: {len(categories['database'])}")
    print(f"üìù –ë—ç–∫–∞–ø–æ–≤ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: {len(categories['drafts'])}")
    print(f"üì∞ –ë—ç–∫–∞–ø–æ–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö: {len(categories['published'])}")
    print(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö –±—ç–∫–∞–ø–æ–≤: {format_size(total_size)}")
    print("="*120)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_filename = f'{SITE_DIR}/BACKUP_REPORT_{datetime.now().strftime("%Y%m%d_%H%M%S")}.txt'
    
    with open(report_filename, 'w', encoding='utf-8') as f:
        f.write("="*120 + "\n")
        f.write("–û–¢–ß–ï–¢ –û –í–°–ï–• –ë–≠–ö–ê–ü–ê–• –ù–ê –°–ï–†–í–ï–†–ï ECOPACKPRO.RU\n".center(120))
        f.write("="*120 + "\n\n")
        f.write(f"–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {SITE_DIR}\n\n")
        
        f.write("–ü–û–õ–ù–´–ï –ë–≠–ö–ê–ü–´:\n")
        f.write("-"*120 + "\n")
        for backup in categories['full']:
            f.write(f"{backup['name']:<60} {backup['size_str']:<12} {backup['mtime_str']}\n")
        
        f.write("\n–ë–≠–ö–ê–ü–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•:\n")
        f.write("-"*120 + "\n")
        for backup in categories['database']:
            f.write(f"{backup['name']:<60} {backup['size_str']:<12} {backup['mtime_str']}\n")
        
        f.write("\n" + "="*120 + "\n")
        f.write(f"–í—Å–µ–≥–æ –±—ç–∫–∞–ø–æ–≤: {len(backups)}\n")
        f.write(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {format_size(total_size)}\n")
    
    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_filename}")
    
    print("\n" + "="*120)
    print("üéâ –û–¢–ß–ï–¢ –û –ë–≠–ö–ê–ü–ê–• –°–û–ó–î–ê–ù!".center(120))
    print("="*120)

if __name__ == "__main__":
    main()

