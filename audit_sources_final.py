#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
from requests.auth import HTTPBasicAuth
import json
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WordPress API
WP_API_URL = "https://ecopackpro.ru/wp-json/wp/v2"
WP_USERNAME = "rtep1976@me.com"
WP_APP_PASSWORD = "7EKI VWpH 96dg VI3H ovlI hI4E"

class SourcesAuditor:
    def __init__(self):
        self.auth = HTTPBasicAuth(WP_USERNAME, WP_APP_PASSWORD)
        self.headers = {'Content-Type': 'application/json'}
        self.results = []
    
    def get_post(self, post_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ API"""
        url = f"{WP_API_URL}/posts/{post_id}"
        try:
            response = requests.get(url, auth=self.auth, headers=self.headers, timeout=15)
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞ {post_id}: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞ {post_id}: {e}")
            return None
    
    def check_sources_in_article(self, post_id, article_title):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ —Å—Ç–∞—Ç—å–µ"""
        post = self.get_post(post_id)
        
        if not post:
            return {
                'id': post_id,
                'title': article_title,
                'status': 'error',
                'reason': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç',
                'has_sources': False,
                'sources_count': 0
            }
        
        content = post['content']['rendered']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        has_sources = 'üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏' in content
        
        if has_sources:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫
            sources_count = content.count('<a href=')
            
            return {
                'id': post_id,
                'title': article_title,
                'status': 'success',
                'reason': '–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–∞–π–¥–µ–Ω—ã',
                'has_sources': True,
                'sources_count': sources_count
            }
        else:
            return {
                'id': post_id,
                'title': article_title,
                'status': 'missing',
                'reason': '–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
                'has_sources': False,
                'sources_count': 0
            }
    
    def audit_all_articles(self):
        """–ê—É–¥–∏—Ç –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π"""
        print("=" * 80)
        print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –ê–£–î–ò–¢ –†–ê–ó–î–ï–õ–ê –ò–°–¢–û–ß–ù–ò–ö–û–í")
        print("=" * 80)
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π
        articles = [
            (7907, "–∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã"),
            (7908, "–ø–æ—á—Ç–æ–≤—ã–µ –∫–æ—Ä–æ–±–∫–∏"),
            (7909, "–ó–∏–ø –ø–∞–∫–µ—Ç—ã"),
            (7910, "Zip lock –ø–∞–∫–µ—Ç—ã —Å –±–µ–≥—É–Ω–∫–æ–º: —É–¥–æ–±–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"),
            (7911, "–ö–æ–Ω–≤–µ—Ä—Ç—ã —Å –≤–æ–∑–¥—É—à–Ω–æ–π –ø–æ–¥—É—à–∫–æ–π –¥–ª—è —Ö—Ä—É–ø–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤"),
            (7912, "–ö–æ–Ω–≤–µ—Ä—Ç—ã —Å –≤–æ–∑–¥—É—à–Ω–æ–π –ø—Ä–æ—Å–ª–æ–π–∫–æ–π –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"),
            (7913, "–ö—Ä–∞—Ñ—Ç–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã —Å –≤–æ–∑–¥—É—à–Ω–æ–π –ø–æ–¥—É—à–∫–æ–π –¥–ª—è –±–∏–∑–Ω–µ—Å–∞: –∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª"),
            (7914, "–ö—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ"),
            (7915, "–ö—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã –Ω–æ–º–µ—Ä–Ω—ã–µ"),
            (7916, "–ö—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã —á–µ—Ä–Ω–æ-–±–µ–ª—ã–µ"),
            (7917, "–ö—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã —Å –∫–∞—Ä–º–∞–Ω–æ–º"),
            (7918, "Zip lock –ø–∞–∫–µ—Ç—ã –º–∞—Ç–æ–≤—ã–µ"),
            (7919, "Zip lock –ø–∞–∫–µ—Ç—ã –æ–ø—Ç–æ–º"),
            (7920, "–ö—Ä–∞—Ñ—Ç–æ–≤—ã–µ –∫–æ–Ω–≤–µ—Ä—Ç—ã"),
            (7921, "–ü—É–∑—ã—Ä—á–∞—Ç—ã–µ –ø–∞–∫–µ—Ç—ã –í–ü–ü"),
            (7922, "–ö–æ—Ä–æ–±–∫–∏ –¥–ª—è –ø–æ—á—Ç—ã"),
            (7923, "–ö–æ—Ä–æ–±–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"),
            (7924, "–°–∞–º–æ–∫–ª–µ—è—â–∏–µ—Å—è –∫–∞—Ä–º–∞–Ω—ã"),
            (7925, "–ê–Ω—Ç–∏–º–∞–≥–Ω–∏—Ç–Ω–∞—è –ø–ª–æ–º–±–∞"),
            (7926, "–ù–∞–∫–ª–µ–π–∫–∞ –ø–ª–æ–º–±–∞ –∞–Ω—Ç–∏–º–∞–≥–Ω–∏—Ç"),
            (7927, "–ü–ª–æ–º–±–∏—Ä–∞—Ç–æ—Ä –¥–ª—è –±–æ—á–µ–∫"),
            (7928, "–ù–æ–º–µ—Ä–Ω—ã–µ –ø–ª–æ–º–±—ã –Ω–∞–∫–ª–µ–π–∫–∏"),
            (7929, "Zip lock –ø–∞–∫–µ—Ç—ã —Å –±–µ–ª–æ–π –ø–æ–ª–æ—Å–æ–π"),
            (7930, "–ë–µ–ª—ã–µ –∫—Ä–∞—Ñ—Ç –ø–∞–∫–µ—Ç—ã —Å –ø—É–∑—ã—Ä—á–∞—Ç–æ–π –ø–ª—ë–Ω–∫–æ–π"),
            (7931, "–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ zip lock –ø–∞–∫–µ—Ç—ã"),
            (7932, "–ö—É–ø–∏—Ç—å –∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã —Å –Ω–æ–º–µ—Ä–Ω—ã–º —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–º"),
            (7933, "–ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã –æ–ø—Ç–æ–º"),
            (7934, "–ö—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã —á–µ—Ä–Ω–æ-–±–µ–ª—ã–µ —Å –∫–∞—Ä–º–∞–Ω–æ–º —Ü–µ–Ω–∞"),
            (7935, "–ú–∞—Ç–æ–≤—ã–µ zip lock –ø–∞–∫–µ—Ç—ã —Å –±–µ–≥—É–Ω–∫–æ–º 10√ó15"),
            (7936, "–ö—É–ø–∏—Ç—å –æ–ø—Ç–æ–º zip lock –ø–∞–∫–µ—Ç—ã –º–∞—Ç–æ–≤—ã–µ 30 –º–∫–º"),
            (7937, "–ö—Ä–∞—Ñ—Ç –∫–æ–Ω–≤–µ—Ä—Ç—ã —Å –≤–æ–∑–¥—É—à–Ω–æ–π –ø–æ–¥—É—à–∫–æ–π F/3"),
            (7938, "–ü–æ—á—Ç–æ–≤—ã–µ –∫–æ—Ä–æ–±–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ S 260√ó170√ó80"),
            (7939, "–ü–æ—á—Ç–æ–≤—ã–µ –∫–æ—Ä–æ–±–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ XL 530√ó360√ó220"),
            (7940, "–ö—É–ø–∏—Ç—å —Å–∞–º–æ–∫–ª–µ—è—â–∏–µ—Å—è –∫–∞—Ä–º–∞–Ω—ã SD –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"),
            (7941, "–ê–Ω—Ç–∏–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –Ω–∞–∫–ª–µ–π–∫–∏ –¥–ª—è –≤–æ–¥—è–Ω—ã—Ö —Å—á—ë—Ç—á–∏–∫–æ–≤"),
            (7942, "–ê–Ω—Ç–∏–º–∞–≥–Ω–∏—Ç–Ω–∞—è –ø–ª–æ–º–±–∞ —Ü–µ–Ω–∞ –∑–∞ 100 —à—Ç—É–∫"),
            (7943, "–ü–ª–æ–º–±–∏—Ä–∞—Ç–æ—Ä –¥–ª—è –µ–≤—Ä–æ–±–æ—á–µ–∫ 2 –¥—é–π–º–∞"),
            (7944, "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ–ø–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—á–µ–∫ ¬æ –¥—é–π–º–∞"),
            (7945, "–ö—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã —á–µ—Ä–Ω–æ-–±–µ–ª—ã–µ –±–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–∞ –ê4"),
            (7946, "–ö—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –¥–ª—è –æ–¥–µ–∂–¥—ã"),
            (7947, "–ö—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ Ozon"),
            (7948, "–ü–æ—á—Ç–æ–≤—ã–µ –∫–æ—Ä–æ–±–∫–∏ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –Ω–∞ –∑–∞–∫–∞–∑"),
            (7949, "–ó–∏–ø –ø–∞–∫–µ—Ç—ã —Å –±–µ–≥—É–Ω–∫–æ–º –∫—É–ø–∏—Ç—å –ú–æ—Å–∫–≤–∞"),
            (7950, "–ú–∞—Ç–æ–≤—ã–µ zip lock –ø–∞–∫–µ—Ç—ã –¥–ª—è —á–∞—è"),
            (7951, "Zip lock –ø–∞–∫–µ—Ç—ã —Å –ø–æ–¥–≤–µ—Å–æ–º"),
            (7952, "–ë–µ–ª—ã–µ –∫—Ä–∞—Ñ—Ç-–ø–∞–∫–µ—Ç—ã —Å –ø—É–∑—ã—Ä—á–∞—Ç–æ–π –ø–ª—ë–Ω–∫–æ–π –æ–ø—Ç–æ–º"),
            (7953, "–ü–ª–æ—Å–∫–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç—ã —Å –≤–æ–∑–¥—É—à–Ω–æ–π –ø–æ–¥—É—à–∫–æ–π –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"),
            (7954, "–ü–∞–∫–µ—Ç—ã –∏–∑ –≤–æ–∑–¥—É—à–Ω–æ-–ø—É–∑—ã—Ä—å–∫–æ–≤–æ–π –ø–ª—ë–Ω–∫–∏ –æ–ø—Ç–æ–º"),
            (7955, "–ê–Ω—Ç–∏–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –ø–ª–æ–º–±—ã –¥–ª—è –≥–∞–∑–æ–≤—ã—Ö —Å—á—ë—Ç—á–∏–∫–æ–≤"),
            (7956, "–°–∞–º–æ–∫–ª–µ—è—â–∏–µ—Å—è –∫–∞—Ä–º–∞–Ω—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö")
        ]
        
        success_count = 0
        missing_count = 0
        error_count = 0
        
        for i, (post_id, title) in enumerate(articles, 1):
            print(f"[{i:2d}/50] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—å–∏ ID {post_id}")
            
            result = self.check_sources_in_article(post_id, title)
            self.results.append(result)
            
            if result['status'] == 'success':
                success_count += 1
                print(f"    ‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–∞–π–¥–µ–Ω—ã ({result['sources_count']} —Å—Å—ã–ª–æ–∫)")
            elif result['status'] == 'missing':
                missing_count += 1
                print(f"    ‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ù–ï –Ω–∞–π–¥–µ–Ω—ã")
            else:
                error_count += 1
                print(f"    ‚ö†Ô∏è  –û—à–∏–±–∫–∞: {result['reason']}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        self.generate_report(success_count, missing_count, error_count)
        
        return success_count, missing_count, error_count
    
    def generate_report(self, success_count, missing_count, error_count):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ê–£–î–ò–¢–ê")
        print("=" * 80)
        print(f"‚úÖ –°—Ç–∞—Ç–µ–π —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏: {success_count}")
        print(f"‚ùå –°—Ç–∞—Ç–µ–π –±–µ–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {missing_count}")
        print(f"‚ö†Ô∏è  –°—Ç–∞—Ç–µ–π —Å –æ—à–∏–±–∫–∞–º–∏: {error_count}")
        print(f"üìù –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(self.results)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        report_filename = f"final_sources_audit_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(report_filename, 'w', encoding='utf-8') as f:
            json.dump({
                'timestamp': datetime.now().isoformat(),
                'summary': {
                    'total': len(self.results),
                    'with_sources': success_count,
                    'without_sources': missing_count,
                    'errors': error_count
                },
                'results': self.results
            }, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_filename}")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—å–∏ –±–µ–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if missing_count > 0:
            print("\n‚ùå –°–¢–ê–¢–¨–ò –ë–ï–ó –ò–°–¢–û–ß–ù–ò–ö–û–í:")
            for result in self.results:
                if result['status'] == 'missing':
                    print(f"   ID {result['id']}: {result['title']}")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—å–∏ —Å –æ—à–∏–±–∫–∞–º–∏
        if error_count > 0:
            print("\n‚ö†Ô∏è  –°–¢–ê–¢–¨–ò –° –û–®–ò–ë–ö–ê–ú–ò:")
            for result in self.results:
                if result['status'] == 'error':
                    print(f"   ID {result['id']}: {result['title']} - {result['reason']}")
        
        # –í—ã–≤–æ–¥–∏–º —É—Å–ø–µ—à–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
        if success_count > 0:
            print(f"\n‚úÖ –°–¢–ê–¢–¨–ò –° –ò–°–¢–û–ß–ù–ò–ö–ê–ú–ò ({success_count}):")
            for result in self.results:
                if result['status'] == 'success':
                    print(f"   ID {result['id']}: {result['title']} ({result['sources_count']} —Å—Å—ã–ª–æ–∫)")
        
        # –°–æ–∑–¥–∞–µ–º markdown –æ—Ç—á–µ—Ç
        self.create_markdown_report(success_count, missing_count, error_count)
    
    def create_markdown_report(self, success_count, missing_count, error_count):
        """–°–æ–∑–¥–∞–Ω–∏–µ markdown –æ—Ç—á–µ—Ç–∞"""
        report_filename = f"–§–ò–ù–ê–õ–¨–ù–´–ô_–û–¢–ß–ï–¢_–ê–£–î–ò–¢–ê_–ò–°–¢–û–ß–ù–ò–ö–û–í_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write(f"""# üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ê–£–î–ò–¢–ê –†–ê–ó–î–ï–õ–ê –ò–°–¢–û–ß–ù–ò–ö–û–í

**–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

## üìà –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê

| –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ | –ü—Ä–æ—Ü–µ–Ω—Ç |
|-----------|------------|---------|
| ‚úÖ –°—Ç–∞—Ç–µ–π —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ | {success_count} | {(success_count/len(self.results)*100):.1f}% |
| ‚ùå –°—Ç–∞—Ç–µ–π –±–µ–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ | {missing_count} | {(missing_count/len(self.results)*100):.1f}% |
| ‚ö†Ô∏è –°—Ç–∞—Ç–µ–π —Å –æ—à–∏–±–∫–∞–º–∏ | {error_count} | {(error_count/len(self.results)*100):.1f}% |
| üìù **–í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π** | **{len(self.results)}** | **100%** |

## üéØ –†–ï–ó–£–õ–¨–¢–ê–¢

""")
            
            if success_count == len(self.results):
                f.write("**üéâ –í–°–ï –°–¢–ê–¢–¨–ò –£–°–ü–ï–®–ù–û –°–û–î–ï–†–ñ–ê–¢ –†–ê–ó–î–ï–õ –ò–°–¢–û–ß–ù–ò–ö–û–í!**\n\n")
            elif success_count > 0:
                f.write(f"**‚úÖ {success_count} –∏–∑ {len(self.results)} —Å—Ç–∞—Ç–µ–π —Å–æ–¥–µ—Ä–∂–∞—Ç —Ä–∞–∑–¥–µ–ª –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤**\n\n")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            f.write("## üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´\n\n")
            
            # –°—Ç–∞—Ç—å–∏ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
            if success_count > 0:
                f.write("### ‚úÖ –°—Ç–∞—Ç—å–∏ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏\n\n")
                for result in self.results:
                    if result['status'] == 'success':
                        f.write(f"- **ID {result['id']}:** {result['title']} ({result['sources_count']} —Å—Å—ã–ª–æ–∫)\n")
                f.write("\n")
            
            # –°—Ç–∞—Ç—å–∏ –±–µ–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            if missing_count > 0:
                f.write("### ‚ùå –°—Ç–∞—Ç—å–∏ –±–µ–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n\n")
                for result in self.results:
                    if result['status'] == 'missing':
                        f.write(f"- **ID {result['id']}:** {result['title']}\n")
                f.write("\n")
            
            # –°—Ç–∞—Ç—å–∏ —Å –æ—à–∏–±–∫–∞–º–∏
            if error_count > 0:
                f.write("### ‚ö†Ô∏è –°—Ç–∞—Ç—å–∏ —Å –æ—à–∏–±–∫–∞–º–∏\n\n")
                for result in self.results:
                    if result['status'] == 'error':
                        f.write(f"- **ID {result['id']}:** {result['title']} - {result['reason']}\n")
                f.write("\n")
            
            f.write(f"""## üìä –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï

–ê—É–¥–∏—Ç —Ä–∞–∑–¥–µ–ª–æ–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ —Å—Ç–∞—Ç—å–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–¥–µ–ª–∞ "üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏" —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã.

**–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:** {success_count}/{len(self.results)} —Å—Ç–∞—Ç–µ–π —Å–æ–¥–µ—Ä–∂–∞—Ç —Ä–∞–∑–¥–µ–ª –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.

---
*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ {datetime.now().strftime('%d.%m.%Y –≤ %H:%M:%S')}*
""")
        
        print(f"üìÑ Markdown –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_filename}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    auditor = SourcesAuditor()
    success, missing, error = auditor.audit_all_articles()
    
    if success == 50:
        print("\nüéâ –ò–î–ï–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –í—Å–µ 50 —Å—Ç–∞—Ç–µ–π —Å–æ–¥–µ—Ä–∂–∞—Ç —Ä–∞–∑–¥–µ–ª –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤!")
    elif success > 0:
        print(f"\n‚úÖ –ê–£–î–ò–¢ –ó–ê–í–ï–†–®–ï–ù! {success} –∏–∑ 50 —Å—Ç–∞—Ç–µ–π —Å–æ–¥–µ—Ä–∂–∞—Ç —Ä–∞–∑–¥–µ–ª –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
    else:
        print("\n‚ùå –ù–ò –û–î–ù–ê –°–¢–ê–¢–¨–Ø –ù–ï –°–û–î–ï–†–ñ–ò–¢ –†–ê–ó–î–ï–õ –ò–°–¢–û–ß–ù–ò–ö–û–í")

if __name__ == "__main__":
    main()
