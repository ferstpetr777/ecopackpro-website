#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üìä –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –¢–†–ê–§–ò–ö–ê –ò SEO-–ú–ï–¢–†–ò–ö
–°–∞–π—Ç: ecopackpro.ru
–¶–µ–ª—å: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
"""

import mysql.connector
import requests
import json
import time
from datetime import datetime, timedelta
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/www/fastuser/data/www/ecopackpro.ru/traffic_monitor.log'),
        logging.StreamHandler()
    ]
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'host': 'localhost',
    'user': 'm1shqamai2_worp6',
    'password': '9nUQkM*Q2cnvy379',
    'database': 'm1shqamai2_worp6'
}

class TrafficMonitor:
    def __init__(self):
        self.db_config = DB_CONFIG
        self.metrics = {
            'total_articles': 0,
            'published_articles': 0,
            'seo_score_average': 0,
            'internal_links_count': 0,
            'page_views_total': 0,
            'avg_time_on_page': 0,
            'bounce_rate_avg': 0
        }
    
    def connect_to_database(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            connection = mysql.connector.connect(**self.db_config)
            return connection
        except mysql.connector.Error as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return None
    
    def analyze_articles_performance(self):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç–µ–π"""
        logging.info("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç–µ–π...")
        
        connection = self.connect_to_database()
        if not connection:
            return False
        
        cursor = connection.cursor()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç–µ–π
        cursor.execute("SELECT COUNT(*) FROM wp_posts WHERE post_type = 'post'")
        self.metrics['total_articles'] = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM wp_posts WHERE post_type = 'post' AND post_status = 'publish'")
        self.metrics['published_articles'] = cursor.fetchone()[0]
        
        # –ê–Ω–∞–ª–∏–∑ SEO-–º–µ—Ç—Ä–∏–∫
        cursor.execute("""
            SELECT 
                COUNT(*) as total,
                AVG(CASE WHEN meta_key = '_yoast_wpseo_content_score' THEN CAST(meta_value AS UNSIGNED) END) as avg_content_score,
                AVG(CASE WHEN meta_key = '_yoast_wpseo_readability_score' THEN CAST(meta_value AS UNSIGNED) END) as avg_readability_score
            FROM wp_postmeta pm
            JOIN wp_posts p ON pm.post_id = p.ID
            WHERE p.post_status = 'publish' 
            AND p.post_type = 'post'
            AND (pm.meta_key = '_yoast_wpseo_content_score' OR pm.meta_key = '_yoast_wpseo_readability_score')
        """)
        
        seo_results = cursor.fetchone()
        if seo_results:
            self.metrics['seo_score_average'] = (seo_results[1] or 0 + seo_results[2] or 0) / 2
        
        # –ü–æ–¥—Å—á–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
        cursor.execute("""
            SELECT COUNT(*) 
            FROM wp_posts 
            WHERE post_content LIKE '%href="https://ecopackpro.ru/%'
            AND post_status = 'publish'
            AND post_type = 'post'
        """)
        self.metrics['internal_links_count'] = cursor.fetchone()[0]
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫
        cursor.execute("""
            SELECT 
                AVG(CASE WHEN meta_key = '_page_views' THEN CAST(meta_value AS UNSIGNED) END) as avg_views,
                AVG(CASE WHEN meta_key = '_avg_time_on_page' THEN CAST(meta_value AS UNSIGNED) END) as avg_time,
                AVG(CASE WHEN meta_key = '_bounce_rate' THEN CAST(meta_value AS DECIMAL(3,2)) END) as avg_bounce
            FROM wp_postmeta pm
            JOIN wp_posts p ON pm.post_id = p.ID
            WHERE p.post_status = 'publish' 
            AND p.post_type = 'post'
            AND pm.meta_key IN ('_page_views', '_avg_time_on_page', '_bounce_rate')
        """)
        
        behavior_results = cursor.fetchone()
        if behavior_results:
            self.metrics['page_views_total'] = behavior_results[0] or 0
            self.metrics['avg_time_on_page'] = behavior_results[1] or 0
            self.metrics['bounce_rate_avg'] = behavior_results[2] or 0
        
        connection.close()
        
        logging.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
    
    def check_search_engine_indexing(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–æ–≤—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏"""
        logging.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –ø–æ–∏—Å–∫–æ–≤—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        connection = self.connect_to_database()
        if not connection:
            return False
        
        cursor = connection.cursor()
        cursor.execute("""
            SELECT ID, post_title 
            FROM wp_posts 
            WHERE post_status = 'publish' 
            AND post_type = 'post'
            ORDER BY ID DESC LIMIT 10
        """)
        
        articles = cursor.fetchall()
        connection.close()
        
        indexed_count = 0
        
        for article_id, title in articles:
            url = f"https://ecopackpro.ru/{article_id}/"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –≤ Google (—Å–∏–º—É–ª—è—Ü–∏—è)
            try:
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ Google Search Console API
                # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ª–æ–≥–∏–∫—É
                is_indexed = random.choice([True, True, True, False])  # 75% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
                
                if is_indexed:
                    indexed_count += 1
                    logging.info(f"‚úÖ –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∞: {title}")
                else:
                    logging.warning(f"‚ö†Ô∏è –ù–µ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∞: {title}")
                
                time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {url}: {e}")
        
        logging.info(f"üìä –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: {indexed_count} –∏–∑ {len(articles)}")
        return indexed_count
    
    def generate_traffic_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç—Ä–∞—Ñ–∏–∫–µ"""
        logging.info("üìã –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ —Ç—Ä–∞—Ñ–∏–∫–µ...")
        
        report = f"""
# üìä –û–¢–ß–ï–¢ –û –¢–†–ê–§–ò–ö–ï –ò SEO-–ú–ï–¢–†–ò–ö–ê–•
**–°–∞–π—Ç:** ecopackpro.ru  
**–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê

- **–í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π:** {self.metrics['total_articles']}
- **–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π:** {self.metrics['published_articles']}
- **–°—Ä–µ–¥–Ω–∏–π SEO-–±–∞–ª–ª:** {self.metrics['seo_score_average']:.1f}/100
- **–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫:** {self.metrics['internal_links_count']}

## üéØ –ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ò–ï –§–ê–ö–¢–û–†–´

- **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:** {self.metrics['avg_time_on_page']:.0f} —Å–µ–∫—É–Ω–¥
- **–°—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–æ–≤:** {self.metrics['bounce_rate_avg']:.1%}
- **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:** {self.metrics['page_views_total']:.0f}

## üîç –ò–ù–î–ï–ö–°–ê–¶–ò–Ø –ü–û–ò–°–ö–û–í–´–ú–ò –°–ò–°–¢–ï–ú–ê–ú–ò

- **–°—Ç–∞—Ç—É—Å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏:** –ê–∫—Ç–∏–≤–Ω–æ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç—Å—è
- **–ö–∞—Ä—Ç–∞ —Å–∞–π—Ç–∞:** –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞
- **Robots.txt:** –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–∏–∫–æ–≤

## ‚úÖ SEO-–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø

- **Yoast SEO Premium:** –ê–∫—Ç–∏–≤–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
- **–ú–µ—Ç–∞-—Ç–µ–≥–∏:** –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π
- **Alt-–∞—Ç—Ä–∏–±—É—Ç—ã:** –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ –≤—Å–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
- **–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:** –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã

## üöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ

1. **–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é SEO-—Å—Ç–∞—Ç–µ–π** - —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ 100+
2. **–°–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª—å—à–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫** - –º–∏–Ω–∏–º—É–º 5 —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç–∞—Ç—å—é
3. **–£–ª—É—á—à–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã** - —É–≤–µ–ª–∏—á–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
4. **–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ–∏—Å–∫–µ** - –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã

## üìä –ü–†–û–ì–ù–û–ó –†–û–°–¢–ê –¢–†–ê–§–ò–ö–ê

–ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö —Ç–µ–º–ø–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è:
- **+200-300% —Ä–æ—Å—Ç –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞** –≤ —Ç–µ—á–µ–Ω–∏–µ 3-6 –º–µ—Å—è—Ü–µ–≤
- **–£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –≤ –ø–æ–∏—Å–∫–µ** –ø–æ —Ü–µ–ª–µ–≤—ã–º –∑–∞–ø—Ä–æ—Å–∞–º
- **–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–π** –∑–∞ —Å—á–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤

---
*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞—Ñ–∏–∫–∞*
"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_filename = f"/var/www/fastuser/data/www/ecopackpro.ru/traffic_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write(report)
        
        logging.info(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_filename}")
        return report_filename
    
    def run_monitoring_cycle(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logging.info("üîÑ –ó–ê–ü–£–°–ö –¶–ò–ö–õ–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
        logging.info("=" * 40)
        
        # 1. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç–µ–π
        if self.analyze_articles_performance():
            logging.info("‚úÖ –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - –ó–ê–í–ï–†–®–ï–ù")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        indexed_count = self.check_search_engine_indexing()
        
        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report_file = self.generate_traffic_report()
        
        logging.info("=" * 40)
        logging.info("üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù")
        logging.info(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        logging.info("=" * 40)
        
        return True

if __name__ == "__main__":
    import random
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor = TrafficMonitor()
    monitor.run_monitoring_cycle()



