#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import mysql.connector
import re
from datetime import datetime
from bs4 import BeautifulSoup

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö WordPress
DB_CONFIG = {
    'host': 'localhost',
    'user': 'm1shqamai2_worp6',
    'password': '9nUQkM*Q2cnvy379',
    'database': 'm1shqamai2_worp6'
}

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö 50 —Å—Ç–∞—Ç–µ–π (ID –∏–∑ –∞—É–¥–∏—Ç–∞)
ARTICLE_IDS = [
    7907, 7908, 7909, 7910, 7911, 7912, 7913, 7914, 7915, 7916,
    7917, 7918, 7919, 7920, 7921, 7922, 7923, 7924, 7925, 7926,
    7927, 7928, 7929, 7930, 7931, 7932, 7933, 7934, 7935, 7936,
    7937, 7938, 7939, 7940, 7941, 7942, 7943, 7944, 7945, 7946,
    7947, 7948, 7949, 7950, 7951, 7952, 7953, 7954, 7955, 7956
]

class WordCountAnalyzer:
    def __init__(self):
        self.db_config = DB_CONFIG
        self.word_counts = []
        
    def connect_to_database(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL"""
        try:
            connection = mysql.connector.connect(**self.db_config)
            return connection
        except mysql.connector.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def clean_html(self, html_content):
        """–û—á–∏—Å—Ç–∫–∞ HTML –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
        if not html_content:
            return ""
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º BeautifulSoup –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è HTML —Ç–µ–≥–æ–≤
        soup = BeautifulSoup(html_content, 'html.parser')
        
        # –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
        for script in soup(["script", "style"]):
            script.decompose()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
        text = soup.get_text()
        
        # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        text = re.sub(r'\s+', ' ', text)
        
        return text.strip()
    
    def count_words(self, text):
        """–ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ"""
        if not text:
            return 0
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞ (—É—á–∏—Ç—ã–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫–∏)
        words = re.findall(r'\b[\w\-]+\b', text, re.UNICODE)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ "—Å–ª–æ–≤–∞" (1-2 —Å–∏–º–≤–æ–ª–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏)
        meaningful_words = [w for w in words if len(w) >= 2]
        
        return len(meaningful_words)
    
    def get_article_data(self, post_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        connection = self.connect_to_database()
        if not connection:
            return None
        
        try:
            cursor = connection.cursor(dictionary=True)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
            cursor.execute("""
                SELECT ID, post_title, post_content, post_excerpt
                FROM wp_posts 
                WHERE ID = %s
            """, (post_id,))
            
            post_data = cursor.fetchone()
            
            if not post_data:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ–∫—É—Å–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
            cursor.execute("""
                SELECT meta_value
                FROM wp_postmeta 
                WHERE post_id = %s 
                AND meta_key = '_yoast_wpseo_focuskw'
            """, (post_id,))
            
            focus_kw = cursor.fetchone()
            post_data['focus_keyword'] = focus_kw['meta_value'] if focus_kw else ''
            
            return post_data
            
        except mysql.connector.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ID {post_id}: {e}")
            return None
        finally:
            connection.close()
    
    def analyze_article(self, post_id):
        """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏"""
        article_data = self.get_article_data(post_id)
        
        if not article_data:
            return {
                'id': post_id,
                'title': '–ù–ï –ù–ê–ô–î–ï–ù–ê',
                'focus_keyword': '',
                'word_count': 0,
                'status': 'error'
            }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –æ—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
        content = article_data['post_content']
        clean_text = self.clean_html(content)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ–≤–∞
        word_count = self.count_words(clean_text)
        
        return {
            'id': post_id,
            'title': article_data['post_title'],
            'focus_keyword': article_data['focus_keyword'],
            'word_count': word_count,
            'status': 'success'
        }
    
    def analyze_all_articles(self):
        """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö 50 —Å—Ç–∞—Ç–µ–π"""
        print("üìä –ü–û–î–°–ß–ï–¢ –ö–û–õ–ò–ß–ï–°–¢–í–ê –°–õ–û–í –í 50 –°–¢–ê–¢–¨–Ø–•")
        print("=" * 80)
        
        for i, post_id in enumerate(ARTICLE_IDS, 1):
            print(f"\nüìã {i}/50 –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—å–∏ ID {post_id}...", end=" ")
            
            result = self.analyze_article(post_id)
            self.word_counts.append(result)
            
            if result['status'] == 'success':
                print(f"‚úÖ {result['word_count']} —Å–ª–æ–≤")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞")
        
        return self.word_counts
    
    def print_detailed_report(self):
        """–í—ã–≤–æ–¥ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 80)
        print("üìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –°–õ–û–í")
        print("=" * 80)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ª–æ–≤ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
        sorted_articles = sorted(self.word_counts, key=lambda x: x['word_count'], reverse=True)
        
        total_words = 0
        min_words = float('inf')
        max_words = 0
        
        print(f"\n{'‚Ññ':<4} {'ID':<6} {'–°–ª–æ–≤':<8} {'–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ / –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏'}")
        print("-" * 80)
        
        for i, article in enumerate(sorted_articles, 1):
            if article['status'] == 'success':
                total_words += article['word_count']
                min_words = min(min_words, article['word_count'])
                max_words = max(max_words, article['word_count'])
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ª–æ–≤
                if article['word_count'] >= 2000:
                    status_icon = "üü¢"  # –û—Ç–ª–∏—á–Ω–æ
                elif article['word_count'] >= 1500:
                    status_icon = "üü°"  # –•–æ—Ä–æ—à–æ
                elif article['word_count'] >= 1000:
                    status_icon = "üü†"  # –°—Ä–µ–¥–Ω–µ
                else:
                    status_icon = "üî¥"  # –ú–∞–ª–æ
                
                keyword = article['focus_keyword'] if article['focus_keyword'] else article['title']
                print(f"{i:<4} {article['id']:<6} {article['word_count']:<8} {status_icon} {keyword}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        avg_words = total_words / len(self.word_counts) if self.word_counts else 0
        
        print("\n" + "=" * 80)
        print("üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 80)
        print(f"üìö –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {len(self.word_counts)}")
        print(f"üìù –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {total_words:,}")
        print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {avg_words:.0f}")
        print(f"üìâ –ú–∏–Ω–∏–º—É–º —Å–ª–æ–≤ –≤ —Å—Ç–∞—Ç—å–µ: {min_words}")
        print(f"üìà –ú–∞–∫—Å–∏–º—É–º —Å–ª–æ–≤ –≤ —Å—Ç–∞—Ç—å–µ: {max_words}")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        excellent = sum(1 for a in self.word_counts if a['word_count'] >= 2000)
        good = sum(1 for a in self.word_counts if 1500 <= a['word_count'] < 2000)
        medium = sum(1 for a in self.word_counts if 1000 <= a['word_count'] < 1500)
        low = sum(1 for a in self.word_counts if a['word_count'] < 1000)
        
        print(f"\nüìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        print(f"üü¢ –û—Ç–ª–∏—á–Ω–æ (‚â•2000 —Å–ª–æ–≤): {excellent} —Å—Ç–∞—Ç–µ–π")
        print(f"üü° –•–æ—Ä–æ—à–æ (1500-1999 —Å–ª–æ–≤): {good} —Å—Ç–∞—Ç–µ–π")
        print(f"üü† –°—Ä–µ–¥–Ω–µ (1000-1499 —Å–ª–æ–≤): {medium} —Å—Ç–∞—Ç–µ–π")
        print(f"üî¥ –ú–∞–ª–æ (<1000 —Å–ª–æ–≤): {low} —Å—Ç–∞—Ç–µ–π")
        
        return sorted_articles
    
    def save_report_to_file(self, sorted_articles):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        report_filename = f"–û–¢–ß–ï–¢_–ö–û–õ–ò–ß–ï–°–¢–í–û_–°–õ–û–í_{timestamp}.md"
        
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write("# üìä –û–¢–ß–ï–¢: –ö–û–õ–ò–ß–ï–°–¢–í–û –°–õ–û–í –í 50 –°–¢–ê–¢–¨–Ø–•\n\n")
            f.write(f"**–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n")
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_words = sum(a['word_count'] for a in self.word_counts)
            avg_words = total_words / len(self.word_counts) if self.word_counts else 0
            min_words = min(a['word_count'] for a in self.word_counts)
            max_words = max(a['word_count'] for a in self.word_counts)
            
            f.write("## üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n")
            f.write(f"- **–í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π:** {len(self.word_counts)}\n")
            f.write(f"- **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤:** {total_words:,}\n")
            f.write(f"- **–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤:** {avg_words:.0f}\n")
            f.write(f"- **–ú–∏–Ω–∏–º—É–º —Å–ª–æ–≤:** {min_words}\n")
            f.write(f"- **–ú–∞–∫—Å–∏–º—É–º —Å–ª–æ–≤:** {max_words}\n\n")
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            excellent = sum(1 for a in self.word_counts if a['word_count'] >= 2000)
            good = sum(1 for a in self.word_counts if 1500 <= a['word_count'] < 2000)
            medium = sum(1 for a in self.word_counts if 1000 <= a['word_count'] < 1500)
            low = sum(1 for a in self.word_counts if a['word_count'] < 1000)
            
            f.write("## üìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú\n\n")
            f.write(f"- üü¢ **–û—Ç–ª–∏—á–Ω–æ (‚â•2000 —Å–ª–æ–≤):** {excellent} —Å—Ç–∞—Ç–µ–π ({excellent/len(self.word_counts)*100:.1f}%)\n")
            f.write(f"- üü° **–•–æ—Ä–æ—à–æ (1500-1999 —Å–ª–æ–≤):** {good} —Å—Ç–∞—Ç–µ–π ({good/len(self.word_counts)*100:.1f}%)\n")
            f.write(f"- üü† **–°—Ä–µ–¥–Ω–µ (1000-1499 —Å–ª–æ–≤):** {medium} —Å—Ç–∞—Ç–µ–π ({medium/len(self.word_counts)*100:.1f}%)\n")
            f.write(f"- üî¥ **–ú–∞–ª–æ (<1000 —Å–ª–æ–≤):** {low} —Å—Ç–∞—Ç–µ–π ({low/len(self.word_counts)*100:.1f}%)\n\n")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
            f.write("## üìã –î–ï–¢–ê–õ–¨–ù–´–ô –°–ü–ò–°–û–ö (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ª–æ–≤)\n\n")
            f.write("| ‚Ññ | ID | –°–ª–æ–≤ | –°—Ç–∞—Ç—É—Å | –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ / –ù–∞–∑–≤–∞–Ω–∏–µ |\n")
            f.write("|---|-------|------|--------|---------------------------|\n")
            
            for i, article in enumerate(sorted_articles, 1):
                if article['word_count'] >= 2000:
                    status = "üü¢ –û—Ç–ª–∏—á–Ω–æ"
                elif article['word_count'] >= 1500:
                    status = "üü° –•–æ—Ä–æ—à–æ"
                elif article['word_count'] >= 1000:
                    status = "üü† –°—Ä–µ–¥–Ω–µ"
                else:
                    status = "üî¥ –ú–∞–ª–æ"
                
                keyword = article['focus_keyword'] if article['focus_keyword'] else article['title']
                f.write(f"| {i} | {article['id']} | {article['word_count']} | {status} | {keyword} |\n")
            
            f.write(f"\n---\n\n*–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ {datetime.now().strftime('%d.%m.%Y –≤ %H:%M:%S')}*\n")
        
        return report_filename

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 80)
    print("üìä –ê–ù–ê–õ–ò–ó –ö–û–õ–ò–ß–ï–°–¢–í–ê –°–õ–û–í –í 50 –°–¢–ê–¢–¨–Ø–•")
    print("=" * 80)
    print("–ú–µ—Ç–æ–¥: –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —Å—Ç–∞—Ç–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö WordPress")
    print("=" * 80)
    
    analyzer = WordCountAnalyzer()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏
    analyzer.analyze_all_articles()
    
    # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    sorted_articles = analyzer.print_detailed_report()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    report_file = analyzer.save_report_to_file(sorted_articles)
    
    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_file}")
    print(f"\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")

if __name__ == "__main__":
    main()
