#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π E2E —Ç–µ—Å—Ç –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∫–æ—Ä–∑–∏–Ω—ã –≤ –º–æ–±–∏–ª—å–Ω–æ–π –Ω–∏–∂–Ω–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
–ê–≤—Ç–æ—Ä: EcopackPro Dev Team
–î–∞—Ç–∞: 2025-10-30
"""

import sys
import os
import subprocess
import json
import time
import requests
from datetime import datetime

class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    MAGENTA = '\033[95m'
    RESET = '\033[0m'
    BOLD = '\033[1m'

class CompleteMobileCartTest:
    def __init__(self):
        self.site_path = '/var/www/fastuser/data/www/ecopackpro.ru'
        self.site_url = 'https://ecopackpro.ru'
        self.results = []
        self.start_time = None
        
    def log(self, message, color=Colors.RESET):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–º"""
        print(f"{color}{message}{Colors.RESET}")
    
    def test_files_exist(self):
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
        self.log("\nüìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤", Colors.BLUE + Colors.BOLD)
        
        files = {
            'mu-plugin (PHP)': 'wp-content/mu-plugins/ecopackpro-mobile-cart-bridge.php',
            'Bridge Script (JS)': 'wp-content/mu-plugins/mobile-webview-cart-bridge.js',
            'Footer Badge Script (JS)': 'wp-content/mu-plugins/mobile-footer-cart-badge.js',
            'Footer Badge CSS': 'wp-content/mu-plugins/mobile-footer-cart-badge.css',
        }
        
        all_exists = True
        for name, path in files.items():
            full_path = f'{self.site_path}/{path}'
            exists = os.path.exists(full_path)
            status = '‚úÖ' if exists else '‚ùå'
            size = os.path.getsize(full_path) / 1024 if exists else 0
            
            self.log(f"  {status} {name}: {size:.2f} KB", Colors.GREEN if exists else Colors.RED)
            
            if not exists:
                all_exists = False
        
        if all_exists:
            self.results.append({
                'test': 'All files exist',
                'status': 'PASS',
                'message': '–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã'
            })
            self.log("\n‚úÖ PASS: –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ", Colors.GREEN)
            return True
        else:
            self.results.append({
                'test': 'All files exist',
                'status': 'FAIL',
                'message': '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'
            })
            self.log("\n‚ùå FAIL: –ù–µ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã", Colors.RED)
            return False
    
    def test_scripts_loaded_on_page(self):
        """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        self.log("\nüìã –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤", Colors.BLUE + Colors.BOLD)
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º mobile user agent
            headers = {
                'User-Agent': 'Mozilla/5.0 (Linux; Android 10; SM-G973F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36'
            }
            response = requests.get(self.site_url, headers=headers, timeout=10, verify=False)
            html = response.text
            
            scripts_loaded = {
                'mobile-webview-cart-bridge.js': 'mobile-webview-cart-bridge.js' in html,
                'mobile-footer-cart-badge.js': 'mobile-footer-cart-badge.js' in html,
                'mobile-footer-cart-badge.css': 'mobile-footer-cart-badge.css' in html,
                'data-cart-count': 'data-cart-count' in html,
                'initialCartCount': 'initialCartCount' in html,
            }
            
            all_loaded = all(scripts_loaded.values())
            
            for script, loaded in scripts_loaded.items():
                status = '‚úÖ' if loaded else '‚ùå'
                self.log(f"  {status} {script}", Colors.GREEN if loaded else Colors.RED)
            
            if all_loaded:
                self.results.append({
                    'test': 'Scripts loaded on page',
                    'status': 'PASS',
                    'message': '–í—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã'
                })
                self.log("\n‚úÖ PASS: –í—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è", Colors.GREEN)
                return True
            else:
                self.results.append({
                    'test': 'Scripts loaded on page',
                    'status': 'FAIL',
                    'message': '–ù–µ –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã'
                })
                self.log("\n‚ùå FAIL: –ù–µ –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è", Colors.RED)
                return False
        except Exception as e:
            self.results.append({
                'test': 'Scripts loaded on page',
                'status': 'FAIL',
                'message': f'–û—à–∏–±–∫–∞: {str(e)}'
            })
            self.log(f"\n‚ùå FAIL: {str(e)}", Colors.RED)
            return False
    
    def test_mobile_footer_structure(self):
        """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–±–∏–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        self.log("\nüìã –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", Colors.BLUE + Colors.BOLD)
        
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15'
            }
            response = requests.get(self.site_url, headers=headers, timeout=10, verify=False)
            html = response.text
            
            elements_found = {
                'ush_vwrapper_5 (–ö–æ—Ä–∑–∏–Ω–∞ wrapper)': 'ush_vwrapper_5' in html,
                'ush_text_8 (–ö–æ—Ä–∑–∏–Ω–∞ text)': 'ush_text_8' in html,
                'hidden_for_laptops': 'hidden_for_laptops' in html,
                '–¢–µ–∫—Å—Ç "–ö–æ—Ä–∑–∏–Ω–∞"': '–ö–æ—Ä–∑–∏–Ω–∞' in html,
            }
            
            all_found = all(elements_found.values())
            
            for element, found in elements_found.items():
                status = '‚úÖ' if found else '‚ùå'
                self.log(f"  {status} {element}", Colors.GREEN if found else Colors.RED)
            
            if all_found:
                self.results.append({
                    'test': 'Mobile footer structure',
                    'status': 'PASS',
                    'message': '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–±–∏–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω–∞'
                })
                self.log("\n‚úÖ PASS: –ú–æ–±–∏–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞", Colors.GREEN)
                return True
            else:
                self.results.append({
                    'test': 'Mobile footer structure',
                    'status': 'WARN',
                    'message': '–ù–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –µ—Å—Ç—å'
                })
                self.log("\n‚ö†Ô∏è  WARN: –ù–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –µ—Å—Ç—å", Colors.YELLOW)
                return True
        except Exception as e:
            self.results.append({
                'test': 'Mobile footer structure',
                'status': 'FAIL',
                'message': f'–û—à–∏–±–∫–∞: {str(e)}'
            })
            self.log(f"\n‚ùå FAIL: {str(e)}", Colors.RED)
            return False
    
    def test_api_endpoints(self):
        """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints"""
        self.log("\nüìã –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints", Colors.BLUE + Colors.BOLD)
        
        try:
            # –¢–µ—Å—Ç /cart/count
            url_count = f'{self.site_url}/wp-json/ecopackpro/v1/cart/count'
            response_count = requests.get(url_count, timeout=10, verify=False)
            
            count_works = response_count.status_code == 200 and 'count' in response_count.json()
            
            self.log(f"  {'‚úÖ' if count_works else '‚ùå'} /cart/count: {response_count.status_code}", 
                    Colors.GREEN if count_works else Colors.RED)
            
            # –¢–µ—Å—Ç /cart/details
            url_details = f'{self.site_url}/wp-json/ecopackpro/v1/cart/details'
            response_details = requests.get(url_details, timeout=10, verify=False)
            
            details_works = response_details.status_code == 200 and 'items' in response_details.json()
            
            self.log(f"  {'‚úÖ' if details_works else '‚ùå'} /cart/details: {response_details.status_code}", 
                    Colors.GREEN if details_works else Colors.RED)
            
            if count_works and details_works:
                self.results.append({
                    'test': 'API endpoints',
                    'status': 'PASS',
                    'message': '–û–±–∞ API endpoint —Ä–∞–±–æ—Ç–∞—é—Ç'
                })
                self.log("\n‚úÖ PASS: API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç", Colors.GREEN)
                return True
            else:
                self.results.append({
                    'test': 'API endpoints',
                    'status': 'FAIL',
                    'message': '–ù–µ –≤—Å–µ API —Ä–∞–±–æ—Ç–∞—é—Ç'
                })
                self.log("\n‚ùå FAIL: –ü—Ä–æ–±–ª–µ–º—ã —Å API", Colors.RED)
                return False
        except Exception as e:
            self.results.append({
                'test': 'API endpoints',
                'status': 'FAIL',
                'message': f'–û—à–∏–±–∫–∞: {str(e)}'
            })
            self.log(f"\n‚ùå FAIL: {str(e)}", Colors.RED)
            return False
    
    def test_css_loaded(self):
        """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSS –¥–ª—è badge"""
        self.log("\nüìã –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS –¥–ª—è badge", Colors.BLUE + Colors.BOLD)
        
        try:
            css_url = f'{self.site_url}/wp-content/mu-plugins/mobile-footer-cart-badge.css'
            response = requests.get(css_url, timeout=10, verify=False)
            
            if response.status_code == 200:
                css_content = response.text
                has_badge_class = '.mobile-cart-badge' in css_content
                has_styles = 'position: absolute' in css_content
                
                if has_badge_class and has_styles:
                    self.results.append({
                        'test': 'CSS loaded',
                        'status': 'PASS',
                        'message': 'CSS –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ —Å—Ç–∏–ª–∏'
                    })
                    self.log("‚úÖ PASS: CSS –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π", Colors.GREEN)
                    return True
                else:
                    self.results.append({
                        'test': 'CSS content',
                        'status': 'WARN',
                        'message': 'CSS –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–ø–æ–ª–Ω–∞—è'
                    })
                    self.log("‚ö†Ô∏è  WARN: CSS –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞", Colors.YELLOW)
                    return True
            else:
                self.results.append({
                    'test': 'CSS loaded',
                    'status': 'FAIL',
                    'message': f'CSS –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: HTTP {response.status_code}'
                })
                self.log(f"‚ùå FAIL: CSS –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω ({response.status_code})", Colors.RED)
                return False
        except Exception as e:
            self.results.append({
                'test': 'CSS loaded',
                'status': 'FAIL',
                'message': f'–û—à–∏–±–∫–∞: {str(e)}'
            })
            self.log(f"‚ùå FAIL: {str(e)}", Colors.RED)
            return False
    
    def test_javascript_syntax(self):
        """–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JavaScript"""
        self.log("\nüìã –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JavaScript", Colors.BLUE + Colors.BOLD)
        
        js_files = [
            'wp-content/mu-plugins/mobile-webview-cart-bridge.js',
            'wp-content/mu-plugins/mobile-footer-cart-badge.js',
        ]
        
        all_valid = True
        for js_file in js_files:
            full_path = f'{self.site_path}/{js_file}'
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ node (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            result = subprocess.run(
                ['node', '--check', full_path],
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                self.log(f"  ‚úÖ {os.path.basename(js_file)}: OK", Colors.GREEN)
            else:
                self.log(f"  ‚ùå {os.path.basename(js_file)}: –û—à–∏–±–∫–∞", Colors.RED)
                all_valid = False
        
        if all_valid:
            self.results.append({
                'test': 'JavaScript syntax',
                'status': 'PASS',
                'message': '–°–∏–Ω—Ç–∞–∫—Å–∏—Å –≤—Å–µ—Ö JS —Ñ–∞–π–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω'
            })
            self.log("\n‚úÖ PASS: JavaScript —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω", Colors.GREEN)
            return True
        else:
            self.results.append({
                'test': 'JavaScript syntax',
                'status': 'FAIL',
                'message': '–ï—Å—Ç—å –æ—à–∏–±–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞'
            })
            self.log("\n‚ùå FAIL: –û—à–∏–±–∫–∏ –≤ JavaScript", Colors.RED)
            return False
    
    def test_wordpress_integration(self):
        """–¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å WordPress"""
        self.log("\nüìã –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å WordPress", Colors.BLUE + Colors.BOLD)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
            result = subprocess.run(
                ['sudo', '-u', 'www-data', 'wp', 'eval',
                 'echo (function_exists("ecopackpro_api_get_cart_count") ? "1" : "0") . "\n"; '
                 'echo (function_exists("ecopackpro_enqueue_mobile_cart_bridge") ? "1" : "0") . "\n"; '
                 'echo (function_exists("ecopackpro_output_cart_count_data") ? "1" : "0");',
                 '--path=' + self.site_path],
                capture_output=True,
                text=True,
                cwd=self.site_path
            )
            
            lines = result.stdout.strip().split('\n')
            functions_count = sum(1 for line in lines if line.strip() == '1')
            
            if functions_count >= 2:  # –•–æ—Ç—è –±—ã 2 –∏–∑ 3 —Ñ—É–Ω–∫—Ü–∏–π
                self.results.append({
                    'test': 'WordPress integration',
                    'status': 'PASS',
                    'message': f'–§—É–Ω–∫—Ü–∏–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ({functions_count}/3)'
                })
                self.log(f"‚úÖ PASS: WordPress —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç ({functions_count}/3)", Colors.GREEN)
                return True
            else:
                self.results.append({
                    'test': 'WordPress integration',
                    'status': 'FAIL',
                    'message': f'–§—É–Ω–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ({functions_count}/3)'
                })
                self.log(f"‚ùå FAIL: –§—É–Ω–∫—Ü–∏–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ({functions_count}/3)", Colors.RED)
                return False
        except Exception as e:
            self.results.append({
                'test': 'WordPress integration',
                'status': 'WARN',
                'message': f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å: {str(e)}'
            })
            self.log(f"‚ö†Ô∏è  WARN: {str(e)}", Colors.YELLOW)
            return True
    
    def test_mobile_page_rendering(self):
        """–¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –º–æ–±–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        self.log("\nüìã –¢–µ—Å—Ç 8: –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –º–æ–±–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã", Colors.BLUE + Colors.BOLD)
        
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Linux; Android 10) AppleWebKit/537.36'
            }
            response = requests.get(self.site_url, headers=headers, timeout=10, verify=False)
            html = response.text
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∏–∂–Ω–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            has_nav_structure = all([
                'hidden_for_laptops' in html,
                'ush_vwrapper' in html,
                '–ö–æ—Ä–∑–∏–Ω–∞' in html,
                '–ì–ª–∞–≤–Ω–∞—è' in html,
                '–ö–∞—Ç–∞–ª–æ–≥' in html
            ])
            
            if has_nav_structure:
                self.results.append({
                    'test': 'Mobile page rendering',
                    'status': 'PASS',
                    'message': '–ú–æ–±–∏–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
                })
                self.log("‚úÖ PASS: –ú–æ–±–∏–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è", Colors.GREEN)
                return True
            else:
                self.results.append({
                    'test': 'Mobile page rendering',
                    'status': 'FAIL',
                    'message': '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                })
                self.log("‚ùå FAIL: –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", Colors.RED)
                return False
        except Exception as e:
            self.results.append({
                'test': 'Mobile page rendering',
                'status': 'FAIL',
                'message': f'–û—à–∏–±–∫–∞: {str(e)}'
            })
            self.log(f"‚ùå FAIL: {str(e)}", Colors.RED)
            return False
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        self.log("\n" + "="*80, Colors.BOLD)
        self.log("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ E2E –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø", Colors.BOLD + Colors.BLUE)
        self.log("="*80, Colors.BOLD)
        
        total = len(self.results)
        passed = sum(1 for r in self.results if r['status'] == 'PASS')
        failed = sum(1 for r in self.results if r['status'] == 'FAIL')
        warned = sum(1 for r in self.results if r['status'] == 'WARN')
        
        self.log(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        self.log(f"–£—Å–ø–µ—à–Ω–æ: {passed}", Colors.GREEN)
        if warned > 0:
            self.log(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warned}", Colors.YELLOW)
        if failed > 0:
            self.log(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}", Colors.RED)
        
        self.log("\n–î–µ—Ç–∞–ª–∏:", Colors.BOLD)
        for result in self.results:
            status_color = Colors.GREEN if result['status'] == 'PASS' else \
                          Colors.YELLOW if result['status'] == 'WARN' else Colors.RED
            
            self.log(f"\n  [{result['status']}] {result['test']}", status_color)
            self.log(f"    ‚îî‚îÄ {result['message']}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
        report_file = f'{self.site_path}/mobile_footer_badge_test_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump({
                'timestamp': datetime.now().isoformat(),
                'duration_seconds': time.time() - self.start_time,
                'total_tests': total,
                'passed': passed,
                'failed': failed,
                'warned': warned,
                'results': self.results
            }, f, indent=2, ensure_ascii=False)
        
        self.log(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}", Colors.BLUE)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.log("\n" + "="*80, Colors.BOLD)
        self.log("üì± –ò–ù–°–¢–†–£–ö–¶–ò–Ø –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ù–ê –£–°–¢–†–û–ô–°–¢–í–ï", Colors.MAGENTA + Colors.BOLD)
        self.log("="*80, Colors.BOLD)
        self.log("\n1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–µ:", Colors.CYAN)
        self.log(f"   {self.site_url}")
        self.log("\n2. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É", Colors.CYAN)
        self.log("\n3. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –ù–ò–ñ–ù–Æ–Æ –ù–ê–í–ò–ì–ê–¶–ò–Æ (–≤ —Å–∞–º–æ–º –Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞)", Colors.CYAN)
        self.log("\n4. –ù–∞ –∏–∫–æ–Ω–∫–µ/—Ç–µ–∫—Å—Ç–µ '–ö–æ—Ä–∑–∏–Ω–∞' –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –ö–†–ê–°–ù–´–ô BADGE —Å —Ü–∏—Ñ—Ä–æ–π!", Colors.CYAN)
        self.log("\n5. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞) –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏:", Colors.CYAN)
        self.log("   [Mobile Footer Badge] Initializing...", Colors.YELLOW)
        self.log("   [Mobile Footer Badge] Found cart wrapper: ush_vwrapper_5", Colors.YELLOW)
        self.log("   [Mobile Footer Badge] Badge element created", Colors.YELLOW)
        self.log("   [Mobile Footer Badge] Updating badge: 0 ‚Üí 1", Colors.YELLOW)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        if failed == 0:
            self.log("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!", Colors.GREEN + Colors.BOLD)
            return 0
        else:
            self.log(f"\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´: {failed} —Ç–µ—Å—Ç(–æ–≤) –ø—Ä–æ–≤–∞–ª–µ–Ω–æ", Colors.RED + Colors.BOLD)
            return 1
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.start_time = time.time()
        
        self.log("="*80, Colors.BOLD)
        self.log("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MOBILE FOOTER CART BADGE", Colors.BOLD + Colors.BLUE)
        self.log("="*80, Colors.BOLD)
        self.log(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.log(f"–°–∞–π—Ç: {self.site_url}")
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        self.test_files_exist()
        self.test_scripts_loaded_on_page()
        self.test_mobile_footer_structure()
        self.test_api_endpoints()
        self.test_css_loaded()
        self.test_javascript_syntax()
        self.test_wordpress_integration()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        return self.generate_report()

if __name__ == '__main__':
    # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
    import urllib3
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    
    runner = CompleteMobileCartTest()
    exit_code = runner.run_all_tests()
    sys.exit(exit_code)

