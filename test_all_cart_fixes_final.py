#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–´–ô –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ö–û–†–ó–ò–ù–´
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ badge –∫–æ—Ä–∑–∏–Ω—ã
2. –°—Ç–∏–ª–∏ dropdown –∫–æ—Ä–∑–∏–Ω—ã
3. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ wishlist
4. –°–æ–∑–¥–∞–Ω–∏–µ mobile badge
5. –†–∞–±–æ—Ç—É –Ω–∞ desktop –∏ mobile
"""

import sys
import os
import subprocess
import json
import time
import requests
from datetime import datetime

class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    MAGENTA = '\033[95m'
    RESET = '\033[0m'
    BOLD = '\033[1m'

class FinalCartTest:
    def __init__(self):
        self.site_path = '/var/www/fastuser/data/www/ecopackpro.ru'
        self.site_url = 'https://ecopackpro.ru'
        self.results = []
        self.start_time = None
        
    def log(self, message, color=Colors.RESET):
        print(f"{color}{message}{Colors.RESET}")
    
    def test_css_files_loaded(self):
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSS"""
        self.log("\nüìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS —Ñ–∞–π–ª–æ–≤", Colors.BLUE + Colors.BOLD)
        
        try:
            response = requests.get(self.site_url, timeout=10, verify=False)
            html = response.text
            
            has_fix_css = 'fix-all-cart-issues.css' in html
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º CSS —Ñ–∞–π–ª
            css_response = requests.get(f'{self.site_url}/wp-content/mu-plugins/fix-all-cart-issues.css', 
                                       timeout=10, verify=False)
            css_works = css_response.status_code == 200
            
            self.log(f"  {'‚úÖ' if has_fix_css else '‚ùå'} CSS –ø–æ–¥–∫–ª—é—á–µ–Ω –≤ HTML", 
                    Colors.GREEN if has_fix_css else Colors.RED)
            self.log(f"  {'‚úÖ' if css_works else '‚ùå'} CSS —Ñ–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω ({css_response.status_code})", 
                    Colors.GREEN if css_works else Colors.RED)
            
            if has_fix_css and css_works:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ CSS
                css_content = css_response.text
                has_wishlist_fix = 'wishlist_products_counter .mobile-cart-badge' in css_content
                has_dropdown_fix = '.w-cart-dropdown' in css_content
                has_mobile_badge = '.mobile-cart-badge' in css_content
                
                self.log(f"  {'‚úÖ' if has_wishlist_fix else '‚ùå'} –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ wishlist –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è", 
                        Colors.GREEN if has_wishlist_fix else Colors.RED)
                self.log(f"  {'‚úÖ' if has_dropdown_fix else '‚ùå'} –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ dropdown", 
                        Colors.GREEN if has_dropdown_fix else Colors.RED)
                self.log(f"  {'‚úÖ' if has_mobile_badge else '‚ùå'} Mobile badge —Å—Ç–∏–ª–∏", 
                        Colors.GREEN if has_mobile_badge else Colors.RED)
                
                all_ok = has_wishlist_fix and has_dropdown_fix and has_mobile_badge
                
                if all_ok:
                    self.results.append({
                        'test': 'CSS files loaded',
                        'status': 'PASS',
                        'message': '–í—Å–µ CSS –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã'
                    })
                    self.log("\n‚úÖ PASS: CSS –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω", Colors.GREEN)
                    return True
                else:
                    self.results.append({
                        'test': 'CSS content',
                        'status': 'WARN',
                        'message': 'CSS –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –Ω–µ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã'
                    })
                    self.log("\n‚ö†Ô∏è  WARN: CSS –Ω–µ–ø–æ–ª–Ω—ã–π", Colors.YELLOW)
                    return True
            else:
                self.results.append({
                    'test': 'CSS files loaded',
                    'status': 'FAIL',
                    'message': 'CSS –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è'
                })
                self.log("\n‚ùå FAIL: CSS –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω", Colors.RED)
                return False
        except Exception as e:
            self.results.append({
                'test': 'CSS files loaded',
                'status': 'FAIL',
                'message': f'–û—à–∏–±–∫–∞: {str(e)}'
            })
            self.log(f"‚ùå FAIL: {str(e)}", Colors.RED)
            return False
    
    def test_js_fixed_version_loaded(self):
        """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ JS"""
        self.log("\nüìã –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ mobile-footer-cart-badge-fixed.js", Colors.BLUE + Colors.BOLD)
        
        try:
            response = requests.get(self.site_url, timeout=10, verify=False)
            html = response.text
            
            has_fixed_js = 'mobile-footer-cart-badge-fixed.js' in html
            
            self.log(f"  {'‚úÖ' if has_fixed_js else '‚ùå'} –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π JS –ø–æ–¥–∫–ª—é—á–µ–Ω", 
                    Colors.GREEN if has_fixed_js else Colors.RED)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
            if has_fixed_js:
                js_response = requests.get(
                    f'{self.site_url}/wp-content/mu-plugins/mobile-footer-cart-badge-fixed.js',
                    timeout=10, verify=False
                )
                js_works = js_response.status_code == 200
                
                if js_works:
                    js_content = js_response.text
                    has_v2_marker = 'Mobile Footer Badge v2' in js_content
                    has_retry_logic = 'tryInit' in js_content or 'attempts' in js_content
                    
                    self.log(f"  {'‚úÖ' if has_v2_marker else '‚ùå'} –í–µ—Ä—Å–∏—è 2.0", 
                            Colors.GREEN if has_v2_marker else Colors.RED)
                    self.log(f"  {'‚úÖ' if has_retry_logic else '‚ùå'} Retry –ª–æ–≥–∏–∫–∞", 
                            Colors.GREEN if has_retry_logic else Colors.RED)
                    
                    if has_v2_marker and has_retry_logic:
                        self.results.append({
                            'test': 'JS fixed version loaded',
                            'status': 'PASS',
                            'message': '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π JS –∑–∞–≥—Ä—É–∂–µ–Ω (v2.0)'
                        })
                        self.log("\n‚úÖ PASS: JS v2.0 –∞–∫—Ç–∏–≤–µ–Ω", Colors.GREEN)
                        return True
            
            self.results.append({
                'test': 'JS fixed version loaded',
                'status': 'FAIL',
                'message': '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π JS –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω'
            })
            self.log("\n‚ùå FAIL: JS –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω", Colors.RED)
            return False
        except Exception as e:
            self.results.append({
                'test': 'JS fixed version loaded',
                'status': 'FAIL',
                'message': f'–û—à–∏–±–∫–∞: {str(e)}'
            })
            self.log(f"‚ùå FAIL: {str(e)}", Colors.RED)
            return False
    
    def test_no_wishlist_duplication(self):
        """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ wishlist"""
        self.log("\nüìã –¢–µ—Å—Ç 3: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ wishlist", Colors.BLUE + Colors.BOLD)
        
        try:
            css_response = requests.get(
                f'{self.site_url}/wp-content/mu-plugins/fix-all-cart-issues.css',
                timeout=10, verify=False
            )
            
            if css_response.status_code == 200:
                css = css_response.text
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è badge –Ω–∞ wishlist
                has_wishlist_hide = '.wishlist_products_counter .mobile-cart-badge' in css and 'display: none' in css
                
                if has_wishlist_hide:
                    self.results.append({
                        'test': 'No wishlist duplication',
                        'status': 'PASS',
                        'message': 'CSS –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–æ'
                    })
                    self.log("‚úÖ PASS: –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞", Colors.GREEN)
                    return True
                else:
                    self.results.append({
                        'test': 'No wishlist duplication',
                        'status': 'FAIL',
                        'message': 'CSS –ø—Ä–∞–≤–∏–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                    })
                    self.log("‚ùå FAIL: –ù–µ—Ç –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è", Colors.RED)
                    return False
        except Exception as e:
            self.results.append({
                'test': 'No wishlist duplication',
                'status': 'FAIL',
                'message': f'–û—à–∏–±–∫–∞: {str(e)}'
            })
            self.log(f"‚ùå FAIL: {str(e)}", Colors.RED)
            return False
    
    def test_dropdown_positioning(self):
        """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è dropdown"""
        self.log("\nüìã –¢–µ—Å—Ç 4: –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ dropdown –∫–æ—Ä–∑–∏–Ω—ã", Colors.BLUE + Colors.BOLD)
        
        try:
            css_response = requests.get(
                f'{self.site_url}/wp-content/mu-plugins/fix-all-cart-issues.css',
                timeout=10, verify=False
            )
            
            if css_response.status_code == 200:
                css = css_response.text
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è dropdown
                has_dropdown_rules = '.w-cart-dropdown' in css
                has_max_width = 'max-width: 350px' in css
                has_positioning = 'right: 0' in css and 'top: 100%' in css
                has_mobile_fix = 'position: fixed' in css and '@media (max-width: 768px)' in css
                
                self.log(f"  {'‚úÖ' if has_dropdown_rules else '‚ùå'} Dropdown CSS –Ω–∞–π–¥–µ–Ω", 
                        Colors.GREEN if has_dropdown_rules else Colors.RED)
                self.log(f"  {'‚úÖ' if has_max_width else '‚ùå'} –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã", 
                        Colors.GREEN if has_max_width else Colors.RED)
                self.log(f"  {'‚úÖ' if has_positioning else '‚ùå'} –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", 
                        Colors.GREEN if has_positioning else Colors.RED)
                self.log(f"  {'‚úÖ' if has_mobile_fix else '‚ùå'} Mobile –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", 
                        Colors.GREEN if has_mobile_fix else Colors.RED)
                
                if has_dropdown_rules and has_positioning:
                    self.results.append({
                        'test': 'Dropdown positioning',
                        'status': 'PASS',
                        'message': 'Dropdown –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ'
                    })
                    self.log("\n‚úÖ PASS: Dropdown –∏—Å–ø—Ä–∞–≤–ª–µ–Ω", Colors.GREEN)
                    return True
                else:
                    self.results.append({
                        'test': 'Dropdown positioning',
                        'status': 'FAIL',
                        'message': 'Dropdown CSS –Ω–µ–ø–æ–ª–Ω—ã–π'
                    })
                    self.log("\n‚ùå FAIL: Dropdown CSS –ø—Ä–æ–±–ª–µ–º–Ω—ã–π", Colors.RED)
                    return False
        except Exception as e:
            self.results.append({
                'test': 'Dropdown positioning',
                'status': 'FAIL',
                'message': f'–û—à–∏–±–∫–∞: {str(e)}'
            })
            self.log(f"‚ùå FAIL: {str(e)}", Colors.RED)
            return False
    
    def test_mobile_badge_script(self):
        """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ mobile badge —Å–∫—Ä–∏–ø—Ç–∞"""
        self.log("\nüìã –¢–µ—Å—Ç 5: Mobile badge —Å–∫—Ä–∏–ø—Ç", Colors.BLUE + Colors.BOLD)
        
        try:
            js_response = requests.get(
                f'{self.site_url}/wp-content/mu-plugins/mobile-footer-cart-badge-fixed.js',
                timeout=10, verify=False
            )
            
            if js_response.status_code == 200:
                js = js_response.text
                
                has_init = 'CartBadgeManager' in js and 'init' in js
                has_retry = 'tryInit' in js or 'maxAttempts' in js
                has_multiple_methods = js.count('querySelector') >= 3
                
                self.log(f"  {'‚úÖ' if has_init else '‚ùå'} CartBadgeManager –∫–ª–∞—Å—Å", 
                        Colors.GREEN if has_init else Colors.RED)
                self.log(f"  {'‚úÖ' if has_retry else '‚ùå'} Retry –ª–æ–≥–∏–∫–∞", 
                        Colors.GREEN if has_retry else Colors.RED)
                self.log(f"  {'‚úÖ' if has_multiple_methods else '‚ùå'} –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞", 
                        Colors.GREEN if has_multiple_methods else Colors.RED)
                
                if has_init and has_retry:
                    self.results.append({
                        'test': 'Mobile badge script',
                        'status': 'PASS',
                        'message': 'Mobile badge —Å–∫—Ä–∏–ø—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω'
                    })
                    self.log("\n‚úÖ PASS: Mobile —Å–∫—Ä–∏–ø—Ç –≥–æ—Ç–æ–≤", Colors.GREEN)
                    return True
                else:
                    self.results.append({
                        'test': 'Mobile badge script',
                        'status': 'FAIL',
                        'message': 'Mobile —Å–∫—Ä–∏–ø—Ç –Ω–µ–ø–æ–ª–Ω—ã–π'
                    })
                    self.log("\n‚ùå FAIL: Mobile —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–π", Colors.RED)
                    return False
        except Exception as e:
            self.results.append({
                'test': 'Mobile badge script',
                'status': 'FAIL',
                'message': f'–û—à–∏–±–∫–∞: {str(e)}'
            })
            self.log(f"‚ùå FAIL: {str(e)}", Colors.RED)
            return False
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        self.log("\n" + "="*80, Colors.BOLD)
        self.log("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô", Colors.BOLD + Colors.BLUE)
        self.log("="*80, Colors.BOLD)
        
        total = len(self.results)
        passed = sum(1 for r in self.results if r['status'] == 'PASS')
        failed = sum(1 for r in self.results if r['status'] == 'FAIL')
        warned = sum(1 for r in self.results if r['status'] == 'WARN')
        
        self.log(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        self.log(f"–£—Å–ø–µ—à–Ω–æ: {passed}", Colors.GREEN)
        if warned > 0:
            self.log(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warned}", Colors.YELLOW)
        if failed > 0:
            self.log(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}", Colors.RED)
        
        self.log("\n–î–µ—Ç–∞–ª–∏:", Colors.BOLD)
        for result in self.results:
            status_color = Colors.GREEN if result['status'] == 'PASS' else \
                          Colors.YELLOW if result['status'] == 'WARN' else Colors.RED
            
            self.log(f"\n  [{result['status']}] {result['test']}", status_color)
            self.log(f"    ‚îî‚îÄ {result['message']}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        report_file = f'{self.site_path}/final_cart_fixes_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump({
                'timestamp': datetime.now().isoformat(),
                'duration_seconds': time.time() - self.start_time,
                'total_tests': total,
                'passed': passed,
                'failed': failed,
                'warned': warned,
                'results': self.results
            }, f, indent=2, ensure_ascii=False)
        
        self.log(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}", Colors.BLUE)
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        self.log("\n" + "="*80, Colors.BOLD)
        self.log("üß™ –†–£–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ù–ê –£–°–¢–†–û–ô–°–¢–í–ê–•", Colors.MAGENTA + Colors.BOLD)
        self.log("="*80, Colors.BOLD)
        
        self.log("\nüì± –ù–ê –ú–û–ë–ò–õ–¨–ù–û–ú –¢–ï–õ–ï–§–û–ù–ï:", Colors.CYAN + Colors.BOLD)
        self.log("1. –û—Ç–∫—Ä–æ–π—Ç–µ https://ecopackpro.ru", Colors.CYAN)
        self.log("2. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É", Colors.CYAN)
        self.log("3. –°–ú–û–¢–†–ò–¢–ï –ù–ê –ù–ò–ñ–ù–Æ–Æ –ü–ê–ù–ï–õ–¨ (—Å–∞–º—ã–π –Ω–∏–∑ —ç–∫—Ä–∞–Ω–∞)", Colors.CYAN)
        self.log("4. ‚úÖ –ù–∞ '–ö–æ—Ä–∑–∏–Ω–∞' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ö–†–ê–°–ù–´–ô badge —Å —Ü–∏—Ñ—Ä–æ–π", Colors.GREEN)
        self.log("5. ‚úÖ –ù–∞ '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ' –ù–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥—É–±–ª–µ–π (—Ç–æ–ª—å–∫–æ –∑–µ–ª–µ–Ω—ã–π)", Colors.GREEN)
        
        self.log("\nüíª –ù–ê DESKTOP:", Colors.CYAN + Colors.BOLD)
        self.log("1. –û—Ç–∫—Ä–æ–π—Ç–µ https://ecopackpro.ru", Colors.CYAN)
        self.log("2. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É", Colors.CYAN)
        self.log("3. ‚úÖ Badge –≤ header –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –°–†–ê–ó–£", Colors.GREEN)
        self.log("4. –ù–∞–≤–µ–¥–∏—Ç–µ –º—ã—à—å –Ω–∞ –∫–æ—Ä–∑–∏–Ω—É", Colors.CYAN)
        self.log("5. ‚úÖ Dropdown –ù–ï –¥–æ–ª–∂–µ–Ω –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ —ç–∫—Ä–∞–Ω", Colors.GREEN)
        self.log("6. ‚úÖ –°—Ç–∏–ª–∏ dropdown –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Å–∞–π—Ç–æ–º", Colors.GREEN)
        
        if failed == 0:
            self.log("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!", Colors.GREEN + Colors.BOLD)
            return 0
        else:
            self.log(f"\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–´: {failed} —Ç–µ—Å—Ç(–æ–≤) –ø—Ä–æ–≤–∞–ª–µ–Ω–æ", Colors.RED + Colors.BOLD)
            return 1
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.start_time = time.time()
        
        self.log("="*80, Colors.BOLD)
        self.log("üöÄ –§–ò–ù–ê–õ–¨–ù–û–ï –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï", Colors.BOLD + Colors.BLUE)
        self.log("="*80, Colors.BOLD)
        self.log(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.log(f"–°–∞–π—Ç: {self.site_url}")
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        self.test_css_files_loaded()
        self.test_js_fixed_version_loaded()
        self.test_no_wishlist_duplication()
        self.test_dropdown_positioning()
        self.test_mobile_badge_script()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        return self.generate_report()

if __name__ == '__main__':
    import urllib3
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    
    runner = FinalCartTest()
    exit_code = runner.run_all_tests()
    sys.exit(exit_code)

