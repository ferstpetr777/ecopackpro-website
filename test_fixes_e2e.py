#!/usr/bin/env python3
"""
E2E —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞–Ω–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏ –∫–æ—Ä–∑–∏–Ω—ã WooCommerce
–ê–≤—Ç–æ—Ä: EcopackPro Dev Team
–î–∞—Ç–∞: 2025-10-30
"""

import sys
import os
import subprocess
import json
import time
from datetime import datetime
from pathlib import Path

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    RESET = '\033[0m'
    BOLD = '\033[1m'

class E2ETestRunner:
    def __init__(self):
        self.site_path = '/var/www/fastuser/data/www/ecopackpro.ru'
        self.debug_log = f'{self.site_path}/wp-content/debug.log'
        self.site_url = 'https://ecopackpro.ru'
        self.results = []
        self.start_time = None
        
    def log(self, message, color=Colors.RESET):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–º"""
        print(f"{color}{message}{Colors.RESET}")
    
    def test_mu_plugin_loaded(self):
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ mu-plugin"""
        self.log("\nüìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ mu-plugin", Colors.BLUE + Colors.BOLD)
        
        mu_plugin_path = f'{self.site_path}/wp-content/mu-plugins/fix-early-translations-and-cart.php'
        
        if not os.path.exists(mu_plugin_path):
            self.results.append({
                'test': 'MU Plugin Exists',
                'status': 'FAIL',
                'message': '–§–∞–π–ª mu-plugin –Ω–µ –Ω–∞–π–¥–µ–Ω'
            })
            self.log("‚ùå FAIL: –§–∞–π–ª mu-plugin –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.RED)
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ PHP
        result = subprocess.run(
            ['php', '-l', mu_plugin_path],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            self.results.append({
                'test': 'MU Plugin Loaded',
                'status': 'PASS',
                'message': 'mu-plugin –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω'
            })
            self.log("‚úÖ PASS: mu-plugin –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ", Colors.GREEN)
            return True
        else:
            self.results.append({
                'test': 'MU Plugin Syntax',
                'status': 'FAIL',
                'message': f'–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {result.stderr}'
            })
            self.log(f"‚ùå FAIL: –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {result.stderr}", Colors.RED)
            return False
    
    def test_translations_loading(self):
        """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —á–µ—Ä–µ–∑ WP-CLI"""
        self.log("\nüìã –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤", Colors.BLUE + Colors.BOLD)
        
        # –û—á–∏—â–∞–µ–º debug.log –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
        with open(self.debug_log, 'w') as f:
            f.write('')
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É WordPress –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        result = subprocess.run(
            ['sudo', '-u', 'www-data', 'wp', 'plugin', 'list', '--path=' + self.site_path],
            capture_output=True,
            text=True,
            cwd=self.site_path
        )
        
        time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø–∏—Å—å –ª–æ–≥–æ–≤
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ —Ä–∞–Ω–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
        try:
            with open(self.debug_log, 'r') as f:
                log_content = f.read()
        except:
            log_content = ''
        
        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        problematic_domains = [
            'acf',
            'js_composer',
            'tier-pricing-table',
            'wc-quantity-plus-minus-button',
            'wp-yandex-metrika',
            'health-check',
            'woocommerce-1c',
            'import-products-to-vk',
            'wordpress-seo-news'
        ]
        
        errors_found = []
        for domain in problematic_domains:
            if f'<code>{domain}</code>' in log_content and 'triggered too early' in log_content:
                errors_found.append(domain)
        
        if errors_found:
            self.results.append({
                'test': 'Translations Loading',
                'status': 'FAIL',
                'message': f'–û—à–∏–±–∫–∏ —Ä–∞–Ω–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è: {", ".join(errors_found)}'
            })
            self.log(f"‚ùå FAIL: –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –¥–ª—è –¥–æ–º–µ–Ω–æ–≤: {', '.join(errors_found)}", Colors.RED)
            return False
        else:
            self.results.append({
                'test': 'Translations Loading',
                'status': 'PASS',
                'message': '–ù–µ—Ç –æ—à–∏–±–æ–∫ —Ä–∞–Ω–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤'
            })
            self.log("‚úÖ PASS: –û—à–∏–±–æ–∫ —Ä–∞–Ω–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ", Colors.GREEN)
            return True
    
    def test_woocommerce_cart(self):
        """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã WooCommerce"""
        self.log("\nüìã –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã WooCommerce", Colors.BLUE + Colors.BOLD)
        
        # –û—á–∏—â–∞–µ–º debug.log –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
        with open(self.debug_log, 'w') as f:
            f.write('')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–∑–∏–Ω—É —á–µ—Ä–µ–∑ WP-CLI
        result = subprocess.run(
            ['sudo', '-u', 'www-data', 'wp', 'eval', 'WC()->cart->is_empty();', '--path=' + self.site_path],
            capture_output=True,
            text=True,
            cwd=self.site_path
        )
        
        time.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ get_cart
        try:
            with open(self.debug_log, 'r') as f:
                log_content = f.read()
        except:
            log_content = ''
        
        cart_warnings = 'get_cart' in log_content and 'wp_loaded' in log_content
        
        if cart_warnings:
            self.results.append({
                'test': 'WooCommerce Cart Loading',
                'status': 'FAIL',
                'message': '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –≤—ã–∑–æ–≤–µ get_cart –¥–æ wp_loaded'
            })
            self.log("‚ùå FAIL: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –∫–æ—Ä–∑–∏–Ω–µ –≤—Å–µ –µ—â–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç", Colors.RED)
            return False
        else:
            self.results.append({
                'test': 'WooCommerce Cart Loading',
                'status': 'PASS',
                'message': '–ö–æ—Ä–∑–∏–Ω–∞ WooCommerce —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π'
            })
            self.log("‚úÖ PASS: –ö–æ—Ä–∑–∏–Ω–∞ WooCommerce —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", Colors.GREEN)
            return True
    
    def test_site_accessibility(self):
        """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞"""
        self.log("\nüìã –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞", Colors.BLUE + Colors.BOLD)
        
        try:
            result = subprocess.run(
                ['curl', '-s', '-o', '/dev/null', '-w', '%{http_code}', self.site_url],
                capture_output=True,
                text=True,
                timeout=10
            )
            
            status_code = result.stdout.strip()
            
            if status_code == '200':
                self.results.append({
                    'test': 'Site Accessibility',
                    'status': 'PASS',
                    'message': f'–°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP {status_code})'
                })
                self.log(f"‚úÖ PASS: –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP {status_code})", Colors.GREEN)
                return True
            else:
                self.results.append({
                    'test': 'Site Accessibility',
                    'status': 'WARN',
                    'message': f'–°–∞–π—Ç –≤–µ—Ä–Ω—É–ª HTTP {status_code}'
                })
                self.log(f"‚ö†Ô∏è  WARN: –°–∞–π—Ç –≤–µ—Ä–Ω—É–ª HTTP {status_code}", Colors.YELLOW)
                return True
        except Exception as e:
            self.results.append({
                'test': 'Site Accessibility',
                'status': 'FAIL',
                'message': f'–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {str(e)}'
            })
            self.log(f"‚ùå FAIL: –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∞–π—Ç—É: {str(e)}", Colors.RED)
            return False
    
    def test_debug_log_size(self):
        """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ debug.log –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        self.log("\nüìã –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ debug.log", Colors.BLUE + Colors.BOLD)
        
        try:
            size = os.path.getsize(self.debug_log)
            size_kb = size / 1024
            
            if size_kb < 10:  # –ú–µ–Ω–µ–µ 10 KB - —Ö–æ—Ä–æ—à–æ
                self.results.append({
                    'test': 'Debug Log Size',
                    'status': 'PASS',
                    'message': f'–†–∞–∑–º–µ—Ä debug.log: {size_kb:.2f} KB (–Ω–æ—Ä–º–∞)'
                })
                self.log(f"‚úÖ PASS: debug.log –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π ({size_kb:.2f} KB)", Colors.GREEN)
                return True
            else:
                self.results.append({
                    'test': 'Debug Log Size',
                    'status': 'WARN',
                    'message': f'–†–∞–∑–º–µ—Ä debug.log: {size_kb:.2f} KB (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—à–∏–±–∫–∏)'
                })
                self.log(f"‚ö†Ô∏è  WARN: debug.log –±–æ–ª—å—à–æ–π ({size_kb:.2f} KB)", Colors.YELLOW)
                return True
        except Exception as e:
            self.results.append({
                'test': 'Debug Log Size',
                'status': 'FAIL',
                'message': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}'
            })
            self.log(f"‚ùå FAIL: {str(e)}", Colors.RED)
            return False
    
    def test_fix_status_helper(self):
        """–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ–ª–ø–µ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        self.log("\nüìã –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ WP-CLI", Colors.BLUE + Colors.BOLD)
        
        result = subprocess.run(
            ['sudo', '-u', 'www-data', 'wp', 'eval', 'print_r(ecopackpro_check_fixes_status());', '--path=' + self.site_path],
            capture_output=True,
            text=True,
            cwd=self.site_path
        )
        
        if result.returncode == 0 and 'translations_fix_active' in result.stdout:
            self.results.append({
                'test': 'Fix Status Helper',
                'status': 'PASS',
                'message': '–•–µ–ª–ø–µ—Ä —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
            })
            self.log("‚úÖ PASS: –•–µ–ª–ø–µ—Ä —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç", Colors.GREEN)
            self.log(f"–í—ã–≤–æ–¥:\n{result.stdout}", Colors.BLUE)
            return True
        else:
            self.results.append({
                'test': 'Fix Status Helper',
                'status': 'FAIL',
                'message': '–•–µ–ª–ø–µ—Ä —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'
            })
            self.log("‚ùå FAIL: –•–µ–ª–ø–µ—Ä —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç", Colors.RED)
            return False
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        self.log("\n" + "="*80, Colors.BOLD)
        self.log("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ E2E –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø", Colors.BOLD + Colors.BLUE)
        self.log("="*80, Colors.BOLD)
        
        total = len(self.results)
        passed = sum(1 for r in self.results if r['status'] == 'PASS')
        failed = sum(1 for r in self.results if r['status'] == 'FAIL')
        warned = sum(1 for r in self.results if r['status'] == 'WARN')
        
        self.log(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        self.log(f"–£—Å–ø–µ—à–Ω–æ: {passed}", Colors.GREEN)
        if warned > 0:
            self.log(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warned}", Colors.YELLOW)
        if failed > 0:
            self.log(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}", Colors.RED)
        
        self.log("\n–î–µ—Ç–∞–ª–∏:", Colors.BOLD)
        for result in self.results:
            status_color = Colors.GREEN if result['status'] == 'PASS' else \
                          Colors.YELLOW if result['status'] == 'WARN' else Colors.RED
            
            self.log(f"\n  [{result['status']}] {result['test']}", status_color)
            self.log(f"    ‚îî‚îÄ {result['message']}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
        report_file = f'{self.site_path}/e2e_test_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump({
                'timestamp': datetime.now().isoformat(),
                'duration_seconds': time.time() - self.start_time,
                'total_tests': total,
                'passed': passed,
                'failed': failed,
                'warned': warned,
                'results': self.results
            }, f, indent=2, ensure_ascii=False)
        
        self.log(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}", Colors.BLUE)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        if failed == 0:
            self.log("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!", Colors.GREEN + Colors.BOLD)
            return 0
        else:
            self.log(f"\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´: {failed} —Ç–µ—Å—Ç(–æ–≤) –ø—Ä–æ–≤–∞–ª–µ–Ω–æ", Colors.RED + Colors.BOLD)
            return 1
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.start_time = time.time()
        
        self.log("="*80, Colors.BOLD)
        self.log("üöÄ –ó–ê–ü–£–°–ö E2E –¢–ï–°–¢–û–í –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô", Colors.BOLD + Colors.BLUE)
        self.log("="*80, Colors.BOLD)
        self.log(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.log(f"–°–∞–π—Ç: {self.site_url}")
        self.log(f"–ü—É—Ç—å: {self.site_path}")
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        self.test_mu_plugin_loaded()
        self.test_translations_loading()
        self.test_woocommerce_cart()
        self.test_site_accessibility()
        self.test_debug_log_size()
        self.test_fix_status_helper()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        return self.generate_report()

if __name__ == '__main__':
    runner = E2ETestRunner()
    exit_code = runner.run_all_tests()
    sys.exit(exit_code)

