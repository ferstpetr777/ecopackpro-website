#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ HTML –∫–æ–¥–∞ —Å—Ç–∞—Ç—å–∏ 7942
"""

import mysql.connector
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
DB_CONFIG = {
    'host': 'localhost',
    'user': 'm1shqamai2_worp6',
    'password': '9nUQkM*Q2cnvy379',
    'database': 'm1shqamai2_worp6',
    'charset': 'utf8mb4'
}

def comprehensive_html_check(html):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ HTML –∫–æ–¥–∞ –Ω–∞ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏"""
    
    print("=" * 80)
    print("üîç –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê HTML –ö–û–î–ê –°–¢–ê–¢–¨–ò 7942")
    print("=" * 80)
    
    issues = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Ç–µ–≥–æ–≤
    print("\n1. –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê –¢–ï–ì–û–í:")
    
    # –°—á–∏—Ç–∞–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–≥–∏
    tags_to_check = ['div', 'p', 'span', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ul', 'ol', 'li', 'table', 'tr', 'td', 'th', 'thead', 'tbody']
    
    for tag in tags_to_check:
        open_tags = len(re.findall(f'<{tag}[^>]*>', html, re.IGNORECASE))
        close_tags = len(re.findall(f'</{tag}>', html, re.IGNORECASE))
        
        if open_tags != close_tags:
            issues.append(f"–î–∏—Å–±–∞–ª–∞–Ω—Å —Ç–µ–≥–∞ {tag}: {open_tags} –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö vs {close_tags} –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö")
            print(f"‚ùå {tag}: {open_tags} vs {close_tags}")
        else:
            print(f"‚úÖ {tag}: {open_tags} —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è —Ç–µ–≥–æ–≤
    print("\n2. –ü–†–û–í–ï–†–ö–ê –°–ê–ú–û–ó–ê–ö–†–´–í–ê–Æ–©–ò–•–°–Ø –¢–ï–ì–û–í:")
    
    self_closing_tags = ['br', 'hr', 'img', 'input', 'meta', 'link']
    for tag in self_closing_tags:
        # –ò—â–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Ç–µ–≥–∏
        incorrect_pattern = f'<{tag}[^>]*></{tag}>'
        matches = re.findall(incorrect_pattern, html, re.IGNORECASE)
        if matches:
            issues.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Ç–µ–≥–∏ {tag}: {len(matches)} —à—Ç")
            print(f"‚ùå {tag}: {len(matches)} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ç–µ–≥–æ–≤")
        else:
            print(f"‚úÖ {tag}: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–µ–≥–∏")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    print("\n3. –ü–†–û–í–ï–†–ö–ê –ê–¢–†–ò–ë–£–¢–û–í:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
    unclosed_quotes = re.findall(r'=\s*"[^"]*$|=\s*\'[^\']*$', html)
    if unclosed_quotes:
        issues.append(f"–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö: {len(unclosed_quotes)} —à—Ç")
        print(f"‚ùå –ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∫–∞–≤—ã—á–∫–∏: {len(unclosed_quotes)}")
    else:
        print("‚úÖ –ö–∞–≤—ã—á–∫–∏ –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö –∑–∞–∫—Ä—ã—Ç—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
    empty_attrs = re.findall(r'=\s*["\']\s*["\']', html)
    if empty_attrs:
        issues.append(f"–ü—É—Å—Ç—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã: {len(empty_attrs)} —à—Ç")
        print(f"‚ùå –ü—É—Å—Ç—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã: {len(empty_attrs)}")
    else:
        print("‚úÖ –ü—É—Å—Ç—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
    print("\n4. –ü–†–û–í–ï–†–ö–ê –í–õ–û–ñ–ï–ù–ù–û–°–¢–ò:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –±–ª–æ—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    block_inline_issues = re.findall(r'<div[^>]*>.*?<p[^>]*>.*?<div[^>]*>', html, re.DOTALL)
    if block_inline_issues:
        issues.append(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å div –≤ p: {len(block_inline_issues)} —à—Ç")
        print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å: {len(block_inline_issues)}")
    else:
        print("‚úÖ –í–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    print("\n5. –ü–†–û–í–ï–†–ö–ê –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• –°–ò–ú–í–û–õ–û–í:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML entities
    unescaped_chars = re.findall(r'[<>&]', html)
    if unescaped_chars:
        issues.append(f"–ù–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {len(unescaped_chars)} —à—Ç")
        print(f"‚ùå –ù–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {len(unescaped_chars)}")
    else:
        print("‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã")
    
    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS –≤ style –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
    print("\n6. –ü–†–û–í–ï–†–ö–ê CSS –í STYLE –ê–¢–†–ò–ë–£–¢–ê–•:")
    
    style_attrs = re.findall(r'style\s*=\s*["\']([^"\']*)["\']', html)
    css_issues = 0
    for style in style_attrs:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ CSS –ø—Ä–∞–≤–∏–ª–∞
        if style.count('{') != style.count('}'):
            css_issues += 1
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ CSS –∑–Ω–∞—á–µ–Ω–∏—è
        if re.search(r';\s*;', style):
            css_issues += 1
    
    if css_issues:
        issues.append(f"–ü—Ä–æ–±–ª–µ–º—ã –≤ CSS: {css_issues} —à—Ç")
        print(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã –≤ CSS: {css_issues}")
    else:
        print("‚úÖ CSS –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
    
    # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫
    print("\n7. –ü–†–û–í–ï–†–ö–ê –°–°–´–õ–û–ö:")
    
    links = re.findall(r'<a[^>]*href\s*=\s*["\']([^"\']*)["\'][^>]*>', html)
    broken_links = 0
    for link in links:
        if link.startswith('http') and (' ' in link or link.count('//') > 1):
            broken_links += 1
    
    if broken_links:
        issues.append(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Å—ã–ª–∫–∏: {broken_links} —à—Ç")
        print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Å—ã–ª–∫–∏: {broken_links}")
    else:
        print("‚úÖ –°—Å—ã–ª–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ")
    
    # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    print("\n8. –ü–†–û–í–ï–†–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:")
    
    images = re.findall(r'<img[^>]*>', html)
    img_issues = 0
    for img in images:
        if not re.search(r'alt\s*=', img):
            img_issues += 1
        if not re.search(r'src\s*=', img):
            img_issues += 1
    
    if img_issues:
        issues.append(f"–ü—Ä–æ–±–ª–µ–º—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {img_issues} —à—Ç")
        print(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {img_issues}")
    else:
        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print("=" * 80)
    
    if issues:
        print(f"‚ùå –ù–ê–ô–î–ï–ù–û {len(issues)} –ü–†–û–ë–õ–ï–ú:")
        for i, issue in enumerate(issues, 1):
            print(f"   {i}. {issue}")
        return False, issues
    else:
        print("‚úÖ HTML –ö–û–î –ö–û–†–†–ï–ö–¢–ï–ù - –ü–†–û–ë–õ–ï–ú –ù–ï –ù–ê–ô–î–ï–ù–û!")
        return True, []

def main():
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏
        cursor.execute("SELECT post_content FROM wp_posts WHERE ID = 7942")
        content = cursor.fetchone()[0]
        
        print(f"üìÑ –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        is_valid, issues = comprehensive_html_check(content)
        
        cursor.close()
        conn.close()
        
        return is_valid, issues
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False, [str(e)]

if __name__ == '__main__':
    main()
