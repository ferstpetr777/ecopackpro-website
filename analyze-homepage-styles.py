#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª–µ–π –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∞–π—Ç–∞
"""

import requests
import re
from bs4 import BeautifulSoup
import json

def analyze_homepage_styles():
    """
    –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª–µ–π –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã bizfin-pro.ru
    """
    print("üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª–µ–π –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã bizfin-pro.ru")
    print("=" * 60)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º HTML –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        url = "https://bizfin-pro.ru/"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        
        print(f"üì° –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {url}")
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            # –ü–∞—Ä—Å–∏–º HTML
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏
            analyze_css_styles(soup)
            analyze_color_scheme(soup)
            analyze_typography(soup)
            analyze_layout(soup)
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def analyze_css_styles(soup):
    """
    –ê–Ω–∞–ª–∏–∑ CSS —Å—Ç–∏–ª–µ–π
    """
    print("\nüé® –ê–ù–ê–õ–ò–ó CSS –°–¢–ò–õ–ï–ô:")
    print("-" * 40)
    
    # –ò—â–µ–º –≤—Å–µ style —Ç–µ–≥–∏
    style_tags = soup.find_all('style')
    print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ <style> —Ç–µ–≥–æ–≤: {len(style_tags)}")
    
    # –ò—â–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ CSS —Ñ–∞–π–ª—ã
    css_links = soup.find_all('link', rel='stylesheet')
    print(f"üìÅ –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö CSS —Ñ–∞–π–ª–æ–≤: {len(css_links)}")
    
    for i, link in enumerate(css_links[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        href = link.get('href', '')
        print(f"   {i+1}. {href}")
    
    # –ò—â–µ–º inline —Å—Ç–∏–ª–∏
    elements_with_style = soup.find_all(attrs={'style': True})
    print(f"üéØ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å inline —Å—Ç–∏–ª—è–º–∏: {len(elements_with_style)}")

def analyze_color_scheme(soup):
    """
    –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã
    """
    print("\nüåà –ê–ù–ê–õ–ò–ó –¶–í–ï–¢–û–í–û–ô –°–•–ï–ú–´:")
    print("-" * 40)
    
    colors_found = set()
    
    # –ò—â–µ–º —Ü–≤–µ—Ç–∞ –≤ style –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
    elements_with_style = soup.find_all(attrs={'style': True})
    for element in elements_with_style:
        style = element.get('style', '')
        # –ò—â–µ–º hex —Ü–≤–µ—Ç–∞
        hex_colors = re.findall(r'#[0-9a-fA-F]{3,6}', style)
        colors_found.update(hex_colors)
        
        # –ò—â–µ–º rgb —Ü–≤–µ—Ç–∞
        rgb_colors = re.findall(r'rgb\([^)]+\)', style)
        colors_found.update(rgb_colors)
    
    # –ò—â–µ–º —Ü–≤–µ—Ç–∞ –≤ style —Ç–µ–≥–∞—Ö
    style_tags = soup.find_all('style')
    for style_tag in style_tags:
        style_content = style_tag.string or ''
        hex_colors = re.findall(r'#[0-9a-fA-F]{3,6}', style_content)
        colors_found.update(hex_colors)
        rgb_colors = re.findall(r'rgb\([^)]+\)', style_content)
        colors_found.update(rgb_colors)
    
    print(f"üé® –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤: {len(colors_found)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –ø–æ —Ç–∏–ø–∞–º
    primary_colors = []
    accent_colors = []
    background_colors = []
    text_colors = []
    
    for color in colors_found:
        if color.startswith('#'):
            if color in ['#FFFFFF', '#FFF', '#ffffff', '#fff']:
                background_colors.append(color)
            elif color in ['#000000', '#000', '#333333', '#333', '#222222', '#222']:
                text_colors.append(color)
            elif 'FF' in color.upper() and ('8C' in color.upper() or '6B' in color.upper()):
                accent_colors.append(color)
            else:
                primary_colors.append(color)
    
    print("\nüìä –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤:")
    print(f"   üé® –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞: {list(primary_colors)[:10]}")
    print(f"   üß° –ê–∫—Ü–µ–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞: {list(accent_colors)[:5]}")
    print(f"   ‚ö™ –§–æ–Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞: {list(background_colors)[:5]}")
    print(f"   üìù –¶–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞: {list(text_colors)[:5]}")

def analyze_typography(soup):
    """
    –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏
    """
    print("\nüìù –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–ì–†–ê–§–ò–ö–ò:")
    print("-" * 40)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headings = {
        'h1': len(soup.find_all('h1')),
        'h2': len(soup.find_all('h2')),
        'h3': len(soup.find_all('h3')),
        'h4': len(soup.find_all('h4')),
        'h5': len(soup.find_all('h5')),
        'h6': len(soup.find_all('h6'))
    }
    
    print("üìè –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:")
    for tag, count in headings.items():
        if count > 0:
            print(f"   {tag.upper()}: {count} —à—Ç.")
    
    # –ò—â–µ–º —à—Ä–∏—Ñ—Ç—ã
    font_families = set()
    style_tags = soup.find_all('style')
    for style_tag in style_tags:
        style_content = style_tag.string or ''
        fonts = re.findall(r'font-family:\s*([^;]+)', style_content, re.IGNORECASE)
        for font in fonts:
            font_families.add(font.strip())
    
    print(f"\nüî§ –ù–∞–π–¥–µ–Ω–æ —à—Ä–∏—Ñ—Ç–æ–≤: {len(font_families)}")
    for font in list(font_families)[:5]:
        print(f"   üìù {font}")

def analyze_layout(soup):
    """
    –ê–Ω–∞–ª–∏–∑ –º–∞–∫–µ—Ç–∞
    """
    print("\nüìê –ê–ù–ê–õ–ò–ó –ú–ê–ö–ï–¢–ê:")
    print("-" * 40)
    
    # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    containers = soup.find_all(['div', 'section', 'article', 'main', 'header', 'footer'])
    print(f"üì¶ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {len(containers)}")
    
    # –ò—â–µ–º –∫–ª–∞—Å—Å—ã —Å grid/flex
    grid_elements = soup.find_all(class_=re.compile(r'grid|flex|container|wrapper'))
    print(f"üéØ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å grid/flex –∫–ª–∞—Å—Å–∞–º–∏: {len(grid_elements)}")
    
    # –ò—â–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = soup.find_all(['button', 'a'], class_=re.compile(r'btn|button'))
    print(f"üîò –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫: {len(buttons)}")
    
    # –ò—â–µ–º —Ñ–æ—Ä–º—ã
    forms = soup.find_all('form')
    print(f"üìù –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ä–º: {len(forms)}")
    
    # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    images = soup.find_all('img')
    print(f"üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images)}")

def generate_style_report():
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å—Ç–∏–ª—è—Ö
    """
    print("\nüìã –û–¢–ß–ï–¢ –û –°–¢–ò–õ–Ø–• –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´:")
    print("=" * 60)
    
    print("""
üé® –û–°–ù–û–í–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –î–ò–ó–ê–ô–ù–ê:

1. –¶–í–ï–¢–û–í–ê–Ø –°–•–ï–ú–ê:
   - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω: –°–≤–µ—Ç–ª–æ-–±–µ–∂–µ–≤—ã–π (#FDFBF7)
   - –¢–µ–∫—Å—Ç: –¢–µ–º–Ω–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π (#333333)
   - –ê–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç: –û—Ä–∞–Ω–∂–µ–≤—ã–π (#FF8C00)
   - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: –ë–µ–ª—ã–π, —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π

2. –¢–ò–ü–û–ì–†–ê–§–ò–ö–ê:
   - –û—Å–Ω–æ–≤–Ω–æ–π —à—Ä–∏—Ñ—Ç: Inter, system fonts
   - –ó–∞–≥–æ–ª–æ–≤–∫–∏: Inter —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –≤–µ—Å–æ–º
   - –†–∞–∑–º–µ—Ä—ã: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ, –æ—Ç 0.9em –¥–æ 2.2em

3. –ú–ê–ö–ï–¢:
   - –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
   - –ö–∞—Ä—Ç–æ—á–∫–∏ —Å —Ç–µ–Ω—è–º–∏
   - –°–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã (8-15px)
   - –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏

4. –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–°–¢–¨:
   - Hover-—ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö
   - –ü–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
   - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω

5. –ë–†–ï–ù–î–ò–ù–ì:
   - –õ–æ–≥–æ—Ç–∏–ø —Å –æ—Ä–∞–Ω–∂–µ–≤–æ–π "–ë"
   - –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
   - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–∏–¥
    """)

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    try:
        analyze_homepage_styles()
        generate_style_report()
        
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

if __name__ == "__main__":
    main()


