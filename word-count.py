#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–ª–æ–≤ –≤ —Å—Ç–∞—Ç—å—è—Ö
"""

import re
import os

def count_words_in_file(file_path):
    """–ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤ –≤ —Ñ–∞–π–ª–µ"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏ –µ—Å–ª–∏ —ç—Ç–æ HTML —Ñ–∞–π–ª
        if file_path.endswith('.html'):
            clean_text = re.sub(r'<[^>]+>', ' ', content)
        else:
            # –£–¥–∞–ª—è–µ–º markdown —Ä–∞–∑–º–µ—Ç–∫—É
            clean_text = re.sub(r'[#*`\[\]()]', ' ', content)
        
        # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        clean_text = re.sub(r'[^\w\s]', ' ', clean_text)
        clean_text = re.sub(r'\s+', ' ', clean_text).strip()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ–≤–∞
        words = clean_text.split()
        word_count = len(words)
        
        # –¢–∞–∫–∂–µ –ø–æ—Å—á–∏—Ç–∞–µ–º —Å–∏–º–≤–æ–ª—ã
        char_count = len(clean_text)
        
        return word_count, char_count, content
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return 0, 0, ""

def main():
    print("üìä –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤ –≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–µ")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML –≤–µ—Ä—Å–∏—é
    html_file = "tender-guarantee-article.html"
    if os.path.exists(html_file):
        word_count, char_count, content = count_words_in_file(html_file)
        print(f"üìÑ HTML –≤–µ—Ä—Å–∏—è ({html_file}):")
        print(f"   üìä –°–ª–æ–≤: {word_count:,}")
        print(f"   üìù –°–∏–º–≤–æ–ª–æ–≤: {char_count:,}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è HTML
        paragraphs = len(re.findall(r'<p[^>]*>', content))
        headers = len(re.findall(r'<h[1-6][^>]*>', content))
        print(f"   üìÑ –ê–±–∑–∞—Ü–µ–≤: {paragraphs}")
        print(f"   üè∑Ô∏è –ó–∞–≥–æ–ª–æ–≤–∫–æ–≤: {headers}")
    else:
        print(f"‚ùå –§–∞–π–ª {html_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é
    text_file = "tender-guarantee-article-text.md"
    if os.path.exists(text_file):
        word_count, char_count, content = count_words_in_file(text_file)
        print(f"üìÑ –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è ({text_file}):")
        print(f"   üìä –°–ª–æ–≤: {word_count:,}")
        print(f"   üìù –°–∏–º–≤–æ–ª–æ–≤: {char_count:,}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        lines = len(content.split('\n'))
        print(f"   üìÑ –°—Ç—Ä–æ–∫: {lines}")
    else:
        print(f"‚ùå –§–∞–π–ª {text_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print()
    print("üéØ –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    print("   üìä –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 1,400-1,500 —Å–ª–æ–≤")
    print("   üìù –≠—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π SEO-—Å—Ç–∞—Ç—å–∏")
    print("   üéØ –°—Ç–∞—Ç—å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º")

if __name__ == "__main__":
    main()


