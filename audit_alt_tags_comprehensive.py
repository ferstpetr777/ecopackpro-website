#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import mysql.connector
import re
from datetime import datetime

# –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π
KEYWORDS = [
    "–∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã",
    "–ø–æ—á—Ç–æ–≤—ã–µ –∫–æ—Ä–æ–±–∫–∏", 
    "–∑–∏–ø –ø–∞–∫–µ—Ç—ã",
    "zip lock –ø–∞–∫–µ—Ç—ã —Å –±–µ–≥—É–Ω–∫–æ–º",
    "–∫–æ–Ω–≤–µ—Ä—Ç—ã —Å –≤–æ–∑–¥—É—à–Ω–æ–π –ø–æ–¥—É—à–∫–æ–π",
    "–∫–æ–Ω–≤–µ—Ä—Ç—ã —Å –≤–æ–∑–¥—É—à–Ω–æ–π –ø—Ä–æ—Å–ª–æ–π–∫–æ–π",
    "–∫—Ä–∞—Ñ—Ç–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã —Å –≤–æ–∑–¥—É—à–Ω–æ–π –ø–æ–¥—É—à–∫–æ–π",
    "–∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ",
    "–∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã –Ω–æ–º–µ—Ä–Ω—ã–µ",
    "–∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã —á–µ—Ä–Ω–æ-–±–µ–ª—ã–µ",
    "–∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã —Å –∫–∞—Ä–º–∞–Ω–æ–º",
    "zip lock –ø–∞–∫–µ—Ç—ã –º–∞—Ç–æ–≤—ã–µ",
    "zip lock –ø–∞–∫–µ—Ç—ã –æ–ø—Ç–æ–º",
    "–∫—Ä–∞—Ñ—Ç–æ–≤—ã–µ –∫–æ–Ω–≤–µ—Ä—Ç—ã",
    "–ø—É–∑—ã—Ä—á–∞—Ç—ã–µ –ø–∞–∫–µ—Ç—ã –í–ü–ü",
    "–∫–æ—Ä–æ–±–∫–∏ –¥–ª—è –ø–æ—á—Ç—ã",
    "–∫–æ—Ä–æ–±–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏",
    "—Å–∞–º–æ–∫–ª–µ—è—â–∏–µ—Å—è –∫–∞—Ä–º–∞–Ω—ã",
    "–∞–Ω—Ç–∏–º–∞–≥–Ω–∏—Ç–Ω–∞—è –ø–ª–æ–º–±–∞",
    "–Ω–∞–∫–ª–µ–π–∫–∞ –ø–ª–æ–º–±–∞ –∞–Ω—Ç–∏–º–∞–≥–Ω–∏—Ç",
    "–ø–ª–æ–º–±–∏—Ä–∞—Ç–æ—Ä –¥–ª—è –±–æ—á–µ–∫",
    "–Ω–æ–º–µ—Ä–Ω—ã–µ –ø–ª–æ–º–±—ã –Ω–∞–∫–ª–µ–π–∫–∏",
    "zip lock –ø–∞–∫–µ—Ç—ã —Å –±–µ–ª–æ–π –ø–æ–ª–æ—Å–æ–π",
    "–±–µ–ª—ã–µ –∫—Ä–∞—Ñ—Ç –ø–∞–∫–µ—Ç—ã —Å –ø—É–∑—ã—Ä—á–∞—Ç–æ–π –ø–ª—ë–Ω–∫–æ–π",
    "–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ zip lock –ø–∞–∫–µ—Ç—ã",
    "–∫—É–ø–∏—Ç—å –∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã —Å –Ω–æ–º–µ—Ä–Ω—ã–º —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–º",
    "–∑–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã –æ–ø—Ç–æ–º",
    "–∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã —á–µ—Ä–Ω–æ-–±–µ–ª—ã–µ —Å –∫–∞—Ä–º–∞–Ω–æ–º —Ü–µ–Ω–∞",
    "–º–∞—Ç–æ–≤—ã–µ zip lock –ø–∞–∫–µ—Ç—ã —Å –±–µ–≥—É–Ω–∫–æ–º 10√ó15",
    "–∫—É–ø–∏—Ç—å –æ–ø—Ç–æ–º zip lock –ø–∞–∫–µ—Ç—ã –º–∞—Ç–æ–≤—ã–µ 30 –º–∫–º",
    "–∫—Ä–∞—Ñ—Ç –∫–æ–Ω–≤–µ—Ä—Ç—ã —Å –≤–æ–∑–¥—É—à–Ω–æ–π –ø–æ–¥—É—à–∫–æ–π F/3",
    "–ø–æ—á—Ç–æ–≤—ã–µ –∫–æ—Ä–æ–±–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ S 260√ó170√ó80",
    "–ø–æ—á—Ç–æ–≤—ã–µ –∫–æ—Ä–æ–±–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ XL 530√ó360√ó220",
    "–∫—É–ø–∏—Ç—å —Å–∞–º–æ–∫–ª–µ—è—â–∏–µ—Å—è –∫–∞—Ä–º–∞–Ω—ã SD –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
    "–∞–Ω—Ç–∏–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –Ω–∞–∫–ª–µ–π–∫–∏ –¥–ª—è –≤–æ–¥—è–Ω—ã—Ö —Å—á—ë—Ç—á–∏–∫–æ–≤",
    "–∞–Ω—Ç–∏–º–∞–≥–Ω–∏—Ç–Ω–∞—è –ø–ª–æ–º–±–∞ —Ü–µ–Ω–∞ –∑–∞ 100 —à—Ç—É–∫",
    "–ø–ª–æ–º–±–∏—Ä–∞—Ç–æ—Ä –¥–ª—è –µ–≤—Ä–æ–±–æ—á–µ–∫ 2 –¥—é–π–º–∞",
    "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ–ø–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—á–µ–∫ ¬æ –¥—é–π–º–∞",
    "–∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã —á–µ—Ä–Ω–æ-–±–µ–ª—ã–µ –±–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–∞ –ê4",
    "–∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –¥–ª—è –æ–¥–µ–∂–¥—ã",
    "–∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ Ozon",
    "–ø–æ—á—Ç–æ–≤—ã–µ –∫–æ—Ä–æ–±–∫–∏ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –Ω–∞ –∑–∞–∫–∞–∑",
    "–∑–∏–ø –ø–∞–∫–µ—Ç—ã —Å –±–µ–≥—É–Ω–∫–æ–º –∫—É–ø–∏—Ç—å –ú–æ—Å–∫–≤–∞",
    "–º–∞—Ç–æ–≤—ã–µ zip lock –ø–∞–∫–µ—Ç—ã –¥–ª—è —á–∞—è",
    "zip lock –ø–∞–∫–µ—Ç—ã —Å –ø–æ–¥–≤–µ—Å–æ–º",
    "–±–µ–ª—ã–µ –∫—Ä–∞—Ñ—Ç-–ø–∞–∫–µ—Ç—ã —Å –ø—É–∑—ã—Ä—á–∞—Ç–æ–π –ø–ª—ë–Ω–∫–æ–π –æ–ø—Ç–æ–º",
    "–ø–ª–æ—Å–∫–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç—ã —Å –≤–æ–∑–¥—É—à–Ω–æ–π –ø–æ–¥—É—à–∫–æ–π –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
    "–ø–∞–∫–µ—Ç—ã –∏–∑ –≤–æ–∑–¥—É—à–Ω–æ-–ø—É–∑—ã—Ä—å–∫–æ–≤–æ–π –ø–ª—ë–Ω–∫–∏ –æ–ø—Ç–æ–º",
    "–∞–Ω—Ç–∏–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –ø–ª–æ–º–±—ã –¥–ª—è –≥–∞–∑–æ–≤—ã—Ö —Å—á—ë—Ç—á–∏–∫–æ–≤",
    "—Å–∞–º–æ–∫–ª–µ—è—â–∏–µ—Å—è –∫–∞—Ä–º–∞–Ω—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö"
]

def connect_to_database():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    return mysql.connector.connect(
        host='localhost',
        user='m1shqamai2_worp6',
        password='9nUQkM*Q2cnvy379',
        database='m1shqamai2_worp6',
        charset='utf8mb4'
    )

def find_articles_by_keywords(cursor):
    """–ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    articles = []
    
    for i, keyword in enumerate(KEYWORDS, 1):
        # –ò—â–µ–º —Å—Ç–∞—Ç—å–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
        cursor.execute("""
            SELECT ID, post_title, post_status 
            FROM wp_posts 
            WHERE post_type = 'post' 
            AND post_status = 'draft' 
            AND post_title LIKE %s
            ORDER BY ID
        """, (f'%{keyword}%',))
        
        results = cursor.fetchall()
        if results:
            result = results[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            articles.append({
                'number': i,
                'keyword': keyword,
                'id': result[0],
                'title': result[1],
                'status': result[2]
            })
            print(f"‚úÖ {i:2d}. ID {result[0]:4d}: {result[1]}")
        else:
            articles.append({
                'number': i,
                'keyword': keyword,
                'id': None,
                'title': '–ù–ï –ù–ê–ô–î–ï–ù–ê',
                'status': 'NOT_FOUND'
            })
            print(f"‚ùå {i:2d}. –ù–ï –ù–ê–ô–î–ï–ù–ê: {keyword}")
    
    return articles

def extract_images_from_content(content):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    patterns = [
        r'<img[^>]*>',  # –û–±—ã—á–Ω—ã–µ img —Ç–µ–≥–∏
        r'<figure[^>]*>.*?</figure>',  # Figure –±–ª–æ–∫–∏
    ]
    
    images = []
    
    for pattern in patterns:
        matches = re.finditer(pattern, content, re.DOTALL | re.IGNORECASE)
        for match in matches:
            img_html = match.group()
            images.append({
                'html': img_html,
                'start': match.start(),
                'end': match.end()
            })
    
    return images

def analyze_image_alt(img_html, article_title, keyword):
    """–ê–Ω–∞–ª–∏–∑ alt-–∞—Ç—Ä–∏–±—É—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ alt –∞—Ç—Ä–∏–±—É—Ç–∞
    alt_match = re.search(r'alt\s*=\s*["\']([^"\']*)["\']', img_html, re.IGNORECASE)
    current_alt = alt_match.group(1) if alt_match else ""
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ alt-—Ç–µ–≥–∞
    correct_alt = keyword.lower()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
    is_correct = current_alt.lower() == correct_alt
    
    return {
        'current_alt': current_alt,
        'correct_alt': correct_alt,
        'is_correct': is_correct,
        'needs_fix': not is_correct or not current_alt
    }

def fix_image_alt(img_html, correct_alt):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ alt-–∞—Ç—Ä–∏–±—É—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    # –ï—Å–ª–∏ alt —É–∂–µ –µ—Å—Ç—å, –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ
    if re.search(r'alt\s*=', img_html, re.IGNORECASE):
        fixed_html = re.sub(
            r'alt\s*=\s*["\'][^"\']*["\']',
            f'alt="{correct_alt}"',
            img_html,
            flags=re.IGNORECASE
        )
    else:
        # –ï—Å–ª–∏ alt –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ img —Ç–µ–≥
        fixed_html = re.sub(
            r'(<img[^>]*?)(/?>)',
            rf'\1 alt="{correct_alt}"\2',
            img_html,
            flags=re.IGNORECASE
        )
    
    return fixed_html

def audit_article_alt_tags(cursor, article):
    """–ê—É–¥–∏—Ç alt-—Ç–µ–≥–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–µ"""
    if not article['id']:
        return {
            'total_images': 0,
            'images_with_alt': 0,
            'images_correct_alt': 0,
            'images_to_fix': 0,
            'fixed_images': []
        }
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—å–∏
    cursor.execute("SELECT post_content FROM wp_posts WHERE ID = %s", (article['id'],))
    result = cursor.fetchone()
    if not result:
        return None
    
    content = result[0]
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    images = extract_images_from_content(content)
    
    total_images = len(images)
    images_with_alt = 0
    images_correct_alt = 0
    images_to_fix = 0
    fixed_images = []
    
    new_content = content
    
    print(f"\nüìã –°—Ç–∞—Ç—å—è {article['number']:2d}: {article['title']}")
    print(f"   ID: {article['id']}, –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {article['keyword']}")
    print(f"   –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    for i, img in enumerate(images, 1):
        analysis = analyze_image_alt(img['html'], article['title'], article['keyword'])
        
        print(f"   üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i}:")
        print(f"      –¢–µ–∫—É—â–∏–π alt: '{analysis['current_alt']}'")
        print(f"      –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π alt: '{analysis['correct_alt']}'")
        print(f"      –°—Ç–∞—Ç—É—Å: {'‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π' if analysis['is_correct'] else '‚ùå –¢—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è'}")
        
        if analysis['current_alt']:
            images_with_alt += 1
        
        if analysis['is_correct']:
            images_correct_alt += 1
        else:
            images_to_fix += 1
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º alt-—Ç–µ–≥
            fixed_html = fix_image_alt(img['html'], analysis['correct_alt'])
            new_content = new_content.replace(img['html'], fixed_html)
            
            fixed_images.append({
                'image_number': i,
                'old_alt': analysis['current_alt'],
                'new_alt': analysis['correct_alt']
            })
            
            print(f"      üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: '{analysis['current_alt']}' ‚Üí '{analysis['correct_alt']}'")
    
    # –ï—Å–ª–∏ –±—ã–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é
    if fixed_images:
        cursor.execute("UPDATE wp_posts SET post_content = %s WHERE ID = %s", (new_content, article['id']))
        print(f"   üíæ –°—Ç–∞—Ç—å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    return {
        'total_images': total_images,
        'images_with_alt': images_with_alt,
        'images_correct_alt': images_correct_alt,
        'images_to_fix': images_to_fix,
        'fixed_images': fixed_images
    }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞—É–¥–∏—Ç–∞"""
    print("üîç –ê–£–î–ò–¢ ALT-–¢–ï–ì–û–í –í–û –í–°–ï–• 50 –°–¢–ê–¢–¨–Ø–•")
    print("=" * 60)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    conn = connect_to_database()
    cursor = conn.cursor()
    
    try:
        # –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π
        print("\nüìö –ü–û–ò–°–ö –°–¢–ê–¢–ï–ô –ü–û –ö–õ–Æ–ß–ï–í–´–ú –°–õ–û–í–ê–ú:")
        articles = find_articles_by_keywords(cursor)
        
        # –ê—É–¥–∏—Ç –∫–∞–∂–¥–æ–π —Å—Ç–∞—Ç—å–∏
        print("\nüîç –ê–£–î–ò–¢ ALT-–¢–ï–ì–û–í:")
        print("=" * 60)
        
        total_stats = {
            'total_articles': 0,
            'articles_found': 0,
            'total_images': 0,
            'images_with_alt': 0,
            'images_correct_alt': 0,
            'images_to_fix': 0,
            'fixed_images': 0
        }
        
        for article in articles:
            total_stats['total_articles'] += 1
            
            if article['id']:
                total_stats['articles_found'] += 1
                
                stats = audit_article_alt_tags(cursor, article)
                if stats:
                    total_stats['total_images'] += stats['total_images']
                    total_stats['images_with_alt'] += stats['images_with_alt']
                    total_stats['images_correct_alt'] += stats['images_correct_alt']
                    total_stats['images_to_fix'] += stats['images_to_fix']
                    total_stats['fixed_images'] += len(stats['fixed_images'])
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        conn.commit()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –ê–£–î–ò–¢–£ ALT-–¢–ï–ì–û–í")
        print("=" * 60)
        
        print(f"üìö –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π –≤ —Å–ø–∏—Å–∫–µ: {total_stats['total_articles']}")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {total_stats['articles_found']}")
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {total_stats['total_articles'] - total_stats['articles_found']}")
        print()
        print(f"üñºÔ∏è  –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_stats['total_images']}")
        print(f"üìù –° alt-—Ç–µ–≥–∞–º–∏: {total_stats['images_with_alt']}")
        print(f"‚úÖ –° –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ alt-—Ç–µ–≥–∞–º–∏: {total_stats['images_correct_alt']}")
        print(f"‚ùå –¢—Ä–µ–±–æ–≤–∞–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {total_stats['images_to_fix']}")
        print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_stats['fixed_images']}")
        
        if total_stats['total_images'] > 0:
            correct_percentage = (total_stats['images_correct_alt'] / total_stats['total_images']) * 100
            print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö alt-—Ç–µ–≥–æ–≤: {correct_percentage:.1f}%")
        
        print("\n‚úÖ –ê–£–î–ò–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        conn.rollback()
    
    finally:
        cursor.close()
        conn.close()

if __name__ == "__main__":
    main()
