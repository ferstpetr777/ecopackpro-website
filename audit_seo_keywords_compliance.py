#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import mysql.connector
import requests
from requests.auth import HTTPBasicAuth
from datetime import datetime
import re

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö WordPress
DB_CONFIG = {
    'host': 'localhost',
    'user': 'm1shqamai2_worp6',
    'password': '9nUQkM*Q2cnvy379',
    'database': 'm1shqamai2_worp6'
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WordPress API
WP_API_URL = "https://ecopackpro.ru/wp-json/wp/v2"
WP_USERNAME = "rtep1976@me.com"
WP_APP_PASSWORD = "7EKIVWpH96dgVI3HovlIhI4E"

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö 50 —Å—Ç–∞—Ç–µ–π (–∫—Ä–æ–º–µ 7917, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞)
ARTICLE_IDS = [
    7204, 7205, 7206, 7207, 7253, 7208, 7209, 7210, 7211, 7212, 7213, 7214, 7215, 7216, 7217,
    7218, 7219, 7220, 7221, 7222, 7223, 7224, 7225, 7226, 7227, 7228, 7229, 7230, 7231, 7232,
    7233, 7234, 7235, 7236, 7237, 7238, 7239, 7240, 7241, 7242, 7243, 7244, 7245, 7246, 7247,
    7248, 7249, 7250, 7251, 7252, 7912, 7913, 7915, 7917, 7926, 7928, 7929, 7930, 7932, 7934,
    7938, 7939, 7941, 7943, 7944, 7945, 7946, 7947, 7948, 7949, 7952, 7953, 7954, 7955, 7956
]

class SEOKeywordsAuditor:
    def __init__(self):
        self.db_config = DB_CONFIG
        self.auth = HTTPBasicAuth(WP_USERNAME, WP_APP_PASSWORD)
        self.headers = {'Content-Type': 'application/json'}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—É–¥–∏—Ç–∞
        self.audit_stats = {
            'total': 0,
            'compliant': 0,
            'non_compliant': 0,
            'errors': 0,
            'problematic_articles': []
        }
    
    def connect_to_database(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL"""
        try:
            connection = mysql.connector.connect(**self.db_config)
            return connection
        except mysql.connector.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def get_article_seo_data(self, post_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ SEO –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        connection = self.connect_to_database()
        if not connection:
            return None
        
        try:
            cursor = connection.cursor(dictionary=True)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
            cursor.execute("""
                SELECT ID, post_title, post_name, post_content, post_excerpt
                FROM wp_posts 
                WHERE ID = %s
            """, (post_id,))
            
            post_data = cursor.fetchone()
            
            if not post_data:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞ –¥–∞–Ω–Ω—ã–µ Yoast SEO
            cursor.execute("""
                SELECT meta_key, meta_value
                FROM wp_postmeta 
                WHERE post_id = %s 
                AND meta_key IN (
                    '_yoast_wpseo_focuskw',
                    '_yoast_wpseo_metadesc',
                    '_yoast_wpseo_title',
                    '_yoast_wpseo_canonical'
                )
            """, (post_id,))
            
            meta_data = cursor.fetchall()
            meta_dict = {row['meta_key']: row['meta_value'] for row in meta_data}
            
            post_data['meta'] = meta_dict
            return post_data
            
        except mysql.connector.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ID {post_id}: {e}")
            return None
        finally:
            connection.close()
    
    def transliterate_to_latin(self, text):
        """–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –ª–∞—Ç–∏–Ω—Å–∫–∏–π"""
        translit_map = {
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo', '–∂': 'zh',
            '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n', '–æ': 'o',
            '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u', '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts',
            '—á': 'ch', '—à': 'sh', '—â': 'sch', '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu',
            '—è': 'ya', ' ': '-', '_': '-'
        }
        
        result = text.lower()
        for ru, en in translit_map.items():
            result = result.replace(ru, en)
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        result = re.sub(r'[^a-z0-9\-]', '', result)
        # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã
        result = re.sub(r'-+', '-', result)
        # –£–¥–∞–ª—è–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        result = result.strip('-')
        
        return result
    
    def check_slug_compliance(self, post_title, current_slug, focus_keyword):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è slug —Ñ–æ–∫—É—Å–Ω–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"""
        if not current_slug or not focus_keyword:
            return False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç slug –∏–ª–∏ —Ñ–æ–∫—É—Å–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ"
        
        # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ–º —Ñ–æ–∫—É—Å–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        expected_slug = self.transliterate_to_latin(focus_keyword)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        if current_slug == expected_slug:
            return True, f"Slug —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç: {current_slug}"
        else:
            return False, f"Slug –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è: {expected_slug}, —Ç–µ–∫—É—â–∏–π: {current_slug}"
    
    def check_meta_description_compliance(self, meta_description, focus_keyword):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏—è —Ñ–æ–∫—É—Å–Ω–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"""
        if not meta_description or not focus_keyword:
            return False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ñ–æ–∫—É—Å–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ —Å —Ñ–æ–∫—É—Å–Ω–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        if meta_description.strip().lower().startswith(focus_keyword.lower()):
            return True, f"–ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: {focus_keyword}"
        else:
            return False, f"–ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞. –ù–∞—á–∞–ª–æ: {meta_description[:50]}..."
    
    def audit_single_article(self, post_id):
        """–ê—É–¥–∏—Ç –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏"""
        try:
            article_data = self.get_article_seo_data(post_id)
            if not article_data:
                return {
                    'post_id': post_id,
                    'title': '–ù–ï –ù–ê–ô–î–ï–ù–ê',
                    'status': 'error',
                    'issues': ['–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö']
                }
            
            post_title = article_data['post_title']
            current_slug = article_data['post_name']
            meta = article_data.get('meta', {})
            focus_keyword = meta.get('_yoast_wpseo_focuskw', '')
            meta_description = meta.get('_yoast_wpseo_metadesc', '')
            
            issues = []
            status = 'compliant'
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ slug —Ñ–æ–∫—É—Å–Ω–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
            slug_ok, slug_message = self.check_slug_compliance(post_title, current_slug, focus_keyword)
            if not slug_ok:
                issues.append(f"Slug: {slug_message}")
                status = 'non_compliant'
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏—è —Ñ–æ–∫—É—Å–Ω–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
            meta_ok, meta_message = self.check_meta_description_compliance(meta_description, focus_keyword)
            if not meta_ok:
                issues.append(f"–ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ: {meta_message}")
                status = 'non_compliant'
            
            return {
                'post_id': post_id,
                'title': post_title,
                'focus_keyword': focus_keyword,
                'current_slug': current_slug,
                'meta_description': meta_description,
                'status': status,
                'issues': issues,
                'slug_ok': slug_ok,
                'meta_ok': meta_ok
            }
            
        except Exception as e:
            return {
                'post_id': post_id,
                'title': '–û–®–ò–ë–ö–ê',
                'status': 'error',
                'issues': [f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"]
            }
    
    def audit_all_articles(self):
        """–ê—É–¥–∏—Ç –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π"""
        print("üîç –ê–£–î–ò–¢ –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø SEO –ü–ê–†–ê–ú–ï–¢–†–û–í")
        print("=" * 80)
        print("–ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏:")
        print("1. –Ø—Ä–ª—ã–∫ (slug) —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ–∫—É—Å–Ω–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É (–ª–∞—Ç–∏–Ω—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏)")
        print("2. –ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ñ–æ–∫—É—Å–Ω–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ (—Ä—É—Å—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏)")
        print("=" * 80)
        
        self.audit_stats['total'] = len(ARTICLE_IDS)
        
        for i, post_id in enumerate(ARTICLE_IDS, 1):
            print(f"\nüìã {i}/{len(ARTICLE_IDS)} –ü—Ä–æ–≤–µ—Ä–∫–∞ ID {post_id}")
            
            result = self.audit_single_article(post_id)
            
            if result['status'] == 'compliant':
                print(f"‚úÖ {result['title']}")
                print(f"   üéØ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {result['focus_keyword']}")
                print(f"   üîó Slug: {result['current_slug']}")
                print(f"   üìù –ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ: {result['meta_description'][:60]}...")
                self.audit_stats['compliant'] += 1
                
            elif result['status'] == 'non_compliant':
                print(f"‚ùå {result['title']}")
                print(f"   üéØ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {result['focus_keyword']}")
                print(f"   üîó Slug: {result['current_slug']} {'‚úÖ' if result['slug_ok'] else '‚ùå'}")
                print(f"   üìù –ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ: {'‚úÖ' if result['meta_ok'] else '‚ùå'}")
                for issue in result['issues']:
                    print(f"   ‚ö†Ô∏è  {issue}")
                
                self.audit_stats['non_compliant'] += 1
                self.audit_stats['problematic_articles'].append(result)
                
            else:  # error
                print(f"üö® {result['title']}")
                for issue in result['issues']:
                    print(f"   ‚ùå {issue}")
                self.audit_stats['errors'] += 1
        
        return self.audit_stats
    
    def print_audit_report(self):
        """–í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –∞—É–¥–∏—Ç–∞"""
        print("\n" + "=" * 80)
        print("üìä –û–¢–ß–ï–¢ –ê–£–î–ò–¢–ê SEO –ü–ê–†–ê–ú–ï–¢–†–û–í")
        print("=" * 80)
        
        print(f"üìö –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {self.audit_stats['total']}")
        print(f"‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º: {self.audit_stats['compliant']}")
        print(f"‚ùå –ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º: {self.audit_stats['non_compliant']}")
        print(f"üö® –û—à–∏–±–∫–∏: {self.audit_stats['errors']}")
        
        if self.audit_stats['total'] > 0:
            compliance_rate = (self.audit_stats['compliant'] / self.audit_stats['total']) * 100
            print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: {compliance_rate:.1f}%")
        
        if self.audit_stats['problematic_articles']:
            print(f"\nüö® –ü–†–û–ë–õ–ï–ú–ù–´–ï –°–¢–ê–¢–¨–ò ({len(self.audit_stats['problematic_articles'])}):")
            print("-" * 80)
            
            for article in self.audit_stats['problematic_articles']:
                print(f"\nüìÑ ID {article['post_id']}: {article['title']}")
                print(f"   üéØ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {article['focus_keyword']}")
                print(f"   üîó –¢–µ–∫—É—â–∏–π slug: {article['current_slug']}")
                print(f"   üìù –ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ: {article['meta_description'][:80]}...")
                print(f"   üîó –°—Å—ã–ª–∫–∞: https://ecopackpro.ru/wp-admin/post.php?post={article['post_id']}&action=edit")
                
                for issue in article['issues']:
                    print(f"   ‚ö†Ô∏è  {issue}")
        
        return self.audit_stats['problematic_articles']

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    auditor = SEOKeywordsAuditor()
    
    # –ü—Ä–æ–≤–æ–¥–∏–º –∞—É–¥–∏—Ç –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π
    stats = auditor.audit_all_articles()
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
    problematic_articles = auditor.print_audit_report()
    
    print(f"\n" + "=" * 80)
    if problematic_articles:
        print(f"üö® –ù–ê–ô–î–ï–ù–û {len(problematic_articles)} –ü–†–û–ë–õ–ï–ú–ù–´–• –°–¢–ê–¢–ï–ô")
        print(f"üìù –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç–∞—Ç—å–∏:")
        print("-" * 40)
        for article in problematic_articles:
            print(f"https://ecopackpro.ru/wp-admin/post.php?post={article['post_id']}&action=edit")
    else:
        print(f"üéâ –í–°–ï –°–¢–ê–¢–¨–ò –°–û–û–¢–í–ï–¢–°–¢–í–£–Æ–¢ –ö–†–ò–¢–ï–†–ò–Ø–ú!")
    
    print(f"\n‚úÖ –ê–£–î–ò–¢ –ó–ê–í–ï–†–®–ï–ù!")

if __name__ == "__main__":
    main()
