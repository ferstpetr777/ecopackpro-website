#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import base64
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WordPress API
WORDPRESS_URL = "https://ecopackpro.ru"
APPLICATION_PASSWORD = "7EKI VWpH 96dg VI3H ovlI hI4E"
USERNAME = "rtep1976@me.com"

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
FIXED_ARTICLES = [7912, 7913, 7926, 7928, 7929, 7930, 7941, 7943, 7944, 7952, 7953, 7954, 7955]

class VerificationChecker:
    def __init__(self, url, username, app_password):
        self.url = url.rstrip('/')
        self.username = username
        self.app_password = app_password
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        credentials = f"{username}:{app_password}"
        encoded_credentials = base64.b64encode(credentials.encode()).decode()
        
        self.headers = {
            'Authorization': f'Basic {encoded_credentials}',
            'Content-Type': 'application/json',
            'User-Agent': 'WordPress-API-Client/1.0'
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.verification_stats = {
            'total': 0,
            'verified': 0,
            'failed': 0,
            'errors': []
        }
    
    def get_post_data(self, post_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞ –≤–∫–ª—é—á–∞—è –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        try:
            response = requests.get(
                f"{self.url}/wp-json/wp/v2/posts/{post_id}",
                headers=self.headers,
                params={'_embed': 'wp:featuredmedia'},
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                return None
                
        except Exception as e:
            return None
    
    def get_featured_image_info(self, post_data):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–ª–∞–≤–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        featured_media = post_data.get('_embedded', {}).get('wp:featuredmedia', [])
        
        if featured_media:
            media_info = featured_media[0]
            return {
                'id': media_info.get('id'),
                'url': media_info.get('source_url'),
                'alt': media_info.get('alt_text', ''),
            }
        return None
    
    def verify_single_article(self, post_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏"""
        try:
            post_data = self.get_post_data(post_id)
            if not post_data:
                return False, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"
            
            post_title = post_data.get('title', {}).get('rendered', '')
            post_content = post_data.get('content', {}).get('rendered', '')
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–ª–∞–≤–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            featured_img = self.get_featured_image_info(post_data)
            if not featured_img:
                return False, "–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            placeholder_count = post_content.count('Tvist-PRO')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            correct_img_count = post_content.count(featured_img['url'].split('/')[-1])
            
            if placeholder_count == 0 and correct_img_count > 0:
                return True, f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {correct_img_count}"
            elif placeholder_count > 0:
                return False, f"‚ùå –û—Å—Ç–∞–ª–∏—Å—å placeholder: {placeholder_count}"
            else:
                return False, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                
        except Exception as e:
            return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}"
    
    def verify_all_articles(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π"""
        print("üîç –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –°–¢–ê–¢–ï–ô")
        print("=" * 60)
        
        self.verification_stats['total'] = len(FIXED_ARTICLES)
        
        verified_articles = []
        failed_articles = []
        
        for i, post_id in enumerate(FIXED_ARTICLES, 1):
            print(f"\nüìã {i}/{len(FIXED_ARTICLES)} –ü—Ä–æ–≤–µ—Ä–∫–∞ ID {post_id}")
            
            is_verified, message = self.verify_single_article(post_id)
            
            if is_verified:
                print(f"‚úÖ {message}")
                verified_articles.append(post_id)
                self.verification_stats['verified'] += 1
            else:
                print(f"‚ùå {message}")
                failed_articles.append(post_id)
                self.verification_stats['failed'] += 1
                self.verification_stats['errors'].append(f"ID {post_id}: {message}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if i < len(FIXED_ARTICLES):
                time.sleep(0.5)
        
        return verified_articles, failed_articles
    
    def print_verification_report(self, verified_articles, failed_articles):
        """–í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ"""
        print("\n" + "=" * 60)
        print("üìä –û–¢–ß–ï–¢ –û –ü–†–û–í–ï–†–ö–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
        print("=" * 60)
        
        print(f"üìö –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {self.verification_stats['total']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã: {self.verification_stats['verified']}")
        print(f"‚ùå –¢—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏: {self.verification_stats['failed']}")
        
        if self.verification_stats['total'] > 0:
            success_rate = (self.verification_stats['verified'] / self.verification_stats['total']) * 100
            print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%")
        
        if verified_articles:
            print(f"\n‚úÖ –£–°–ü–ï–®–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –°–¢–ê–¢–¨–ò:")
            print("-" * 50)
            for post_id in verified_articles:
                print(f"  https://ecopackpro.ru/?p={post_id}&preview=true")
        
        if failed_articles:
            print(f"\n‚ùå –°–¢–ê–¢–¨–ò –¢–†–ï–ë–£–Æ–©–ò–ï –î–û–†–ê–ë–û–¢–ö–ò:")
            print("-" * 50)
            for post_id in failed_articles:
                print(f"  https://ecopackpro.ru/?p={post_id}&preview=true")
        
        if self.verification_stats['errors']:
            print(f"\nüö® –û–®–ò–ë–ö–ò:")
            for error in self.verification_stats['errors']:
                print(f"  - {error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –°–¢–ê–¢–ï–ô")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ
    checker = VerificationChecker(WORDPRESS_URL, USERNAME, APPLICATION_PASSWORD)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π
    verified_articles, failed_articles = checker.verify_all_articles()
    
    # –í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞
    checker.print_verification_report(verified_articles, failed_articles)
    
    if len(failed_articles) == 0:
        print(f"\nüéâ –í–°–ï –°–¢–ê–¢–¨–ò –£–°–ü–ï–®–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–´!")
    else:
        print(f"\n‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ {len(failed_articles)} —Å—Ç–∞—Ç–µ–π")

if __name__ == "__main__":
    main()
