#!/usr/bin/env python3
"""
–¢–µ—Å—Ç v3: –ó–ï–õ–Å–ù–´–ô badge + —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
"""

import sys
import requests
import json
import re
from datetime import datetime

class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    RESET = '\033[0m'
    BOLD = '\033[1m'

class GreenBadgeTest:
    def __init__(self):
        self.site_url = 'https://ecopackpro.ru'
        self.results = []
        
    def log(self, message, color=Colors.RESET):
        print(f"{color}{message}{Colors.RESET}")
    
    def test_v3_loaded(self):
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ v3"""
        self.log("\nüìã –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ mobile-cart-badge-v3-green.js", Colors.BLUE + Colors.BOLD)
        
        try:
            response = requests.get(self.site_url, timeout=10, verify=False)
            html = response.text
            
            has_v3 = 'mobile-cart-badge-v3-green.js' in html or 'mobile-cart-badge-v3' in html
            
            self.log(f"  {'‚úÖ' if has_v3 else '‚ùå'} v3.0 –ø–æ–¥–∫–ª—é—á–µ–Ω –≤ HTML", 
                    Colors.GREEN if has_v3 else Colors.RED)
            
            if has_v3:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º —Ñ–∞–π–ª
                js_url = f'{self.site_url}/wp-content/mu-plugins/mobile-cart-badge-v3-green.js'
                js_response = requests.get(js_url, timeout=10, verify=False)
                
                if js_response.status_code == 200:
                    js = js_response.text
                    
                    has_v3_marker = 'Mobile Cart Badge v3.0' in js or 'v3 GREEN' in js
                    has_green_marker = '–ó–ï–õ–Å–ù–´–ô' in js or 'GREEN' in js
                    has_sync = 'localStorage' in js and 'ecopackpro_cart_count_sync' in js
                    
                    self.log(f"  {'‚úÖ' if has_v3_marker else '‚ùå'} –í–µ—Ä—Å–∏—è 3.0 –º–∞—Ä–∫–µ—Ä", 
                            Colors.GREEN if has_v3_marker else Colors.RED)
                    self.log(f"  {'‚úÖ' if has_green_marker else '‚ùå'} GREEN –º–∞—Ä–∫–µ—Ä", 
                            Colors.GREEN if has_green_marker else Colors.RED)
                    self.log(f"  {'‚úÖ' if has_sync else '‚ùå'} –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è localStorage", 
                            Colors.GREEN if has_sync else Colors.RED)
                    
                    if has_v3_marker and has_sync:
                        self.results.append({
                            'test': 'v3 loaded',
                            'status': 'PASS',
                            'message': 'v3.0 GREEN –∑–∞–≥—Ä—É–∂–µ–Ω —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π'
                        })
                        self.log("\n‚úÖ PASS: v3.0 –∞–∫—Ç–∏–≤–µ–Ω", Colors.GREEN)
                        return True
            
            self.results.append({
                'test': 'v3 loaded',
                'status': 'FAIL',
                'message': 'v3.0 –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω'
            })
            self.log("\n‚ùå FAIL: v3.0 –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.RED)
            return False
        except Exception as e:
            self.results.append({
                'test': 'v3 loaded',
                'status': 'FAIL',
                'message': str(e)
            })
            self.log(f"‚ùå FAIL: {str(e)}", Colors.RED)
            return False
    
    def test_green_color_css(self):
        """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–µ–ª—ë–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –≤ CSS"""
        self.log("\nüìã –¢–µ—Å—Ç 2: –ó–ï–õ–Å–ù–´–ô —Ü–≤–µ—Ç badge (#00796B)", Colors.BLUE + Colors.BOLD)
        
        try:
            css_url = f'{self.site_url}/wp-content/mu-plugins/fix-all-cart-issues.css'
            response = requests.get(css_url, timeout=10, verify=False)
            
            if response.status_code == 200:
                css = response.text
                
                # –ò—â–µ–º –∑–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è mobile-cart-badge
                has_green_bg = '#00796B' in css
                has_green_comment = '–ó–ï–õ–Å–ù–´–ô' in css or 'GREEN' in css
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è mobile-cart-badge
                lines = css.split('\n')
                red_in_mobile_badge = False
                in_mobile_badge_block = False
                
                for line in lines:
                    if '.mobile-cart-badge' in line:
                        in_mobile_badge_block = True
                    if in_mobile_badge_block and '#ff4444' in line:
                        red_in_mobile_badge = True
                        break
                    if in_mobile_badge_block and '}' in line:
                        in_mobile_badge_block = False
                
                self.log(f"  {'‚úÖ' if has_green_bg else '‚ùå'} –ó–µ–ª—ë–Ω—ã–π —Ñ–æ–Ω #00796B", 
                        Colors.GREEN if has_green_bg else Colors.RED)
                self.log(f"  {'‚úÖ' if has_green_comment else '‚ùå'} –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–æ –∑–µ–ª—ë–Ω—ã–π", 
                        Colors.GREEN if has_green_comment else Colors.RED)
                self.log(f"  {'‚úÖ' if not red_in_mobile_badge else '‚ùå'} –ö—Ä–∞—Å–Ω—ã–π –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è", 
                        Colors.GREEN if not red_in_mobile_badge else Colors.RED)
                
                if has_green_bg and not red_in_mobile_badge:
                    self.results.append({
                        'test': 'green color css',
                        'status': 'PASS',
                        'message': 'Badge –∏–º–µ–µ—Ç –∑–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç'
                    })
                    self.log("\n‚úÖ PASS: –¶–≤–µ—Ç –ó–ï–õ–Å–ù–´–ô", Colors.GREEN)
                    return True
                else:
                    self.results.append({
                        'test': 'green color css',
                        'status': 'FAIL',
                        'message': '–¶–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π'
                    })
                    self.log("\n‚ùå FAIL: –¶–≤–µ—Ç –Ω–µ –∑–µ–ª—ë–Ω—ã–π", Colors.RED)
                    return False
        except Exception as e:
            self.results.append({
                'test': 'green color css',
                'status': 'FAIL',
                'message': str(e)
            })
            self.log(f"‚ùå FAIL: {str(e)}", Colors.RED)
            return False
    
    def test_positioning_fixed(self):
        """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.log("\nüìã –¢–µ—Å—Ç 3: –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤–º–µ—Å—Ç–µ —Å –∏–∫–æ–Ω–∫–æ–π)", Colors.BLUE + Colors.BOLD)
        
        try:
            css_url = f'{self.site_url}/wp-content/mu-plugins/fix-all-cart-issues.css'
            response = requests.get(css_url, timeout=10, verify=False)
            
            if response.status_code == 200:
                css = response.text
                
                has_transform = 'transform: translate(50%, -50%)' in css
                has_relative_parent = 'position: relative' in css
                has_top_right_zero = 'top: 0px' in css and 'right: 0px' in css
                
                self.log(f"  {'‚úÖ' if has_transform else '‚ùå'} Transform –¥–ª—è —É–≥–ª–æ–≤–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", 
                        Colors.GREEN if has_transform else Colors.RED)
                self.log(f"  {'‚úÖ' if has_relative_parent else '‚ùå'} Relative –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ", 
                        Colors.GREEN if has_relative_parent else Colors.RED)
                self.log(f"  {'‚úÖ' if has_top_right_zero else '‚ùå'} Top/Right: 0px", 
                        Colors.GREEN if has_top_right_zero else Colors.RED)
                
                if has_transform and has_relative_parent:
                    self.results.append({
                        'test': 'positioning fixed',
                        'status': 'PASS',
                        'message': '–ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ'
                    })
                    self.log("\n‚úÖ PASS: Badge –≤ —É–≥–ª—É –∏–∫–æ–Ω–∫–∏", Colors.GREEN)
                    return True
                else:
                    self.results.append({
                        'test': 'positioning fixed',
                        'status': 'FAIL',
                        'message': '–ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ'
                    })
                    self.log("\n‚ùå FAIL: –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ", Colors.RED)
                    return False
        except Exception as e:
            self.results.append({
                'test': 'positioning fixed',
                'status': 'FAIL',
                'message': str(e)
            })
            self.log(f"‚ùå FAIL: {str(e)}", Colors.RED)
            return False
    
    def test_sync_mechanism(self):
        """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ö–∞–Ω–∏–∑–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        self.log("\nüìã –¢–µ—Å—Ç 4: –ú–µ—Ö–∞–Ω–∏–∑–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (localStorage)", Colors.BLUE + Colors.BOLD)
        
        try:
            js_url = f'{self.site_url}/wp-content/mu-plugins/mobile-cart-badge-v3-green.js'
            response = requests.get(js_url, timeout=10, verify=False)
            
            if response.status_code == 200:
                js = response.text
                
                has_storage_key = 'ecopackpro_cart_count_sync' in js
                has_set_item = 'setItem' in js
                has_get_item = 'getItem' in js
                has_timestamp = 'timestamp' in js
                has_storage_event = 'addEventListener' in js and 'storage' in js
                
                self.log(f"  {'‚úÖ' if has_storage_key else '‚ùå'} Storage key –æ–ø—Ä–µ–¥–µ–ª—ë–Ω", 
                        Colors.GREEN if has_storage_key else Colors.RED)
                self.log(f"  {'‚úÖ' if has_set_item else '‚ùå'} setItem –¥–ª—è –∑–∞–ø–∏—Å–∏", 
                        Colors.GREEN if has_set_item else Colors.RED)
                self.log(f"  {'‚úÖ' if has_get_item else '‚ùå'} getItem –¥–ª—è —á—Ç–µ–Ω–∏—è", 
                        Colors.GREEN if has_get_item else Colors.RED)
                self.log(f"  {'‚úÖ' if has_timestamp else '‚ùå'} Timestamp –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏", 
                        Colors.GREEN if has_timestamp else Colors.RED)
                self.log(f"  {'‚úÖ' if has_storage_event else '‚ùå'} Storage event listener", 
                        Colors.GREEN if has_storage_event else Colors.RED)
                
                if has_storage_key and has_set_item and has_get_item:
                    self.results.append({
                        'test': 'sync mechanism',
                        'status': 'PASS',
                        'message': '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ localStorage —Ä–∞–±–æ—Ç–∞–µ—Ç'
                    })
                    self.log("\n‚úÖ PASS: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", Colors.GREEN)
                    return True
                else:
                    self.results.append({
                        'test': 'sync mechanism',
                        'status': 'FAIL',
                        'message': '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è'
                    })
                    self.log("\n‚ùå FAIL: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º–Ω–∞—è", Colors.RED)
                    return False
        except Exception as e:
            self.results.append({
                'test': 'sync mechanism',
                'status': 'FAIL',
                'message': str(e)
            })
            self.log(f"‚ùå FAIL: {str(e)}", Colors.RED)
            return False
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        self.log("\n" + "="*80, Colors.BOLD)
        self.log("üìä –û–¢–ß–Å–¢: –ó–ï–õ–Å–ù–´–ô BADGE + –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø", Colors.BOLD + Colors.BLUE)
        self.log("="*80, Colors.BOLD)
        
        total = len(self.results)
        passed = sum(1 for r in self.results if r['status'] == 'PASS')
        failed = sum(1 for r in self.results if r['status'] == 'FAIL')
        
        self.log(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        self.log(f"–£—Å–ø–µ—à–Ω–æ: {passed}", Colors.GREEN)
        if failed > 0:
            self.log(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}", Colors.RED)
        
        self.log("\n–î–µ—Ç–∞–ª–∏:", Colors.BOLD)
        for result in self.results:
            status_color = Colors.GREEN if result['status'] == 'PASS' else Colors.RED
            self.log(f"\n  [{result['status']}] {result['test']}", status_color)
            self.log(f"    ‚îî‚îÄ {result['message']}")
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        self.log("\n" + "="*80, Colors.BOLD)
        self.log("üì± –ü–†–û–í–ï–†–ö–ê –ù–ê –ú–û–ë–ò–õ–¨–ù–û–ú –¢–ï–õ–ï–§–û–ù–ï", Colors.CYAN + Colors.BOLD)
        self.log("="*80, Colors.BOLD)
        
        self.log("\n1. –û—Ç–∫—Ä–æ–π—Ç–µ https://ecopackpro.ru (–≥–ª–∞–≤–Ω–∞—è)", Colors.CYAN)
        self.log("2. –°–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –ù–ò–ñ–ù–Æ–Æ –ü–ê–ù–ï–õ–¨", Colors.CYAN)
        self.log("3. ‚úÖ Badge –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ó–ï–õ–Å–ù–´–ô (–Ω–µ –∫—Ä–∞—Å–Ω—ã–π!)", Colors.GREEN)
        self.log("4. ‚úÖ Badge –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 15 (–Ω–µ 3!)", Colors.GREEN)
        self.log("5. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É", Colors.CYAN)
        self.log("6. ‚úÖ Badge –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 15", Colors.GREEN)
        self.log("7. ‚úÖ –¶–≤–µ—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –ó–ï–õ–Å–ù–´–ô", Colors.GREEN)
        
        self.log("\nüêõ –û–¢–õ–ê–î–ö–ê –í –ö–û–ù–°–û–õ–ò:", Colors.YELLOW + Colors.BOLD)
        self.log("console.log(MobileCartBadge.currentCount);  // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å: 15")
        self.log("console.log(localStorage.getItem('ecopackpro_cart_count_sync'));")
        
        if failed == 0:
            self.log("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!", Colors.GREEN + Colors.BOLD)
            return 0
        else:
            self.log(f"\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–´: {failed} —Ç–µ—Å—Ç(–æ–≤)", Colors.RED + Colors.BOLD)
            return 1
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.log("="*80, Colors.BOLD)
        self.log("üöÄ –¢–ï–°–¢ v3.0: –ó–ï–õ–Å–ù–´–ô BADGE + –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø", Colors.BOLD + Colors.BLUE)
        self.log("="*80, Colors.BOLD)
        self.log(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.log(f"–°–∞–π—Ç: {self.site_url}")
        
        self.test_v3_loaded()
        self.test_green_color_css()
        self.test_positioning_fixed()
        self.test_sync_mechanism()
        
        return self.generate_report()

if __name__ == '__main__':
    import urllib3
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    
    runner = GreenBadgeTest()
    exit_code = runner.run_all_tests()
    sys.exit(exit_code)

