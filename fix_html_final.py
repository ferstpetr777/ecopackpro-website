#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import re
import requests
from requests.auth import HTTPBasicAuth
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WordPress API
WP_API_URL = "https://ecopackpro.ru/wp-json/wp/v2"
WP_USERNAME = "rtep1976@me.com"
WP_APP_PASSWORD = "7EKI VWpH 96dg VI3H ovlI hI4E"
ARTICLE_ID = 7939

class FinalHTMLFixer:
    def __init__(self):
        self.auth = HTTPBasicAuth(WP_USERNAME, WP_APP_PASSWORD)
        self.headers = {'Content-Type': 'application/json'}
        self.article_id = ARTICLE_ID

    def get_article_from_api(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—å—é —á–µ—Ä–µ–∑ WordPress API."""
        print(f"üîÑ –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç—å—é ID {self.article_id} —á–µ—Ä–µ–∑ API...")
        try:
            url = f"{WP_API_URL}/posts/{self.article_id}"
            response = requests.get(url, auth=self.auth, headers=self.headers, timeout=30)
            
            if response.status_code == 200:
                post = response.json()
                self.post_content = post['content']['rendered']
                print(f"‚úÖ –°—Ç–∞—Ç—å—è –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ API ({len(self.post_content)} —Å–∏–º–≤–æ–ª–æ–≤)")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
            return False

    def fix_all_newlines(self, html_content):
        """–§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."""
        print("üîß –ü—Ä–∏–º–µ–Ω—è—é –§–ò–ù–ê–õ–¨–ù–û–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤...")
        
        original_length = len(html_content)
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        html_content = html_content.replace('\\\\\\\\n', '\n')  # \\\\n -> \n
        html_content = html_content.replace('\\\\\\n', '\n')   # \\\n -> \n  
        html_content = html_content.replace('\\\\n', '\n')     # \\n -> \n
        html_content = html_content.replace('\\n', '\n')       # \n -> \n
        
        print(f"  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–±—ã–ª–æ {original_length}, —Å—Ç–∞–ª–æ {len(html_content)})")
        
        # –£–¥–∞–ª—è–µ–º —Ä–∞–∑–¥–µ–ª "–ò—Å—Ç–æ—á–Ω–∏–∫–∏" –ø–æ–ª–Ω–æ—Å—Ç—å—é
        sources_pattern = r'<h2[^>]*>üìö\s*–ò—Å—Ç–æ—á–Ω–∏–∫–∏</h2>.*?(?=<hr/>|<h2|$)'
        html_content = re.sub(sources_pattern, '', html_content, flags=re.DOTALL)
        print("  ‚úÖ –£–¥–∞–ª–µ–Ω —Ä–∞–∑–¥–µ–ª '–ò—Å—Ç–æ—á–Ω–∏–∫–∏'")
        
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
        html_content = re.sub(r'\n\s*\n\s*\n+', '\n\n', html_content)
        print("  ‚úÖ –£–¥–∞–ª–µ–Ω—ã –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫")
        
        return html_content.strip()

    def update_article(self, fixed_content):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ WordPress API."""
        print(f"üöÄ –û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç—å—é ID {self.article_id} —á–µ—Ä–µ–∑ WordPress API...")
        url = f"{WP_API_URL}/posts/{self.article_id}"

        data = {
            'content': fixed_content,
            'status': 'publish'
        }

        try:
            response = requests.post(url, auth=self.auth, headers=self.headers, json=data, timeout=120)
            if response.status_code == 200:
                post = response.json()
                print(f"‚úÖ –°—Ç–∞—Ç—å—è ID {self.article_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
                print(f"üîó –°—Å—ã–ª–∫–∞: {post['link']}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {response.status_code} - {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
            return False

    def run_final_fix(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        print("="*80)
        print("üîß –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï HTML –ö–û–î–ê".center(80))
        print("="*80)
        
        if not self.get_article_from_api():
            return False

        if not self.post_content:
            print("‚ùå –ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
            return False

        print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(self.post_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        fixed_html = self.fix_all_newlines(self.post_content)
        
        print(f"üìä –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {len(fixed_html)} —Å–∏–º–≤–æ–ª–æ–≤")

        if self.update_article(fixed_html):
            print("\n" + "="*80)
            print("üéâ –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!".center(80))
            print("="*80)
            return True
        else:
            print("\n" + "="*80)
            print("‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò".center(80))
            print("="*80)
            return False

if __name__ == "__main__":
    fixer = FinalHTMLFixer()
    fixer.run_final_fix()
