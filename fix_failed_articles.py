#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
from requests.auth import HTTPBasicAuth
import json
import re
import time
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WordPress API
WP_API_URL = "https://ecopackpro.ru/wp-json/wp/v2"
WP_USERNAME = "rtep1976@me.com"
WP_APP_PASSWORD = "7EKI VWpH 96dg VI3H ovlI hI4E"

# –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
SOURCES_BY_ARTICLE = {
    7909: [  # –ó–∏–ø –ø–∞–∫–µ—Ç—ã
        {'title': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É–ø–∞–∫–æ–≤–∫–µ –ø–∏—â–µ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤', 'url': 'https://www.consultant.ru/document/cons_doc_LAW_19109/'},
        {'title': '–ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ–ª–∏–º–µ—Ä–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–∏', 'url': 'https://www.unipack.ru/'},
        {'title': '–≠–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è —É–ø–∞–∫–æ–≤–∫–∏ - Zip lock —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'url': 'https://ru.wikipedia.org/wiki/–ü–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–π_–ø–∞–∫–µ—Ç'},
        {'title': '–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –ø–∏—â–µ–≤–æ–π —É–ø–∞–∫–æ–≤–∫–∏ - –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä', 'url': 'https://rospotrebnadzor.ru/'}
    ],
    7922: [  # –ö–æ—Ä–æ–±–∫–∏ –¥–ª—è –ø–æ—á—Ç—ã
        {'title': '–ü—Ä–∞–≤–∏–ª–∞ –ø–æ—á—Ç–æ–≤–æ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏ - –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏', 'url': 'https://www.pochta.ru/'},
        {'title': '–ì–û–°–¢ –† 53636-2009 - –£–ø–∞–∫–æ–≤–∫–∞ –∏–∑ –∫–∞—Ä—Ç–æ–Ω–∞', 'url': 'https://www.consultant.ru/document/cons_doc_LAW_19109/'},
        {'title': '–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã —É–ø–∞–∫–æ–≤–∫–∏ –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –ø–æ—á—Ç—ã', 'url': 'https://www.unipack.ru/'},
        {'title': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ—á—Ç–æ–≤–æ–π —É–ø–∞–∫–æ–≤–∫–µ', 'url': 'https://rospotrebnadzor.ru/'}
    ]
}

class FailedArticlesFixer:
    def __init__(self):
        self.auth = HTTPBasicAuth(WP_USERNAME, WP_APP_PASSWORD)
        self.headers = {'Content-Type': 'application/json'}
    
    def check_url_status(self, url, timeout=15):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL"""
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
        }
        
        try:
            session = requests.Session()
            response = session.get(
                url, 
                headers=headers, 
                timeout=timeout, 
                allow_redirects=True,
                verify=True
            )
            
            return response.status_code == 200, response.status_code
                
        except Exception as e:
            return False, None
    
    def get_post(self, post_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ API"""
        url = f"{WP_API_URL}/posts/{post_id}"
        try:
            response = requests.get(url, auth=self.auth, headers=self.headers, timeout=30)
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞ {post_id}: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞ {post_id}: {e}")
            return None
    
    def find_insertion_point(self, content):
        """–ü–æ–∏—Å–∫ –º–µ—Å—Ç–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        # –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –±–ª–æ–∫–∏ –ø–µ—Ä–µ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
        markers = [
            '–ú—ã –ø–æ–º–æ–∂–µ–º:',
            '–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:',
            '–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:',
            '–ó–∞–∫–ª—é—á–µ–Ω–∏–µ'
        ]
        
        for marker in markers:
            pos = content.find(marker)
            if pos != -1:
                # –ò—â–µ–º –∫–æ–Ω–µ—Ü —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞ - –∏—â–µ–º </p> –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø—É–Ω–∫—Ç–æ–≤
                after_marker = content[pos:]
                last_p_end = after_marker.rfind('</p>')
                if last_p_end != -1:
                    insertion_point = pos + last_p_end + 4  # +4 –¥–ª—è –¥–ª–∏–Ω—ã </p>
                    return insertion_point
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–ª–æ–∫–∏, –∏—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
        contact_pos = content.find('–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
        if contact_pos != -1:
            return contact_pos
        
        return None
    
    def create_sources_section(self, sources):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        if not sources:
            return ""
        
        sources_html = """
<hr />

<h2>üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏</h2>

<p>–ü—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —Å–ª–µ–¥—É—é—â–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:</p>

<ul>
"""
        
        for source in sources:
            sources_html += f'<li><a href="{source["url"]}" target="_blank" rel="noopener noreferrer nofollow">{source["title"]}</a></li>\n'
        
        sources_html += """</ul>

<p><em>–í—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ –º–æ–º–µ–Ω—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.</em></p>

<hr />
"""
        
        return sources_html
    
    def update_post(self, post_id, content):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ API"""
        url = f"{WP_API_URL}/posts/{post_id}"
        
        data = {
            'content': content
        }
        
        try:
            response = requests.post(url, auth=self.auth, headers=self.headers, json=data, timeout=30)
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ {post_id}: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ {post_id}: {e}")
            return None
    
    def fix_article(self, post_id, article_title):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏"""
        print(f"\nüìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ ID {post_id}: {article_title}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—å–∏
        potential_sources = SOURCES_BY_ARTICLE.get(post_id, [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        verified_sources = []
        for source in potential_sources:
            is_valid, status = self.check_url_status(source['url'])
            if is_valid:
                verified_sources.append(source)
            time.sleep(1)
        
        if not verified_sources:
            print(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Å—Ç–∞—Ç—å–∏ {post_id}")
            return False
        
        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(verified_sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç
        post = self.get_post(post_id)
        
        if not post:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç {post_id}")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        content = post['content']['rendered']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        if 'üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏' in content:
            print(f"‚ö†Ô∏è  –í —Å—Ç–∞—Ç—å–µ {post_id} —É–∂–µ –µ—Å—Ç—å —Ä–∞–∑–¥–µ–ª –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
            return True
        
        # –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        insertion_point = self.find_insertion_point(content)
        
        if insertion_point is None:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ —Å—Ç–∞—Ç—å–µ {post_id}")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        sources_section = self.create_sources_section(verified_sources)
        
        if not sources_section:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Å—Ç–∞—Ç—å–∏ {post_id}")
            return False
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç
        new_content = (
            content[:insertion_point] + 
            sources_section + 
            content[insertion_point:]
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç —á–µ—Ä–µ–∑ API
        updated_post = self.update_post(post_id, new_content)
        
        if updated_post:
            print(f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å—Ç–∞—Ç—å—é {post_id} ({len(verified_sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)")
            return True
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é {post_id}")
            return False
    
    def fix_all_failed_articles(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π"""
        print("=" * 80)
        print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ù–´–• –°–¢–ê–¢–ï–ô")
        print("=" * 80)
        
        failed_articles = [
            (7909, "–ó–∏–ø –ø–∞–∫–µ—Ç—ã"),
            (7922, "–ö–æ—Ä–æ–±–∫–∏ –¥–ª—è –ø–æ—á—Ç—ã")
        ]
        
        success_count = 0
        
        for post_id, title in failed_articles:
            print(f"\n[{success_count + 1}/{len(failed_articles)}] –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ ID {post_id}")
            
            if self.fix_article(post_id, title):
                success_count += 1
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç–∞—Ç—å—è–º–∏
            time.sleep(3)
        
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("=" * 80)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}")
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å: {len(failed_articles) - success_count}")
        
        return success_count

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    fixer = FailedArticlesFixer()
    success = fixer.fix_all_failed_articles()
    
    if success > 0:
        print(f"\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {success} —Å—Ç–∞—Ç–µ–π")
    else:
        print("\n‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ò–°–ü–†–ê–í–ò–¢–¨ –ù–ò –û–î–ù–£ –°–¢–ê–¢–¨–Æ")

if __name__ == "__main__":
    main()
