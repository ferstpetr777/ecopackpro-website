#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë–ï–ó–û–ü–ê–°–ù–´–ô –ê–£–î–ò–¢ –°–¢–ê–¢–ï–ô - –¢–û–õ–¨–ö–û –ß–¢–ï–ù–ò–ï, –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô!
"""
import mysql.connector
import re
from html.parser import HTMLParser

# –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
KEYWORDS = [
    "–∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã",
    "–ø–æ—á—Ç–æ–≤—ã–µ –∫–æ—Ä–æ–±–∫–∏",
    "–∑–∏–ø –ø–∞–∫–µ—Ç—ã",
    "zip lock –ø–∞–∫–µ—Ç—ã —Å –±–µ–≥—É–Ω–∫–æ–º",
    "–∫–æ–Ω–≤–µ—Ä—Ç—ã —Å –≤–æ–∑–¥—É—à–Ω–æ–π –ø–æ–¥—É—à–∫–æ–π",
    "–∫–æ–Ω–≤–µ—Ä—Ç—ã —Å –≤–æ–∑–¥—É—à–Ω–æ–π –ø—Ä–æ—Å–ª–æ–π–∫–æ–π",
    "–∫—Ä–∞—Ñ—Ç–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã —Å –≤–æ–∑–¥—É—à–Ω–æ–π –ø–æ–¥—É—à–∫–æ–π",
    "–∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ",
    "–∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã –Ω–æ–º–µ—Ä–Ω—ã–µ",
    "–∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã —á–µ—Ä–Ω–æ-–±–µ–ª—ã–µ",
    "–∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã —Å –∫–∞—Ä–º–∞–Ω–æ–º",
    "zip lock –ø–∞–∫–µ—Ç—ã –º–∞—Ç–æ–≤—ã–µ",
    "zip lock –ø–∞–∫–µ—Ç—ã –æ–ø—Ç–æ–º",
    "–∫—Ä–∞—Ñ—Ç–æ–≤—ã–µ –∫–æ–Ω–≤–µ—Ä—Ç—ã",
    "–ø—É–∑—ã—Ä—á–∞—Ç—ã–µ –ø–∞–∫–µ—Ç—ã –í–ü–ü",
    "–∫–æ—Ä–æ–±–∫–∏ –¥–ª—è –ø–æ—á—Ç—ã",
    "–∫–æ—Ä–æ–±–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏",
    "—Å–∞–º–æ–∫–ª–µ—è—â–∏–µ—Å—è –∫–∞—Ä–º–∞–Ω—ã",
    "–∞–Ω—Ç–∏–º–∞–≥–Ω–∏—Ç–Ω–∞—è –ø–ª–æ–º–±–∞",
    "–Ω–∞–∫–ª–µ–π–∫–∞ –ø–ª–æ–º–±–∞ –∞–Ω—Ç–∏–º–∞–≥–Ω–∏—Ç",
    "–ø–ª–æ–º–±–∏—Ä–∞—Ç–æ—Ä –¥–ª—è –±–æ—á–µ–∫",
    "–Ω–æ–º–µ—Ä–Ω—ã–µ –ø–ª–æ–º–±—ã –Ω–∞–∫–ª–µ–π–∫–∏",
    "zip lock –ø–∞–∫–µ—Ç—ã —Å –±–µ–ª–æ–π –ø–æ–ª–æ—Å–æ–π",
    "–±–µ–ª—ã–µ –∫—Ä–∞—Ñ—Ç –ø–∞–∫–µ—Ç—ã —Å –ø—É–∑—ã—Ä—á–∞—Ç–æ–π –ø–ª—ë–Ω–∫–æ–π",
    "–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ zip lock –ø–∞–∫–µ—Ç—ã",
    "–∫—É–ø–∏—Ç—å –∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã —Å –Ω–æ–º–µ—Ä–Ω—ã–º —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–º",
    "–∑–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã –æ–ø—Ç–æ–º",
    "–∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã —á–µ—Ä–Ω–æ-–±–µ–ª—ã–µ —Å –∫–∞—Ä–º–∞–Ω–æ–º —Ü–µ–Ω–∞",
    "–º–∞—Ç–æ–≤—ã–µ zip lock –ø–∞–∫–µ—Ç—ã —Å –±–µ–≥—É–Ω–∫–æ–º 10√ó15",
    "–∫—É–ø–∏—Ç—å –æ–ø—Ç–æ–º zip lock –ø–∞–∫–µ—Ç—ã –º–∞—Ç–æ–≤—ã–µ 30 –º–∫–º",
    "–∫—Ä–∞—Ñ—Ç –∫–æ–Ω–≤–µ—Ä—Ç—ã —Å –≤–æ–∑–¥—É—à–Ω–æ–π –ø–æ–¥—É—à–∫–æ–π F/3",
    "–ø–æ—á—Ç–æ–≤—ã–µ –∫–æ—Ä–æ–±–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ S 260√ó170√ó80",
    "–ø–æ—á—Ç–æ–≤—ã–µ –∫–æ—Ä–æ–±–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ XL 530√ó360√ó220",
    "–∫—É–ø–∏—Ç—å —Å–∞–º–æ–∫–ª–µ—è—â–∏–µ—Å—è –∫–∞—Ä–º–∞–Ω—ã SD –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
    "–∞–Ω—Ç–∏–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –Ω–∞–∫–ª–µ–π–∫–∏ –¥–ª—è –≤–æ–¥—è–Ω—ã—Ö —Å—á—ë—Ç—á–∏–∫–æ–≤",
    "–∞–Ω—Ç–∏–º–∞–≥–Ω–∏—Ç–Ω–∞—è –ø–ª–æ–º–±–∞ —Ü–µ–Ω–∞ –∑–∞ 100 —à—Ç—É–∫",
    "–ø–ª–æ–º–±–∏—Ä–∞—Ç–æ—Ä –¥–ª—è –µ–≤—Ä–æ–±–æ—á–µ–∫ 2 –¥—é–π–º–∞",
    "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ–ø–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—á–µ–∫ ¬æ –¥—é–π–º–∞",
    "–∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã —á–µ—Ä–Ω–æ-–±–µ–ª—ã–µ –±–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–∞ –ê4",
    "–∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –¥–ª—è –æ–¥–µ–∂–¥—ã",
    "–∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ Ozon",
    "–ø–æ—á—Ç–æ–≤—ã–µ –∫–æ—Ä–æ–±–∫–∏ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –Ω–∞ –∑–∞–∫–∞–∑",
    "–∑–∏–ø –ø–∞–∫–µ—Ç—ã —Å –±–µ–≥—É–Ω–∫–æ–º –∫—É–ø–∏—Ç—å –ú–æ—Å–∫–≤–∞",
    "–º–∞—Ç–æ–≤—ã–µ zip lock –ø–∞–∫–µ—Ç—ã –¥–ª—è —á–∞—è",
    "zip lock –ø–∞–∫–µ—Ç—ã —Å –ø–æ–¥–≤–µ—Å–æ–º",
    "–±–µ–ª—ã–µ –∫—Ä–∞—Ñ—Ç-–ø–∞–∫–µ—Ç—ã —Å –ø—É–∑—ã—Ä—á–∞—Ç–æ–π –ø–ª—ë–Ω–∫–æ–π –æ–ø—Ç–æ–º",
    "–ø–ª–æ—Å–∫–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç—ã —Å –≤–æ–∑–¥—É—à–Ω–æ–π –ø–æ–¥—É—à–∫–æ–π –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
    "–ø–∞–∫–µ—Ç—ã –∏–∑ –≤–æ–∑–¥—É—à–Ω–æ-–ø—É–∑—ã—Ä—å–∫–æ–≤–æ–π –ø–ª—ë–Ω–∫–∏ –æ–ø—Ç–æ–º",
    "–∞–Ω—Ç–∏–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –ø–ª–æ–º–±—ã –¥–ª—è –≥–∞–∑–æ–≤—ã—Ö —Å—á—ë—Ç—á–∏–∫–æ–≤",
    "—Å–∞–º–æ–∫–ª–µ—è—â–∏–µ—Å—è –∫–∞—Ä–º–∞–Ω—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö"
]

class ImageExtractor(HTMLParser):
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ HTML"""
    def __init__(self):
        super().__init__()
        self.images = []
    
    def handle_starttag(self, tag, attrs):
        if tag == 'img':
            img_data = dict(attrs)
            self.images.append(img_data)

def connect_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    return mysql.connector.connect(
        host='localhost',
        user='m1shqamai2_worp6',
        password='9nUQkM*Q2cnvy379',
        database='m1shqamai2_worp6',
        charset='utf8mb4'
    )

def get_article_info(cursor, post_id):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ"""
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–µ
    cursor.execute("""
        SELECT ID, post_title, post_content, post_status
        FROM wp_posts
        WHERE ID = %s
    """, (post_id,))
    post = cursor.fetchone()
    
    if not post:
        return None
    
    # Featured Image ID
    cursor.execute("""
        SELECT meta_value
        FROM wp_postmeta
        WHERE post_id = %s AND meta_key = '_thumbnail_id'
    """, (post_id,))
    featured_img_result = cursor.fetchone()
    featured_img_id = featured_img_result[0] if featured_img_result else None
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Featured Image
    featured_img_info = None
    if featured_img_id:
        cursor.execute("""
            SELECT post_title, guid
            FROM wp_posts
            WHERE ID = %s
        """, (featured_img_id,))
        img_post = cursor.fetchone()
        
        # Alt —Ç–µ–∫—Å—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        cursor.execute("""
            SELECT meta_value
            FROM wp_postmeta
            WHERE post_id = %s AND meta_key = '_wp_attachment_image_alt'
        """, (featured_img_id,))
        alt_result = cursor.fetchone()
        
        featured_img_info = {
            'id': featured_img_id,
            'title': img_post[0] if img_post else '',
            'url': img_post[1] if img_post else '',
            'alt': alt_result[0] if alt_result else ''
        }
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    parser = ImageExtractor()
    parser.feed(post[2])
    content_images = parser.images
    
    return {
        'id': post[0],
        'title': post[1],
        'content': post[2],
        'status': post[3],
        'featured_image': featured_img_info,
        'content_images': content_images
    }

def check_keyword_match(title, keyword):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"""
    title_lower = title.lower().strip()
    keyword_lower = keyword.lower().strip()
    
    # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if title_lower == keyword_lower:
        return 'exact'
    
    # –°–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
    if keyword_lower in title_lower:
        return 'contains'
    
    # –ü–æ—Ö–æ–∂–µ–µ (—É–¥–∞–ª—è–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
    title_clean = re.sub(r'[^\w\s]', '', title_lower)
    keyword_clean = re.sub(r'[^\w\s]', '', keyword_lower)
    if keyword_clean in title_clean:
        return 'similar'
    
    return 'no_match'

def main():
    print("=" * 80)
    print("–ê–£–î–ò–¢ –°–¢–ê–¢–ï–ô ECOPACKPRO.RU - –ë–ï–ó–û–ü–ê–°–ù–´–ô –†–ï–ñ–ò–ú (–¢–û–õ–¨–ö–û –ß–¢–ï–ù–ò–ï)")
    print("=" * 80)
    print()
    
    conn = connect_db()
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ 7907-7956
    cursor.execute("""
        SELECT ID, post_title
        FROM wp_posts
        WHERE ID BETWEEN 7907 AND 7956
        AND post_type = 'post'
        ORDER BY ID
    """)
    
    articles = cursor.fetchall()
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(articles)}")
    print()
    
    results = []
    issues_count = 0
    
    for idx, (post_id, post_title) in enumerate(articles, 1):
        print(f"\n{'='*80}")
        print(f"–°–¢–ê–¢–¨–Ø #{idx}: ID {post_id}")
        print(f"{'='*80}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        info = get_article_info(cursor, post_id)
        if not info:
            continue
        
        print(f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {info['title']}")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {info['status']}")
        print(f"üìè –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(info['content'])} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
        keyword = KEYWORDS[idx-1] if idx <= len(KEYWORDS) else None
        if keyword:
            match_type = check_keyword_match(info['title'], keyword)
            print(f"\nüîç –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword}")
            if match_type == 'exact':
                print(f"   ‚úÖ –¢–û–ß–ù–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï")
            elif match_type == 'contains':
                print(f"   ‚ö†Ô∏è  –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ")
            elif match_type == 'similar':
                print(f"   ‚ö†Ô∏è  –ü–æ—Ö–æ–∂–µ –Ω–∞ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ")
            else:
                print(f"   ‚ùå –ù–ï –°–û–í–ü–ê–î–ê–ï–¢!")
                issues_count += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Featured Image
        print(f"\nüñºÔ∏è  –ì–õ–ê–í–ù–û–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï (Featured Image):")
        if info['featured_image']:
            fi = info['featured_image']
            print(f"   ID: {fi['id']}")
            print(f"   Title: {fi['title']}")
            print(f"   Alt: {fi['alt'] if fi['alt'] else '‚ùå –ù–ï–¢ ALT-–¢–ï–ì–ê!'}")
            
            if not fi['alt']:
                issues_count += 1
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ alt –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
                if keyword:
                    alt_match = check_keyword_match(fi['alt'], keyword)
                    if alt_match in ['exact', 'contains', 'similar']:
                        print(f"   ‚úÖ Alt —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É")
                    else:
                        print(f"   ‚ö†Ô∏è  Alt –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ")
        else:
            print(f"   ‚ùå –ù–ï–¢ –ì–õ–ê–í–ù–û–ì–û –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø!")
            issues_count += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
        print(f"\nüì∑ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –í –ö–û–ù–¢–ï–ù–¢–ï: {len(info['content_images'])}")
        if info['content_images']:
            for i, img in enumerate(info['content_images'][:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                src = img.get('src', '')
                alt = img.get('alt', '')
                print(f"   {i}. {src[:60]}...")
                if alt:
                    print(f"      Alt: {alt[:60]}...")
                else:
                    print(f"      ‚ùå –ù–ï–¢ ALT-–¢–ï–ì–ê!")
                    issues_count += 1
            
            if len(info['content_images']) > 5:
                print(f"   ... –∏ –µ—â—ë {len(info['content_images']) - 5} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å Featured Image –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
        if info['featured_image'] and info['content_images']:
            featured_url = info['featured_image']['url']
            featured_id = str(info['featured_image']['id'])
            
            found_in_content = False
            for img in info['content_images']:
                img_src = img.get('src', '')
                if featured_id in img_src or featured_url in img_src:
                    found_in_content = True
                    break
            
            if found_in_content:
                print(f"\n   ‚úÖ –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –í–ò–î–ù–û –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ")
            else:
                print(f"\n   ‚ö†Ô∏è  –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ù–ï –ù–ê–ô–î–ï–ù–û –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ")
        
        results.append({
            'id': post_id,
            'title': info['title'],
            'keyword': keyword,
            'match': match_type if keyword else 'n/a',
            'featured_img': info['featured_image'] is not None,
            'featured_alt': bool(info['featured_image'] and info['featured_image']['alt']),
            'content_images_count': len(info['content_images']),
            'images_without_alt': sum(1 for img in info['content_images'] if not img.get('alt'))
        })
    
    # –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢
    print(f"\n\n{'='*80}")
    print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
    print(f"{'='*80}\n")
    
    print(f"–í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(results)}")
    print(f"–í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ: {issues_count}")
    print()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º
    no_featured = sum(1 for r in results if not r['featured_img'])
    no_featured_alt = sum(1 for r in results if r['featured_img'] and not r['featured_alt'])
    keyword_mismatch = sum(1 for r in results if r['match'] == 'no_match')
    images_no_alt_total = sum(r['images_without_alt'] for r in results)
    
    print("–ü–†–û–ë–õ–ï–ú–´:")
    print(f"  ‚ùå –°—Ç–∞—Ç–µ–π –±–µ–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {no_featured}")
    print(f"  ‚ùå –ì–ª–∞–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ alt: {no_featured_alt}")
    print(f"  ‚ùå –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: {keyword_mismatch}")
    print(f"  ‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ –±–µ–∑ alt: {images_no_alt_total}")
    print()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    with open('audit_report_readonly.txt', 'w', encoding='utf-8') as f:
        f.write("–î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ê–£–î–ò–¢–ê\n")
        f.write("=" * 80 + "\n\n")
        for r in results:
            f.write(f"ID: {r['id']}\n")
            f.write(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {r['title']}\n")
            f.write(f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {r['keyword']}\n")
            f.write(f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {r['match']}\n")
            f.write(f"–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'–î–∞' if r['featured_img'] else '–ù–µ—Ç'}\n")
            f.write(f"Alt —É –≥–ª–∞–≤–Ω–æ–≥–æ: {'–î–∞' if r['featured_alt'] else '–ù–µ—Ç'}\n")
            f.write(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ: {r['content_images_count']}\n")
            f.write(f"–ë–µ–∑ alt: {r['images_without_alt']}\n")
            f.write("\n" + "-" * 80 + "\n\n")
    
    print("‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: audit_report_readonly.txt")
    print()
    print("‚ö†Ô∏è  –í–ê–ñ–ù–û: –ù–∏–∫–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –ë–´–õ–ò –≤–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
    print("    –≠—Ç–æ –±—ã–ª –¢–û–õ–¨–ö–û –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∞—É–¥–∏—Ç.")
    
    cursor.close()
    conn.close()

if __name__ == '__main__':
    main()
