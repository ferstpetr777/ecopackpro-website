#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import re
from bs4 import BeautifulSoup
import requests
from requests.auth import HTTPBasicAuth
import json
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WordPress API
WP_API_URL = "https://ecopackpro.ru/wp-json/wp/v2"
WP_USERNAME = "rtep1976@me.com"
WP_APP_PASSWORD = "7EKI VWpH 96dg VI3H ovlI hI4E"
ARTICLE_ID = 7939

class CompleteHTMLFixer:
    def __init__(self):
        self.auth = HTTPBasicAuth(WP_USERNAME, WP_APP_PASSWORD)
        self.headers = {'Content-Type': 'application/json'}
        self.article_id = ARTICLE_ID

    def get_article_content_from_db(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        print(f"üîÑ –ü–æ–ª—É—á–∞—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏ ID {self.article_id} –∏–∑ –ë–î...")
        try:
            import subprocess
            result = subprocess.run([
                'mysql', '-u', 'm1shqamai2_worp6', 
                f'-p9nUQkM*Q2cnvy379', 'm1shqamai2_worp6', 
                '-e', f'SELECT post_content FROM wp_posts WHERE ID = {self.article_id};'
            ], capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                lines = result.stdout.strip().split('\n')
                if len(lines) > 1:
                    self.post_content = '\n'.join(lines[1:])  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    print(f"‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏ ID {self.article_id} –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –ë–î.")
                    return True
            
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ –ë–î.")
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç–∞—Ç—å–∏ –∏–∑ –ë–î: {e}")
            return False

    def fix_html_structure(self, html_content):
        """–ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã HTML."""
        print("üîß –ü—Ä–∏–º–µ–Ω—è—é –ü–û–õ–ù–û–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
        
        # –≠–¢–ê–ü 1: –ó–∞–º–µ–Ω–∏—Ç—å –í–°–ï —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã \\n –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        original_length = len(html_content)
        html_content = html_content.replace('\\n', '\n')
        html_content = html_content.replace('\\\\n', '\n')  # –î–≤–æ–π–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        print(f"  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (–±—ã–ª–æ {original_length} —Å–∏–º–≤–æ–ª–æ–≤)")

        # –≠–¢–ê–ü 2: –ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ BeautifulSoup
        soup = BeautifulSoup(html_content, 'html.parser')
        
        # –≠–¢–ê–ü 3: –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ "–ò—Å—Ç–æ—á–Ω–∏–∫–∏" –ø–æ–ª–Ω–æ—Å—Ç—å—é
        sources_removed = 0
        
        # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ "üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏"
        sources_heading = soup.find('h2', string=re.compile(r'üìö\s*–ò—Å—Ç–æ—á–Ω–∏–∫–∏'))
        if sources_heading:
            # –ù–∞–π–¥–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –±–ª–æ–∫ –∏ —É–¥–∞–ª–∏–º –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é
            parent = sources_heading.parent
            while parent and parent.name not in ['div', 'section', 'article']:
                parent = parent.parent
            
            if parent:
                # –£–¥–∞–ª—è–µ–º –≤–µ—Å—å –±–ª–æ–∫ –æ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ hr –∏–ª–∏ –∫–æ–Ω—Ü–∞
                current = sources_heading
                while current:
                    next_sibling = current.next_sibling
                    if current.name == 'hr' and current != sources_heading:
                        break
                    current.decompose()
                    sources_removed += 1
                    current = next_sibling
                    if not current or current.name in ['h1', 'h2', 'h3']:
                        break
                print(f"  ‚úÖ –£–¥–∞–ª–µ–Ω —Ä–∞–∑–¥–µ–ª '–ò—Å—Ç–æ—á–Ω–∏–∫–∏' ({sources_removed} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
        
        # –≠–¢–ê–ü 4: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
        toc_fixes = 0
        toc_div = soup.find('div', class_='table-of-contents')
        if toc_div:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ <p> —Ç–µ–≥–∏ –≤–Ω—É—Ç—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            for p_tag in toc_div.find_all('p'):
                if p_tag.find('a'):
                    # –ï—Å–ª–∏ <p> —Å–æ–¥–µ—Ä–∂–∏—Ç <a>, –∏–∑–≤–ª–µ–∫–∞–µ–º <a> –∏ –∑–∞–º–µ–Ω—è–µ–º <p>
                    a_tag = p_tag.find('a')
                    p_tag.replace_with(a_tag)
                    toc_fixes += 1
                else:
                    # –ü—É—Å—Ç–æ–π <p> –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º
                    p_tag.decompose()
                    toc_fixes += 1
            print(f"  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ({toc_fixes} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π)")
        
        # –≠–¢–ê–ü 5: –£–¥–∞–ª–µ–Ω–∏–µ –í–°–ï–• –ø—É—Å—Ç—ã—Ö <p> —Ç–µ–≥–æ–≤
        empty_p_count = 0
        for p_tag in soup.find_all('p'):
            text_content = p_tag.get_text(strip=True)
            if not text_content and not p_tag.find_all(True):
                p_tag.decompose()
                empty_p_count += 1
        print(f"  ‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø—É—Å—Ç—ã—Ö <p> —Ç–µ–≥–æ–≤: {empty_p_count}")
        
        # –≠–¢–ê–ü 6: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç–∞—Ç—å–∏
        nav_fixes = 0
        # –ò—â–µ–º –±–ª–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—å—è–º –≤ –∫–æ–Ω—Ü–µ
        nav_divs = soup.find_all('div', style=re.compile(r'background:\s*linear-gradient'))
        for nav_div in nav_divs:
            # –£–¥–∞–ª—è–µ–º <p> —Ç–µ–≥–∏ –≤–Ω—É—Ç—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
            for p_tag in nav_div.find_all('p'):
                if p_tag.find('a'):
                    a_tag = p_tag.find('a')
                    p_tag.replace_with(a_tag)
                    nav_fixes += 1
                elif not p_tag.get_text(strip=True):
                    p_tag.decompose()
                    nav_fixes += 1
        print(f"  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤ –∫–æ–Ω—Ü–µ —Å—Ç–∞—Ç—å–∏ ({nav_fixes} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π)")
        
        # –≠–¢–ê–ü 7: –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        final_cleans = 0
        
        # –£–¥–∞–ª—è–µ–º <hr/> —Ç–µ–≥–∏ –≤–Ω—É—Ç—Ä–∏ <p>
        for hr_tag in soup.find_all('hr'):
            if hr_tag.parent and hr_tag.parent.name == 'p':
                hr_tag.parent.insert_after(hr_tag)
                hr_tag.parent.decompose()
                final_cleans += 1
        
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ div —Å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª–∞–º–∏
        for div_tag in soup.find_all('div'):
            if not div_tag.get_text(strip=True) and not div_tag.find_all(True):
                div_tag.decompose()
                final_cleans += 1
                
        print(f"  ‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ ({final_cleans} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π HTML
        return str(soup)

    def update_article(self, fixed_content):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ WordPress API."""
        print(f"üöÄ –û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç—å—é ID {self.article_id} —á–µ—Ä–µ–∑ WordPress API...")
        url = f"{WP_API_URL}/posts/{self.article_id}"

        data = {
            'content': fixed_content,
            'status': 'publish'
        }

        try:
            response = requests.post(url, auth=self.auth, headers=self.headers, json=data, timeout=120)
            if response.status_code == 200:
                post = response.json()
                print(f"‚úÖ –°—Ç–∞—Ç—å—è ID {self.article_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
                print(f"üîó –°—Å—ã–ª–∫–∞: {post['link']}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {response.status_code} - {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
            return False

    def run_complete_fix(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        print("="*80)
        print("üîß –ü–û–õ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï HTML –ö–û–î–ê –°–¢–ê–¢–¨–ò".center(80))
        print("="*80)
        
        if not self.get_article_content_from_db():
            return False

        if not self.post_content:
            print("‚ùå –ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
            return False

        print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(self.post_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        fixed_html = self.fix_html_structure(self.post_content)
        
        print(f"üìä –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {len(fixed_html)} —Å–∏–º–≤–æ–ª–æ–≤")

        if self.update_article(fixed_html):
            print("\n" + "="*80)
            print("üéâ –ü–û–õ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!".center(80))
            print("="*80)
            return True
        else:
            print("\n" + "="*80)
            print("‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò".center(80))
            print("="*80)
            return False

if __name__ == "__main__":
    fixer = CompleteHTMLFixer()
    fixer.run_complete_fix()
